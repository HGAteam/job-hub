/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/themes/mobile/theme.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/themes/mobile/theme.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.7 (2022-12-06)\r\n */\n(function () {\n  'use strict';\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n    };\n    return _assign.apply(this, arguments);\n  };\n  function __rest(s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === 'function') for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n  }\n  function __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n        if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n        ar[i] = from[i];\n      }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n  }\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n  var isType$1 = function isType$1(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n  var eq$1 = function eq$1(t) {\n    return function (a) {\n      return t === a;\n    };\n  };\n  var isString = isType$1('string');\n  var isObject = isType$1('object');\n  var isArray = isType$1('array');\n  var isNull = eq$1(null);\n  var isBoolean = isSimpleType('boolean');\n  var isUndefined = eq$1(undefined);\n  var isNullable = function isNullable(a) {\n    return a === null || a === undefined;\n  };\n  var isNonNullable = function isNonNullable(a) {\n    return !isNullable(a);\n  };\n  var isFunction = isSimpleType('function');\n  var isNumber = isSimpleType('number');\n  var noop = function noop() {};\n  var compose = function compose(fa, fb) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return fa(fb.apply(null, args));\n    };\n  };\n  var compose1 = function compose1(fbc, fab) {\n    return function (a) {\n      return fbc(fab(a));\n    };\n  };\n  var constant$1 = function constant$1(value) {\n    return function () {\n      return value;\n    };\n  };\n  var identity = function identity(x) {\n    return x;\n  };\n  var tripleEquals = function tripleEquals(a, b) {\n    return a === b;\n  };\n  function curry(fn) {\n    var initialArgs = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      initialArgs[_i - 1] = arguments[_i];\n    }\n    return function () {\n      var restArgs = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        restArgs[_i] = arguments[_i];\n      }\n      var all = initialArgs.concat(restArgs);\n      return fn.apply(null, all);\n    };\n  }\n  var not = function not(f) {\n    return function (t) {\n      return !f(t);\n    };\n  };\n  var die = function die(msg) {\n    return function () {\n      throw new Error(msg);\n    };\n  };\n  var apply$1 = function apply$1(f) {\n    return f();\n  };\n  var never = constant$1(false);\n  var always = constant$1(true);\n  var none = function none() {\n    return NONE;\n  };\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant$1(null),\n      getOrUndefined: constant$1(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant$1('none()')\n    };\n    return me;\n  }();\n  var some = function some(a) {\n    var constant_a = constant$1(a);\n    var self = function self() {\n      return me;\n    };\n    var bind = function bind(f) {\n      return f(a);\n    };\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var cached = function cached(f) {\n    var called = false;\n    var r;\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      if (!called) {\n        called = true;\n        r = f.apply(null, args);\n      }\n      return r;\n    };\n  };\n  var DeviceType = function DeviceType(os, browser, userAgent, mediaMatch) {\n    var isiPad = os.isiOS() && /ipad/i.test(userAgent) === true;\n    var isiPhone = os.isiOS() && !isiPad;\n    var isMobile = os.isiOS() || os.isAndroid();\n    var isTouch = isMobile || mediaMatch('(pointer:coarse)');\n    var isTablet = isiPad || !isiPhone && isMobile && mediaMatch('(min-device-width:768px)');\n    var isPhone = isiPhone || isMobile && !isTablet;\n    var iOSwebview = browser.isSafari() && os.isiOS() && /safari/i.test(userAgent) === false;\n    var isDesktop = !isPhone && !isTablet && !iOSwebview;\n    return {\n      isiPad: constant$1(isiPad),\n      isiPhone: constant$1(isiPhone),\n      isTablet: constant$1(isTablet),\n      isPhone: constant$1(isPhone),\n      isTouch: constant$1(isTouch),\n      isAndroid: os.isAndroid,\n      isiOS: os.isiOS,\n      isWebView: constant$1(iOSwebview),\n      isDesktop: constant$1(isDesktop)\n    };\n  };\n  var nativeSlice = Array.prototype.slice;\n  var nativeIndexOf = Array.prototype.indexOf;\n  var nativePush = Array.prototype.push;\n  var rawIndexOf = function rawIndexOf(ts, t) {\n    return nativeIndexOf.call(ts, t);\n  };\n  var contains$1 = function contains$1(xs, x) {\n    return rawIndexOf(xs, x) > -1;\n  };\n  var exists = function exists(xs, pred) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      if (pred(x, i)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  var map$2 = function map$2(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n    return r;\n  };\n  var each$1 = function each$1(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n  var eachr = function eachr(xs, f) {\n    for (var i = xs.length - 1; i >= 0; i--) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n  var filter$2 = function filter$2(xs, pred) {\n    var r = [];\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      if (pred(x, i)) {\n        r.push(x);\n      }\n    }\n    return r;\n  };\n  var foldr = function foldr(xs, f, acc) {\n    eachr(xs, function (x, i) {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n  var foldl = function foldl(xs, f, acc) {\n    each$1(xs, function (x, i) {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n  var findUntil = function findUntil(xs, pred, until) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      if (pred(x, i)) {\n        return Optional.some(x);\n      } else if (until(x, i)) {\n        break;\n      }\n    }\n    return Optional.none();\n  };\n  var find$2 = function find$2(xs, pred) {\n    return findUntil(xs, pred, never);\n  };\n  var findIndex$1 = function findIndex$1(xs, pred) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      if (pred(x, i)) {\n        return Optional.some(i);\n      }\n    }\n    return Optional.none();\n  };\n  var flatten = function flatten(xs) {\n    var r = [];\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      if (!isArray(xs[i])) {\n        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n      }\n      nativePush.apply(r, xs[i]);\n    }\n    return r;\n  };\n  var bind$3 = function bind$3(xs, f) {\n    return flatten(map$2(xs, f));\n  };\n  var forall = function forall(xs, pred) {\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      var x = xs[i];\n      if (pred(x, i) !== true) {\n        return false;\n      }\n    }\n    return true;\n  };\n  var reverse = function reverse(xs) {\n    var r = nativeSlice.call(xs, 0);\n    r.reverse();\n    return r;\n  };\n  var difference = function difference(a1, a2) {\n    return filter$2(a1, function (x) {\n      return !contains$1(a2, x);\n    });\n  };\n  var pure$2 = function pure$2(x) {\n    return [x];\n  };\n  var sort = function sort(xs, comparator) {\n    var copy = nativeSlice.call(xs, 0);\n    copy.sort(comparator);\n    return copy;\n  };\n  var get$d = function get$d(xs, i) {\n    return i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();\n  };\n  var head = function head(xs) {\n    return get$d(xs, 0);\n  };\n  var findMap = function findMap(arr, f) {\n    for (var i = 0; i < arr.length; i++) {\n      var r = f(arr[i], i);\n      if (r.isSome()) {\n        return r;\n      }\n    }\n    return Optional.none();\n  };\n  var firstMatch = function firstMatch(regexes, s) {\n    for (var i = 0; i < regexes.length; i++) {\n      var x = regexes[i];\n      if (x.test(s)) {\n        return x;\n      }\n    }\n    return undefined;\n  };\n  var find$1 = function find$1(regexes, agent) {\n    var r = firstMatch(regexes, agent);\n    if (!r) {\n      return {\n        major: 0,\n        minor: 0\n      };\n    }\n    var group = function group(i) {\n      return Number(agent.replace(r, '$' + i));\n    };\n    return nu$8(group(1), group(2));\n  };\n  var detect$4 = function detect$4(versionRegexes, agent) {\n    var cleanedAgent = String(agent).toLowerCase();\n    if (versionRegexes.length === 0) {\n      return unknown$3();\n    }\n    return find$1(versionRegexes, cleanedAgent);\n  };\n  var unknown$3 = function unknown$3() {\n    return nu$8(0, 0);\n  };\n  var nu$8 = function nu$8(major, minor) {\n    return {\n      major: major,\n      minor: minor\n    };\n  };\n  var Version = {\n    nu: nu$8,\n    detect: detect$4,\n    unknown: unknown$3\n  };\n  var detectBrowser$1 = function detectBrowser$1(browsers, userAgentData) {\n    return findMap(userAgentData.brands, function (uaBrand) {\n      var lcBrand = uaBrand.brand.toLowerCase();\n      return find$2(browsers, function (browser) {\n        var _a;\n        return lcBrand === ((_a = browser.brand) === null || _a === void 0 ? void 0 : _a.toLowerCase());\n      }).map(function (info) {\n        return {\n          current: info.name,\n          version: Version.nu(parseInt(uaBrand.version, 10), 0)\n        };\n      });\n    });\n  };\n  var detect$3 = function detect$3(candidates, userAgent) {\n    var agent = String(userAgent).toLowerCase();\n    return find$2(candidates, function (candidate) {\n      return candidate.search(agent);\n    });\n  };\n  var detectBrowser = function detectBrowser(browsers, userAgent) {\n    return detect$3(browsers, userAgent).map(function (browser) {\n      var version = Version.detect(browser.versionRegexes, userAgent);\n      return {\n        current: browser.name,\n        version: version\n      };\n    });\n  };\n  var detectOs = function detectOs(oses, userAgent) {\n    return detect$3(oses, userAgent).map(function (os) {\n      var version = Version.detect(os.versionRegexes, userAgent);\n      return {\n        current: os.name,\n        version: version\n      };\n    });\n  };\n  var checkRange = function checkRange(str, substr, start) {\n    return substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n  };\n  var supplant = function supplant(str, obj) {\n    var isStringOrNumber = function isStringOrNumber(a) {\n      var t = _typeof(a);\n      return t === 'string' || t === 'number';\n    };\n    return str.replace(/\\$\\{([^{}]*)\\}/g, function (fullMatch, key) {\n      var value = obj[key];\n      return isStringOrNumber(value) ? value.toString() : fullMatch;\n    });\n  };\n  var contains = function contains(str, substr) {\n    return str.indexOf(substr) !== -1;\n  };\n  var endsWith = function endsWith(str, suffix) {\n    return checkRange(str, suffix, str.length - suffix.length);\n  };\n  var blank = function blank(r) {\n    return function (s) {\n      return s.replace(r, '');\n    };\n  };\n  var trim = blank(/^\\s+|\\s+$/g);\n  var normalVersionRegex = /.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/;\n  var checkContains = function checkContains(target) {\n    return function (uastring) {\n      return contains(uastring, target);\n    };\n  };\n  var browsers = [{\n    name: 'Edge',\n    versionRegexes: [/.*?edge\\/ ?([0-9]+)\\.([0-9]+)$/],\n    search: function search(uastring) {\n      return contains(uastring, 'edge/') && contains(uastring, 'chrome') && contains(uastring, 'safari') && contains(uastring, 'applewebkit');\n    }\n  }, {\n    name: 'Chrome',\n    brand: 'Chromium',\n    versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/, normalVersionRegex],\n    search: function search(uastring) {\n      return contains(uastring, 'chrome') && !contains(uastring, 'chromeframe');\n    }\n  }, {\n    name: 'IE',\n    versionRegexes: [/.*?msie\\ ?([0-9]+)\\.([0-9]+).*/, /.*?rv:([0-9]+)\\.([0-9]+).*/],\n    search: function search(uastring) {\n      return contains(uastring, 'msie') || contains(uastring, 'trident');\n    }\n  }, {\n    name: 'Opera',\n    versionRegexes: [normalVersionRegex, /.*?opera\\/([0-9]+)\\.([0-9]+).*/],\n    search: checkContains('opera')\n  }, {\n    name: 'Firefox',\n    versionRegexes: [/.*?firefox\\/\\ ?([0-9]+)\\.([0-9]+).*/],\n    search: checkContains('firefox')\n  }, {\n    name: 'Safari',\n    versionRegexes: [normalVersionRegex, /.*?cpu os ([0-9]+)_([0-9]+).*/],\n    search: function search(uastring) {\n      return (contains(uastring, 'safari') || contains(uastring, 'mobile/')) && contains(uastring, 'applewebkit');\n    }\n  }];\n  var oses = [{\n    name: 'Windows',\n    search: checkContains('win'),\n    versionRegexes: [/.*?windows\\ nt\\ ?([0-9]+)\\.([0-9]+).*/]\n  }, {\n    name: 'iOS',\n    search: function search(uastring) {\n      return contains(uastring, 'iphone') || contains(uastring, 'ipad');\n    },\n    versionRegexes: [/.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/, /.*cpu os ([0-9]+)_([0-9]+).*/, /.*cpu iphone os ([0-9]+)_([0-9]+).*/]\n  }, {\n    name: 'Android',\n    search: checkContains('android'),\n    versionRegexes: [/.*?android\\ ?([0-9]+)\\.([0-9]+).*/]\n  }, {\n    name: 'OSX',\n    search: checkContains('mac os x'),\n    versionRegexes: [/.*?mac\\ os\\ x\\ ?([0-9]+)_([0-9]+).*/]\n  }, {\n    name: 'Linux',\n    search: checkContains('linux'),\n    versionRegexes: []\n  }, {\n    name: 'Solaris',\n    search: checkContains('sunos'),\n    versionRegexes: []\n  }, {\n    name: 'FreeBSD',\n    search: checkContains('freebsd'),\n    versionRegexes: []\n  }, {\n    name: 'ChromeOS',\n    search: checkContains('cros'),\n    versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/]\n  }];\n  var PlatformInfo = {\n    browsers: constant$1(browsers),\n    oses: constant$1(oses)\n  };\n  var edge = 'Edge';\n  var chrome = 'Chrome';\n  var ie = 'IE';\n  var opera = 'Opera';\n  var firefox = 'Firefox';\n  var safari = 'Safari';\n  var unknown$2 = function unknown$2() {\n    return nu$7({\n      current: undefined,\n      version: Version.unknown()\n    });\n  };\n  var nu$7 = function nu$7(info) {\n    var current = info.current;\n    var version = info.version;\n    var isBrowser = function isBrowser(name) {\n      return function () {\n        return current === name;\n      };\n    };\n    return {\n      current: current,\n      version: version,\n      isEdge: isBrowser(edge),\n      isChrome: isBrowser(chrome),\n      isIE: isBrowser(ie),\n      isOpera: isBrowser(opera),\n      isFirefox: isBrowser(firefox),\n      isSafari: isBrowser(safari)\n    };\n  };\n  var Browser = {\n    unknown: unknown$2,\n    nu: nu$7,\n    edge: constant$1(edge),\n    chrome: constant$1(chrome),\n    ie: constant$1(ie),\n    opera: constant$1(opera),\n    firefox: constant$1(firefox),\n    safari: constant$1(safari)\n  };\n  var windows = 'Windows';\n  var ios = 'iOS';\n  var android = 'Android';\n  var linux = 'Linux';\n  var osx = 'OSX';\n  var solaris = 'Solaris';\n  var freebsd = 'FreeBSD';\n  var chromeos = 'ChromeOS';\n  var unknown$1 = function unknown$1() {\n    return nu$6({\n      current: undefined,\n      version: Version.unknown()\n    });\n  };\n  var nu$6 = function nu$6(info) {\n    var current = info.current;\n    var version = info.version;\n    var isOS = function isOS(name) {\n      return function () {\n        return current === name;\n      };\n    };\n    return {\n      current: current,\n      version: version,\n      isWindows: isOS(windows),\n      isiOS: isOS(ios),\n      isAndroid: isOS(android),\n      isOSX: isOS(osx),\n      isLinux: isOS(linux),\n      isSolaris: isOS(solaris),\n      isFreeBSD: isOS(freebsd),\n      isChromeOS: isOS(chromeos)\n    };\n  };\n  var OperatingSystem = {\n    unknown: unknown$1,\n    nu: nu$6,\n    windows: constant$1(windows),\n    ios: constant$1(ios),\n    android: constant$1(android),\n    linux: constant$1(linux),\n    osx: constant$1(osx),\n    solaris: constant$1(solaris),\n    freebsd: constant$1(freebsd),\n    chromeos: constant$1(chromeos)\n  };\n  var detect$2 = function detect$2(userAgent, userAgentDataOpt, mediaMatch) {\n    var browsers = PlatformInfo.browsers();\n    var oses = PlatformInfo.oses();\n    var browser = userAgentDataOpt.bind(function (userAgentData) {\n      return detectBrowser$1(browsers, userAgentData);\n    }).orThunk(function () {\n      return detectBrowser(browsers, userAgent);\n    }).fold(Browser.unknown, Browser.nu);\n    var os = detectOs(oses, userAgent).fold(OperatingSystem.unknown, OperatingSystem.nu);\n    var deviceType = DeviceType(os, browser, userAgent, mediaMatch);\n    return {\n      browser: browser,\n      os: os,\n      deviceType: deviceType\n    };\n  };\n  var PlatformDetection = {\n    detect: detect$2\n  };\n  var mediaMatch = function mediaMatch(query) {\n    return window.matchMedia(query).matches;\n  };\n  var platform$1 = cached(function () {\n    return PlatformDetection.detect(navigator.userAgent, Optional.from(navigator.userAgentData), mediaMatch);\n  });\n  var detect$1 = function detect$1() {\n    return platform$1();\n  };\n  var constant = constant$1;\n  var touchstart = constant('touchstart');\n  var touchmove = constant('touchmove');\n  var touchend = constant('touchend');\n  var mousedown = constant('mousedown');\n  var mousemove = constant('mousemove');\n  var mouseup = constant('mouseup');\n  var mouseover = constant('mouseover');\n  var keydown = constant('keydown');\n  var keyup = constant('keyup');\n  var input$1 = constant('input');\n  var change = constant('change');\n  var click = constant('click');\n  var transitionend = constant('transitionend');\n  var selectstart = constant('selectstart');\n  var prefixName = function prefixName(name) {\n    return constant$1('alloy.' + name);\n  };\n  var alloy = {\n    tap: prefixName('tap')\n  };\n  var focus$4 = prefixName('focus');\n  var postBlur = prefixName('blur.post');\n  var postPaste = prefixName('paste.post');\n  var receive$1 = prefixName('receive');\n  var execute$5 = prefixName('execute');\n  var focusItem = prefixName('focus.item');\n  var tap = alloy.tap;\n  var longpress = prefixName('longpress');\n  var systemInit = prefixName('system.init');\n  var attachedToDom = prefixName('system.attached');\n  var detachedFromDom = prefixName('system.detached');\n  var focusShifted = prefixName('focusmanager.shifted');\n  var highlight$1 = prefixName('highlight');\n  var dehighlight$1 = prefixName('dehighlight');\n  var emit = function emit(component, event) {\n    dispatchWith(component, component.element, event, {});\n  };\n  var emitWith = function emitWith(component, event, properties) {\n    dispatchWith(component, component.element, event, properties);\n  };\n  var emitExecute = function emitExecute(component) {\n    emit(component, execute$5());\n  };\n  var dispatch = function dispatch(component, target, event) {\n    dispatchWith(component, target, event, {});\n  };\n  var dispatchWith = function dispatchWith(component, target, event, properties) {\n    var data = _assign({\n      target: target\n    }, properties);\n    component.getSystem().triggerEvent(event, target, data);\n  };\n  var dispatchEvent = function dispatchEvent(component, target, event, simulatedEvent) {\n    component.getSystem().triggerEvent(event, target, simulatedEvent.event);\n  };\n  var dispatchFocus = function dispatchFocus(component, target) {\n    component.getSystem().triggerFocus(target, component.element);\n  };\n  var DOCUMENT = 9;\n  var DOCUMENT_FRAGMENT = 11;\n  var ELEMENT = 1;\n  var TEXT = 3;\n  var fromHtml$2 = function fromHtml$2(html, scope) {\n    var doc = scope || document;\n    var div = doc.createElement('div');\n    div.innerHTML = html;\n    if (!div.hasChildNodes() || div.childNodes.length > 1) {\n      console.error('HTML does not have a single root node', html);\n      throw new Error('HTML must have a single root node');\n    }\n    return fromDom(div.childNodes[0]);\n  };\n  var fromTag = function fromTag(tag, scope) {\n    var doc = scope || document;\n    var node = doc.createElement(tag);\n    return fromDom(node);\n  };\n  var fromText = function fromText(text, scope) {\n    var doc = scope || document;\n    var node = doc.createTextNode(text);\n    return fromDom(node);\n  };\n  var fromDom = function fromDom(node) {\n    if (node === null || node === undefined) {\n      throw new Error('Node cannot be null or undefined');\n    }\n    return {\n      dom: node\n    };\n  };\n  var fromPoint = function fromPoint(docElm, x, y) {\n    return Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n  };\n  var SugarElement = {\n    fromHtml: fromHtml$2,\n    fromTag: fromTag,\n    fromText: fromText,\n    fromDom: fromDom,\n    fromPoint: fromPoint\n  };\n  var is$1 = function is$1(element, selector) {\n    var dom = element.dom;\n    if (dom.nodeType !== ELEMENT) {\n      return false;\n    } else {\n      var elem = dom;\n      if (elem.matches !== undefined) {\n        return elem.matches(selector);\n      } else if (elem.msMatchesSelector !== undefined) {\n        return elem.msMatchesSelector(selector);\n      } else if (elem.webkitMatchesSelector !== undefined) {\n        return elem.webkitMatchesSelector(selector);\n      } else if (elem.mozMatchesSelector !== undefined) {\n        return elem.mozMatchesSelector(selector);\n      } else {\n        throw new Error('Browser lacks native selectors');\n      }\n    }\n  };\n  var bypassSelector = function bypassSelector(dom) {\n    return dom.nodeType !== ELEMENT && dom.nodeType !== DOCUMENT && dom.nodeType !== DOCUMENT_FRAGMENT || dom.childElementCount === 0;\n  };\n  var all$2 = function all$2(selector, scope) {\n    var base = scope === undefined ? document : scope.dom;\n    return bypassSelector(base) ? [] : map$2(base.querySelectorAll(selector), SugarElement.fromDom);\n  };\n  var one = function one(selector, scope) {\n    var base = scope === undefined ? document : scope.dom;\n    return bypassSelector(base) ? Optional.none() : Optional.from(base.querySelector(selector)).map(SugarElement.fromDom);\n  };\n  var eq = function eq(e1, e2) {\n    return e1.dom === e2.dom;\n  };\n  typeof window !== 'undefined' ? window : Function('return this;')();\n  var name$1 = function name$1(element) {\n    var r = element.dom.nodeName;\n    return r.toLowerCase();\n  };\n  var type = function type(element) {\n    return element.dom.nodeType;\n  };\n  var isType = function isType(t) {\n    return function (element) {\n      return type(element) === t;\n    };\n  };\n  var isElement = isType(ELEMENT);\n  var isText = isType(TEXT);\n  var isDocument = isType(DOCUMENT);\n  var isDocumentFragment = isType(DOCUMENT_FRAGMENT);\n  var owner$2 = function owner$2(element) {\n    return SugarElement.fromDom(element.dom.ownerDocument);\n  };\n  var documentOrOwner = function documentOrOwner(dos) {\n    return isDocument(dos) ? dos : owner$2(dos);\n  };\n  var defaultView = function defaultView(element) {\n    return SugarElement.fromDom(documentOrOwner(element).dom.defaultView);\n  };\n  var parent = function parent(element) {\n    return Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n  };\n  var parents = function parents(element, isRoot) {\n    var stop = isFunction(isRoot) ? isRoot : never;\n    var dom = element.dom;\n    var ret = [];\n    while (dom.parentNode !== null && dom.parentNode !== undefined) {\n      var rawParent = dom.parentNode;\n      var p = SugarElement.fromDom(rawParent);\n      ret.push(p);\n      if (stop(p) === true) {\n        break;\n      } else {\n        dom = rawParent;\n      }\n    }\n    return ret;\n  };\n  var siblings$2 = function siblings$2(element) {\n    var filterSelf = function filterSelf(elements) {\n      return filter$2(elements, function (x) {\n        return !eq(element, x);\n      });\n    };\n    return parent(element).map(children).map(filterSelf).getOr([]);\n  };\n  var nextSibling = function nextSibling(element) {\n    return Optional.from(element.dom.nextSibling).map(SugarElement.fromDom);\n  };\n  var children = function children(element) {\n    return map$2(element.dom.childNodes, SugarElement.fromDom);\n  };\n  var child = function child(element, index) {\n    var cs = element.dom.childNodes;\n    return Optional.from(cs[index]).map(SugarElement.fromDom);\n  };\n  var firstChild = function firstChild(element) {\n    return child(element, 0);\n  };\n  var before$1 = function before$1(marker, element) {\n    var parent$1 = parent(marker);\n    parent$1.each(function (v) {\n      v.dom.insertBefore(element.dom, marker.dom);\n    });\n  };\n  var after$2 = function after$2(marker, element) {\n    var sibling = nextSibling(marker);\n    sibling.fold(function () {\n      var parent$1 = parent(marker);\n      parent$1.each(function (v) {\n        append$2(v, element);\n      });\n    }, function (v) {\n      before$1(v, element);\n    });\n  };\n  var prepend$1 = function prepend$1(parent, element) {\n    var firstChild$1 = firstChild(parent);\n    firstChild$1.fold(function () {\n      append$2(parent, element);\n    }, function (v) {\n      parent.dom.insertBefore(element.dom, v.dom);\n    });\n  };\n  var append$2 = function append$2(parent, element) {\n    parent.dom.appendChild(element.dom);\n  };\n  var appendAt = function appendAt(parent, element, index) {\n    child(parent, index).fold(function () {\n      append$2(parent, element);\n    }, function (v) {\n      before$1(v, element);\n    });\n  };\n  var append$1 = function append$1(parent, elements) {\n    each$1(elements, function (x) {\n      append$2(parent, x);\n    });\n  };\n  var empty = function empty(element) {\n    element.dom.textContent = '';\n    each$1(children(element), function (rogue) {\n      remove$7(rogue);\n    });\n  };\n  var remove$7 = function remove$7(element) {\n    var dom = element.dom;\n    if (dom.parentNode !== null) {\n      dom.parentNode.removeChild(dom);\n    }\n  };\n  var isShadowRoot = function isShadowRoot(dos) {\n    return isDocumentFragment(dos) && isNonNullable(dos.dom.host);\n  };\n  var supported = isFunction(Element.prototype.attachShadow) && isFunction(Node.prototype.getRootNode);\n  var isSupported$1 = constant$1(supported);\n  var getRootNode = supported ? function (e) {\n    return SugarElement.fromDom(e.dom.getRootNode());\n  } : documentOrOwner;\n  var getShadowRoot = function getShadowRoot(e) {\n    var r = getRootNode(e);\n    return isShadowRoot(r) ? Optional.some(r) : Optional.none();\n  };\n  var getShadowHost = function getShadowHost(e) {\n    return SugarElement.fromDom(e.dom.host);\n  };\n  var getOriginalEventTarget = function getOriginalEventTarget(event) {\n    if (isSupported$1() && isNonNullable(event.target)) {\n      var el = SugarElement.fromDom(event.target);\n      if (isElement(el) && isOpenShadowHost(el)) {\n        if (event.composed && event.composedPath) {\n          var composedPath = event.composedPath();\n          if (composedPath) {\n            return head(composedPath);\n          }\n        }\n      }\n    }\n    return Optional.from(event.target);\n  };\n  var isOpenShadowHost = function isOpenShadowHost(element) {\n    return isNonNullable(element.dom.shadowRoot);\n  };\n  var inBody = function inBody(element) {\n    var dom = isText(element) ? element.dom.parentNode : element.dom;\n    if (dom === undefined || dom === null || dom.ownerDocument === null) {\n      return false;\n    }\n    var doc = dom.ownerDocument;\n    return getShadowRoot(SugarElement.fromDom(dom)).fold(function () {\n      return doc.body.contains(dom);\n    }, compose1(inBody, getShadowHost));\n  };\n  var body = function body() {\n    return getBody(SugarElement.fromDom(document));\n  };\n  var getBody = function getBody(doc) {\n    var b = doc.dom.body;\n    if (b === null || b === undefined) {\n      throw new Error('Body is not available yet');\n    }\n    return SugarElement.fromDom(b);\n  };\n  var fireDetaching = function fireDetaching(component) {\n    emit(component, detachedFromDom());\n    var children = component.components();\n    each$1(children, fireDetaching);\n  };\n  var fireAttaching = function fireAttaching(component) {\n    var children = component.components();\n    each$1(children, fireAttaching);\n    emit(component, attachedToDom());\n  };\n  var attach$1 = function attach$1(parent, child) {\n    append$2(parent.element, child.element);\n  };\n  var detachChildren = function detachChildren(component) {\n    each$1(component.components(), function (childComp) {\n      return remove$7(childComp.element);\n    });\n    empty(component.element);\n    component.syncComponents();\n  };\n  var replaceChildren = function replaceChildren(component, newChildren) {\n    var subs = component.components();\n    detachChildren(component);\n    var deleted = difference(subs, newChildren);\n    each$1(deleted, function (comp) {\n      fireDetaching(comp);\n      component.getSystem().removeFromWorld(comp);\n    });\n    each$1(newChildren, function (childComp) {\n      if (!childComp.getSystem().isConnected()) {\n        component.getSystem().addToWorld(childComp);\n        attach$1(component, childComp);\n        if (inBody(component.element)) {\n          fireAttaching(childComp);\n        }\n      } else {\n        attach$1(component, childComp);\n      }\n      component.syncComponents();\n    });\n  };\n  var attach = function attach(parent, child) {\n    attachWith(parent, child, append$2);\n  };\n  var attachWith = function attachWith(parent, child, insertion) {\n    parent.getSystem().addToWorld(child);\n    insertion(parent.element, child.element);\n    if (inBody(parent.element)) {\n      fireAttaching(child);\n    }\n    parent.syncComponents();\n  };\n  var doDetach = function doDetach(component) {\n    fireDetaching(component);\n    remove$7(component.element);\n    component.getSystem().removeFromWorld(component);\n  };\n  var detach = function detach(component) {\n    var parent$1 = parent(component.element).bind(function (p) {\n      return component.getSystem().getByDom(p).toOptional();\n    });\n    doDetach(component);\n    parent$1.each(function (p) {\n      p.syncComponents();\n    });\n  };\n  var attachSystemAfter = function attachSystemAfter(element, guiSystem) {\n    attachSystemWith(element, guiSystem, after$2);\n  };\n  var attachSystemWith = function attachSystemWith(element, guiSystem, inserter) {\n    inserter(element, guiSystem.element);\n    var children$1 = children(guiSystem.element);\n    each$1(children$1, function (child) {\n      guiSystem.getByDom(child).each(fireAttaching);\n    });\n  };\n  var detachSystem = function detachSystem(guiSystem) {\n    var children$1 = children(guiSystem.element);\n    each$1(children$1, function (child) {\n      guiSystem.getByDom(child).each(fireDetaching);\n    });\n    remove$7(guiSystem.element);\n  };\n  var keys = Object.keys;\n  var hasOwnProperty = Object.hasOwnProperty;\n  var each = function each(obj, f) {\n    var props = keys(obj);\n    for (var k = 0, len = props.length; k < len; k++) {\n      var i = props[k];\n      var x = obj[i];\n      f(x, i);\n    }\n  };\n  var map$1 = function map$1(obj, f) {\n    return tupleMap(obj, function (x, i) {\n      return {\n        k: i,\n        v: f(x, i)\n      };\n    });\n  };\n  var tupleMap = function tupleMap(obj, f) {\n    var r = {};\n    each(obj, function (x, i) {\n      var tuple = f(x, i);\n      r[tuple.k] = tuple.v;\n    });\n    return r;\n  };\n  var objAcc = function objAcc(r) {\n    return function (x, i) {\n      r[i] = x;\n    };\n  };\n  var internalFilter = function internalFilter(obj, pred, onTrue, onFalse) {\n    var r = {};\n    each(obj, function (x, i) {\n      (pred(x, i) ? onTrue : onFalse)(x, i);\n    });\n    return r;\n  };\n  var filter$1 = function filter$1(obj, pred) {\n    var t = {};\n    internalFilter(obj, pred, objAcc(t), noop);\n    return t;\n  };\n  var mapToArray = function mapToArray(obj, f) {\n    var r = [];\n    each(obj, function (value, name) {\n      r.push(f(value, name));\n    });\n    return r;\n  };\n  var find = function find(obj, pred) {\n    var props = keys(obj);\n    for (var k = 0, len = props.length; k < len; k++) {\n      var i = props[k];\n      var x = obj[i];\n      if (pred(x, i, obj)) {\n        return Optional.some(x);\n      }\n    }\n    return Optional.none();\n  };\n  var values = function values(obj) {\n    return mapToArray(obj, identity);\n  };\n  var get$c = function get$c(obj, key) {\n    return has$2(obj, key) ? Optional.from(obj[key]) : Optional.none();\n  };\n  var has$2 = function has$2(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n  var hasNonNullableKey = function hasNonNullableKey(obj, key) {\n    return has$2(obj, key) && obj[key] !== undefined && obj[key] !== null;\n  };\n  var rawSet = function rawSet(dom, key, value) {\n    if (isString(value) || isBoolean(value) || isNumber(value)) {\n      dom.setAttribute(key, value + '');\n    } else {\n      console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n      throw new Error('Attribute value was not simple');\n    }\n  };\n  var set$8 = function set$8(element, key, value) {\n    rawSet(element.dom, key, value);\n  };\n  var setAll$1 = function setAll$1(element, attrs) {\n    var dom = element.dom;\n    each(attrs, function (v, k) {\n      rawSet(dom, k, v);\n    });\n  };\n  var get$b = function get$b(element, key) {\n    var v = element.dom.getAttribute(key);\n    return v === null ? undefined : v;\n  };\n  var getOpt = function getOpt(element, key) {\n    return Optional.from(get$b(element, key));\n  };\n  var has$1 = function has$1(element, key) {\n    var dom = element.dom;\n    return dom && dom.hasAttribute ? dom.hasAttribute(key) : false;\n  };\n  var remove$6 = function remove$6(element, key) {\n    element.dom.removeAttribute(key);\n  };\n  var read$2 = function read$2(element, attr) {\n    var value = get$b(element, attr);\n    return value === undefined || value === '' ? [] : value.split(' ');\n  };\n  var add$3 = function add$3(element, attr, id) {\n    var old = read$2(element, attr);\n    var nu = old.concat([id]);\n    set$8(element, attr, nu.join(' '));\n    return true;\n  };\n  var remove$5 = function remove$5(element, attr, id) {\n    var nu = filter$2(read$2(element, attr), function (v) {\n      return v !== id;\n    });\n    if (nu.length > 0) {\n      set$8(element, attr, nu.join(' '));\n    } else {\n      remove$6(element, attr);\n    }\n    return false;\n  };\n  var supports = function supports(element) {\n    return element.dom.classList !== undefined;\n  };\n  var get$a = function get$a(element) {\n    return read$2(element, 'class');\n  };\n  var add$2 = function add$2(element, clazz) {\n    return add$3(element, 'class', clazz);\n  };\n  var remove$4 = function remove$4(element, clazz) {\n    return remove$5(element, 'class', clazz);\n  };\n  var add$1 = function add$1(element, clazz) {\n    if (supports(element)) {\n      element.dom.classList.add(clazz);\n    } else {\n      add$2(element, clazz);\n    }\n  };\n  var cleanClass = function cleanClass(element) {\n    var classList = supports(element) ? element.dom.classList : get$a(element);\n    if (classList.length === 0) {\n      remove$6(element, 'class');\n    }\n  };\n  var remove$3 = function remove$3(element, clazz) {\n    if (supports(element)) {\n      var classList = element.dom.classList;\n      classList.remove(clazz);\n    } else {\n      remove$4(element, clazz);\n    }\n    cleanClass(element);\n  };\n  var has = function has(element, clazz) {\n    return supports(element) && element.dom.classList.contains(clazz);\n  };\n  var swap = function swap(element, addCls, removeCls) {\n    remove$3(element, removeCls);\n    add$1(element, addCls);\n  };\n  var toAlpha = function toAlpha(component, swapConfig, _swapState) {\n    swap(component.element, swapConfig.alpha, swapConfig.omega);\n  };\n  var toOmega = function toOmega(component, swapConfig, _swapState) {\n    swap(component.element, swapConfig.omega, swapConfig.alpha);\n  };\n  var clear$1 = function clear$1(component, swapConfig, _swapState) {\n    remove$3(component.element, swapConfig.alpha);\n    remove$3(component.element, swapConfig.omega);\n  };\n  var isAlpha = function isAlpha(component, swapConfig, _swapState) {\n    return has(component.element, swapConfig.alpha);\n  };\n  var isOmega = function isOmega(component, swapConfig, _swapState) {\n    return has(component.element, swapConfig.omega);\n  };\n  var SwapApis = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    toAlpha: toAlpha,\n    toOmega: toOmega,\n    isAlpha: isAlpha,\n    isOmega: isOmega,\n    clear: clear$1\n  });\n  var value$2 = function value$2(o) {\n    var or = function or(_opt) {\n      return value$2(o);\n    };\n    var orThunk = function orThunk(_f) {\n      return value$2(o);\n    };\n    var map = function map(f) {\n      return value$2(f(o));\n    };\n    var mapError = function mapError(_f) {\n      return value$2(o);\n    };\n    var each = function each(f) {\n      f(o);\n    };\n    var bind = function bind(f) {\n      return f(o);\n    };\n    var fold = function fold(_, onValue) {\n      return onValue(o);\n    };\n    var exists = function exists(f) {\n      return f(o);\n    };\n    var forall = function forall(f) {\n      return f(o);\n    };\n    var toOptional = function toOptional() {\n      return Optional.some(o);\n    };\n    return {\n      isValue: always,\n      isError: never,\n      getOr: constant$1(o),\n      getOrThunk: constant$1(o),\n      getOrDie: constant$1(o),\n      or: or,\n      orThunk: orThunk,\n      fold: fold,\n      map: map,\n      mapError: mapError,\n      each: each,\n      bind: bind,\n      exists: exists,\n      forall: forall,\n      toOptional: toOptional\n    };\n  };\n  var error = function error(message) {\n    var getOrThunk = function getOrThunk(f) {\n      return f();\n    };\n    var getOrDie = function getOrDie() {\n      return die(String(message))();\n    };\n    var or = identity;\n    var orThunk = function orThunk(f) {\n      return f();\n    };\n    var map = function map(_f) {\n      return error(message);\n    };\n    var mapError = function mapError(f) {\n      return error(f(message));\n    };\n    var bind = function bind(_f) {\n      return error(message);\n    };\n    var fold = function fold(onError, _) {\n      return onError(message);\n    };\n    return {\n      isValue: never,\n      isError: always,\n      getOr: identity,\n      getOrThunk: getOrThunk,\n      getOrDie: getOrDie,\n      or: or,\n      orThunk: orThunk,\n      fold: fold,\n      map: map,\n      mapError: mapError,\n      each: noop,\n      bind: bind,\n      exists: never,\n      forall: always,\n      toOptional: Optional.none\n    };\n  };\n  var fromOption = function fromOption(opt, err) {\n    return opt.fold(function () {\n      return error(err);\n    }, value$2);\n  };\n  var Result = {\n    value: value$2,\n    error: error,\n    fromOption: fromOption\n  };\n  var SimpleResultType;\n  (function (SimpleResultType) {\n    SimpleResultType[SimpleResultType['Error'] = 0] = 'Error';\n    SimpleResultType[SimpleResultType['Value'] = 1] = 'Value';\n  })(SimpleResultType || (SimpleResultType = {}));\n  var fold$1 = function fold$1(res, onError, onValue) {\n    return res.stype === SimpleResultType.Error ? onError(res.serror) : onValue(res.svalue);\n  };\n  var partition$1 = function partition$1(results) {\n    var values = [];\n    var errors = [];\n    each$1(results, function (obj) {\n      fold$1(obj, function (err) {\n        return errors.push(err);\n      }, function (val) {\n        return values.push(val);\n      });\n    });\n    return {\n      values: values,\n      errors: errors\n    };\n  };\n  var mapError = function mapError(res, f) {\n    if (res.stype === SimpleResultType.Error) {\n      return {\n        stype: SimpleResultType.Error,\n        serror: f(res.serror)\n      };\n    } else {\n      return res;\n    }\n  };\n  var map = function map(res, f) {\n    if (res.stype === SimpleResultType.Value) {\n      return {\n        stype: SimpleResultType.Value,\n        svalue: f(res.svalue)\n      };\n    } else {\n      return res;\n    }\n  };\n  var bind$2 = function bind$2(res, f) {\n    if (res.stype === SimpleResultType.Value) {\n      return f(res.svalue);\n    } else {\n      return res;\n    }\n  };\n  var bindError = function bindError(res, f) {\n    if (res.stype === SimpleResultType.Error) {\n      return f(res.serror);\n    } else {\n      return res;\n    }\n  };\n  var svalue = function svalue(v) {\n    return {\n      stype: SimpleResultType.Value,\n      svalue: v\n    };\n  };\n  var serror = function serror(e) {\n    return {\n      stype: SimpleResultType.Error,\n      serror: e\n    };\n  };\n  var toResult$1 = function toResult$1(res) {\n    return fold$1(res, Result.error, Result.value);\n  };\n  var fromResult = function fromResult(res) {\n    return res.fold(serror, svalue);\n  };\n  var SimpleResult = {\n    fromResult: fromResult,\n    toResult: toResult$1,\n    svalue: svalue,\n    partition: partition$1,\n    serror: serror,\n    bind: bind$2,\n    bindError: bindError,\n    map: map,\n    mapError: mapError,\n    fold: fold$1\n  };\n  var field$3 = function field$3(key, newKey, presence, prop) {\n    return {\n      tag: 'field',\n      key: key,\n      newKey: newKey,\n      presence: presence,\n      prop: prop\n    };\n  };\n  var customField$1 = function customField$1(newKey, instantiator) {\n    return {\n      tag: 'custom',\n      newKey: newKey,\n      instantiator: instantiator\n    };\n  };\n  var fold = function fold(value, ifField, ifCustom) {\n    switch (value.tag) {\n      case 'field':\n        return ifField(value.key, value.newKey, value.presence, value.prop);\n      case 'custom':\n        return ifCustom(value.newKey, value.instantiator);\n    }\n  };\n  var shallow$1 = function shallow$1(old, nu) {\n    return nu;\n  };\n  var deep = function deep(old, nu) {\n    var bothObjects = isObject(old) && isObject(nu);\n    return bothObjects ? deepMerge(old, nu) : nu;\n  };\n  var baseMerge = function baseMerge(merger) {\n    return function () {\n      var objects = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        objects[_i] = arguments[_i];\n      }\n      if (objects.length === 0) {\n        throw new Error('Can\\'t merge zero objects');\n      }\n      var ret = {};\n      for (var j = 0; j < objects.length; j++) {\n        var curObject = objects[j];\n        for (var key in curObject) {\n          if (has$2(curObject, key)) {\n            ret[key] = merger(ret[key], curObject[key]);\n          }\n        }\n      }\n      return ret;\n    };\n  };\n  var deepMerge = baseMerge(deep);\n  var merge$1 = baseMerge(shallow$1);\n  var required$2 = function required$2() {\n    return {\n      tag: 'required',\n      process: {}\n    };\n  };\n  var defaultedThunk = function defaultedThunk(fallbackThunk) {\n    return {\n      tag: 'defaultedThunk',\n      process: fallbackThunk\n    };\n  };\n  var defaulted$1 = function defaulted$1(fallback) {\n    return defaultedThunk(constant$1(fallback));\n  };\n  var asOption = function asOption() {\n    return {\n      tag: 'option',\n      process: {}\n    };\n  };\n  var mergeWithThunk = function mergeWithThunk(baseThunk) {\n    return {\n      tag: 'mergeWithThunk',\n      process: baseThunk\n    };\n  };\n  var mergeWith = function mergeWith(base) {\n    return mergeWithThunk(constant$1(base));\n  };\n  var mergeValues$1 = function mergeValues$1(values, base) {\n    return values.length > 0 ? SimpleResult.svalue(deepMerge(base, merge$1.apply(undefined, values))) : SimpleResult.svalue(base);\n  };\n  var mergeErrors$1 = function mergeErrors$1(errors) {\n    return compose(SimpleResult.serror, flatten)(errors);\n  };\n  var consolidateObj = function consolidateObj(objects, base) {\n    var partition = SimpleResult.partition(objects);\n    return partition.errors.length > 0 ? mergeErrors$1(partition.errors) : mergeValues$1(partition.values, base);\n  };\n  var consolidateArr = function consolidateArr(objects) {\n    var partitions = SimpleResult.partition(objects);\n    return partitions.errors.length > 0 ? mergeErrors$1(partitions.errors) : SimpleResult.svalue(partitions.values);\n  };\n  var ResultCombine = {\n    consolidateObj: consolidateObj,\n    consolidateArr: consolidateArr\n  };\n  var formatObj = function formatObj(input) {\n    return isObject(input) && keys(input).length > 100 ? ' removed due to size' : JSON.stringify(input, null, 2);\n  };\n  var formatErrors = function formatErrors(errors) {\n    var es = errors.length > 10 ? errors.slice(0, 10).concat([{\n      path: [],\n      getErrorInfo: constant$1('... (only showing first ten failures)')\n    }]) : errors;\n    return map$2(es, function (e) {\n      return 'Failed path: (' + e.path.join(' > ') + ')\\n' + e.getErrorInfo();\n    });\n  };\n  var nu$5 = function nu$5(path, getErrorInfo) {\n    return SimpleResult.serror([{\n      path: path,\n      getErrorInfo: getErrorInfo\n    }]);\n  };\n  var missingRequired = function missingRequired(path, key, obj) {\n    return nu$5(path, function () {\n      return 'Could not find valid *required* value for \"' + key + '\" in ' + formatObj(obj);\n    });\n  };\n  var missingKey = function missingKey(path, key) {\n    return nu$5(path, function () {\n      return 'Choice schema did not contain choice key: \"' + key + '\"';\n    });\n  };\n  var missingBranch = function missingBranch(path, branches, branch) {\n    return nu$5(path, function () {\n      return 'The chosen schema: \"' + branch + '\" did not exist in branches: ' + formatObj(branches);\n    });\n  };\n  var unsupportedFields = function unsupportedFields(path, unsupported) {\n    return nu$5(path, function () {\n      return 'There are unsupported fields: [' + unsupported.join(', ') + '] specified';\n    });\n  };\n  var custom = function custom(path, err) {\n    return nu$5(path, constant$1(err));\n  };\n  var value$1 = function value$1(validator) {\n    var extract = function extract(path, val) {\n      return SimpleResult.bindError(validator(val), function (err) {\n        return custom(path, err);\n      });\n    };\n    var toString = constant$1('val');\n    return {\n      extract: extract,\n      toString: toString\n    };\n  };\n  var anyValue$1 = value$1(SimpleResult.svalue);\n  var requiredAccess = function requiredAccess(path, obj, key, bundle) {\n    return get$c(obj, key).fold(function () {\n      return missingRequired(path, key, obj);\n    }, bundle);\n  };\n  var fallbackAccess = function fallbackAccess(obj, key, fallback, bundle) {\n    var v = get$c(obj, key).getOrThunk(function () {\n      return fallback(obj);\n    });\n    return bundle(v);\n  };\n  var optionAccess = function optionAccess(obj, key, bundle) {\n    return bundle(get$c(obj, key));\n  };\n  var optionDefaultedAccess = function optionDefaultedAccess(obj, key, fallback, bundle) {\n    var opt = get$c(obj, key).map(function (val) {\n      return val === true ? fallback(obj) : val;\n    });\n    return bundle(opt);\n  };\n  var extractField = function extractField(field, path, obj, key, prop) {\n    var bundle = function bundle(av) {\n      return prop.extract(path.concat([key]), av);\n    };\n    var bundleAsOption = function bundleAsOption(optValue) {\n      return optValue.fold(function () {\n        return SimpleResult.svalue(Optional.none());\n      }, function (ov) {\n        var result = prop.extract(path.concat([key]), ov);\n        return SimpleResult.map(result, Optional.some);\n      });\n    };\n    switch (field.tag) {\n      case 'required':\n        return requiredAccess(path, obj, key, bundle);\n      case 'defaultedThunk':\n        return fallbackAccess(obj, key, field.process, bundle);\n      case 'option':\n        return optionAccess(obj, key, bundleAsOption);\n      case 'defaultedOptionThunk':\n        return optionDefaultedAccess(obj, key, field.process, bundleAsOption);\n      case 'mergeWithThunk':\n        {\n          return fallbackAccess(obj, key, constant$1({}), function (v) {\n            var result = deepMerge(field.process(obj), v);\n            return bundle(result);\n          });\n        }\n    }\n  };\n  var extractFields = function extractFields(path, obj, fields) {\n    var success = {};\n    var errors = [];\n    for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {\n      var field = fields_1[_i];\n      fold(field, function (key, newKey, presence, prop) {\n        var result = extractField(presence, path, obj, key, prop);\n        SimpleResult.fold(result, function (err) {\n          errors.push.apply(errors, err);\n        }, function (res) {\n          success[newKey] = res;\n        });\n      }, function (newKey, instantiator) {\n        success[newKey] = instantiator(obj);\n      });\n    }\n    return errors.length > 0 ? SimpleResult.serror(errors) : SimpleResult.svalue(success);\n  };\n  var getSetKeys = function getSetKeys(obj) {\n    return keys(filter$1(obj, isNonNullable));\n  };\n  var objOfOnly = function objOfOnly(fields) {\n    var delegate = objOf(fields);\n    var fieldNames = foldr(fields, function (acc, value) {\n      return fold(value, function (key) {\n        var _a;\n        return deepMerge(acc, (_a = {}, _a[key] = true, _a));\n      }, constant$1(acc));\n    }, {});\n    var extract = function extract(path, o) {\n      var keys = isBoolean(o) ? [] : getSetKeys(o);\n      var extra = filter$2(keys, function (k) {\n        return !hasNonNullableKey(fieldNames, k);\n      });\n      return extra.length === 0 ? delegate.extract(path, o) : unsupportedFields(path, extra);\n    };\n    return {\n      extract: extract,\n      toString: delegate.toString\n    };\n  };\n  var objOf = function objOf(values) {\n    var extract = function extract(path, o) {\n      return extractFields(path, o, values);\n    };\n    var toString = function toString() {\n      var fieldStrings = map$2(values, function (value) {\n        return fold(value, function (key, _okey, _presence, prop) {\n          return key + ' -> ' + prop.toString();\n        }, function (newKey, _instantiator) {\n          return 'state(' + newKey + ')';\n        });\n      });\n      return 'obj{\\n' + fieldStrings.join('\\n') + '}';\n    };\n    return {\n      extract: extract,\n      toString: toString\n    };\n  };\n  var arrOf = function arrOf(prop) {\n    var extract = function extract(path, array) {\n      var results = map$2(array, function (a, i) {\n        return prop.extract(path.concat(['[' + i + ']']), a);\n      });\n      return ResultCombine.consolidateArr(results);\n    };\n    var toString = function toString() {\n      return 'array(' + prop.toString() + ')';\n    };\n    return {\n      extract: extract,\n      toString: toString\n    };\n  };\n  var setOf$1 = function setOf$1(validator, prop) {\n    var validateKeys = function validateKeys(path, keys) {\n      return arrOf(value$1(validator)).extract(path, keys);\n    };\n    var extract = function extract(path, o) {\n      var keys$1 = keys(o);\n      var validatedKeys = validateKeys(path, keys$1);\n      return SimpleResult.bind(validatedKeys, function (validKeys) {\n        var schema = map$2(validKeys, function (vk) {\n          return field$3(vk, vk, required$2(), prop);\n        });\n        return objOf(schema).extract(path, o);\n      });\n    };\n    var toString = function toString() {\n      return 'setOf(' + prop.toString() + ')';\n    };\n    return {\n      extract: extract,\n      toString: toString\n    };\n  };\n  var anyValue = constant$1(anyValue$1);\n  var typedValue = function typedValue(validator, expectedType) {\n    return value$1(function (a) {\n      var actualType = _typeof(a);\n      return validator(a) ? SimpleResult.svalue(a) : SimpleResult.serror('Expected type: ' + expectedType + ' but got: ' + actualType);\n    });\n  };\n  var functionProcessor = typedValue(isFunction, 'function');\n  var chooseFrom = function chooseFrom(path, input, branches, ch) {\n    var fields = get$c(branches, ch);\n    return fields.fold(function () {\n      return missingBranch(path, branches, ch);\n    }, function (vp) {\n      return vp.extract(path.concat(['branch: ' + ch]), input);\n    });\n  };\n  var choose$2 = function choose$2(key, branches) {\n    var extract = function extract(path, input) {\n      var choice = get$c(input, key);\n      return choice.fold(function () {\n        return missingKey(path, key);\n      }, function (chosen) {\n        return chooseFrom(path, input, branches, chosen);\n      });\n    };\n    var toString = function toString() {\n      return 'chooseOn(' + key + '). Possible values: ' + keys(branches);\n    };\n    return {\n      extract: extract,\n      toString: toString\n    };\n  };\n  var valueOf = function valueOf(validator) {\n    return value$1(function (v) {\n      return validator(v).fold(SimpleResult.serror, SimpleResult.svalue);\n    });\n  };\n  var setOf = function setOf(validator, prop) {\n    return setOf$1(function (v) {\n      return SimpleResult.fromResult(validator(v));\n    }, prop);\n  };\n  var extractValue = function extractValue(label, prop, obj) {\n    var res = prop.extract([label], obj);\n    return SimpleResult.mapError(res, function (errs) {\n      return {\n        input: obj,\n        errors: errs\n      };\n    });\n  };\n  var asRaw = function asRaw(label, prop, obj) {\n    return SimpleResult.toResult(extractValue(label, prop, obj));\n  };\n  var getOrDie = function getOrDie(extraction) {\n    return extraction.fold(function (errInfo) {\n      throw new Error(formatError(errInfo));\n    }, identity);\n  };\n  var asRawOrDie$1 = function asRawOrDie$1(label, prop, obj) {\n    return getOrDie(asRaw(label, prop, obj));\n  };\n  var formatError = function formatError(errInfo) {\n    return 'Errors: \\n' + formatErrors(errInfo.errors).join('\\n') + '\\n\\nInput object: ' + formatObj(errInfo.input);\n  };\n  var choose$1 = function choose$1(key, branches) {\n    return choose$2(key, map$1(branches, objOf));\n  };\n  var field$2 = field$3;\n  var customField = customField$1;\n  var required$1 = function required$1(key) {\n    return field$2(key, key, required$2(), anyValue());\n  };\n  var requiredOf = function requiredOf(key, schema) {\n    return field$2(key, key, required$2(), schema);\n  };\n  var forbid = function forbid(key, message) {\n    return field$2(key, key, asOption(), value$1(function (_v) {\n      return SimpleResult.serror('The field: ' + key + ' is forbidden. ' + message);\n    }));\n  };\n  var requiredObjOf = function requiredObjOf(key, objSchema) {\n    return field$2(key, key, required$2(), objOf(objSchema));\n  };\n  var option = function option(key) {\n    return field$2(key, key, asOption(), anyValue());\n  };\n  var optionOf = function optionOf(key, schema) {\n    return field$2(key, key, asOption(), schema);\n  };\n  var optionObjOf = function optionObjOf(key, objSchema) {\n    return optionOf(key, objOf(objSchema));\n  };\n  var optionObjOfOnly = function optionObjOfOnly(key, objSchema) {\n    return optionOf(key, objOfOnly(objSchema));\n  };\n  var defaulted = function defaulted(key, fallback) {\n    return field$2(key, key, defaulted$1(fallback), anyValue());\n  };\n  var defaultedOf = function defaultedOf(key, fallback, schema) {\n    return field$2(key, key, defaulted$1(fallback), schema);\n  };\n  var defaultedFunction = function defaultedFunction(key, fallback) {\n    return defaultedOf(key, fallback, functionProcessor);\n  };\n  var defaultedObjOf = function defaultedObjOf(key, fallback, objSchema) {\n    return defaultedOf(key, fallback, objOf(objSchema));\n  };\n  var SwapSchema = [required$1('alpha'), required$1('omega')];\n  var generate$5 = function generate$5(cases) {\n    if (!isArray(cases)) {\n      throw new Error('cases must be an array');\n    }\n    if (cases.length === 0) {\n      throw new Error('there must be at least one case');\n    }\n    var constructors = [];\n    var adt = {};\n    each$1(cases, function (acase, count) {\n      var keys$1 = keys(acase);\n      if (keys$1.length !== 1) {\n        throw new Error('one and only one name per case');\n      }\n      var key = keys$1[0];\n      var value = acase[key];\n      if (adt[key] !== undefined) {\n        throw new Error('duplicate key detected:' + key);\n      } else if (key === 'cata') {\n        throw new Error('cannot have a case named cata (sorry)');\n      } else if (!isArray(value)) {\n        throw new Error('case arguments must be an array');\n      }\n      constructors.push(key);\n      adt[key] = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var argLength = args.length;\n        if (argLength !== value.length) {\n          throw new Error('Wrong number of arguments to case ' + key + '. Expected ' + value.length + ' (' + value + '), got ' + argLength);\n        }\n        var match = function match(branches) {\n          var branchKeys = keys(branches);\n          if (constructors.length !== branchKeys.length) {\n            throw new Error('Wrong number of arguments to match. Expected: ' + constructors.join(',') + '\\nActual: ' + branchKeys.join(','));\n          }\n          var allReqd = forall(constructors, function (reqKey) {\n            return contains$1(branchKeys, reqKey);\n          });\n          if (!allReqd) {\n            throw new Error('Not all branches were specified when using match. Specified: ' + branchKeys.join(', ') + '\\nRequired: ' + constructors.join(', '));\n          }\n          return branches[key].apply(null, args);\n        };\n        return {\n          fold: function fold() {\n            var foldArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              foldArgs[_i] = arguments[_i];\n            }\n            if (foldArgs.length !== cases.length) {\n              throw new Error('Wrong number of arguments to fold. Expected ' + cases.length + ', got ' + foldArgs.length);\n            }\n            var target = foldArgs[count];\n            return target.apply(null, args);\n          },\n          match: match,\n          log: function log(label) {\n            console.log(label, {\n              constructors: constructors,\n              constructor: key,\n              params: args\n            });\n          }\n        };\n      };\n    });\n    return adt;\n  };\n  var Adt = {\n    generate: generate$5\n  };\n  Adt.generate([{\n    bothErrors: ['error1', 'error2']\n  }, {\n    firstError: ['error1', 'value2']\n  }, {\n    secondError: ['value1', 'error2']\n  }, {\n    bothValues: ['value1', 'value2']\n  }]);\n  var partition = function partition(results) {\n    var errors = [];\n    var values = [];\n    each$1(results, function (result) {\n      result.fold(function (err) {\n        errors.push(err);\n      }, function (value) {\n        values.push(value);\n      });\n    });\n    return {\n      errors: errors,\n      values: values\n    };\n  };\n  var exclude$1 = function exclude$1(obj, fields) {\n    var r = {};\n    each(obj, function (v, k) {\n      if (!contains$1(fields, k)) {\n        r[k] = v;\n      }\n    });\n    return r;\n  };\n  var wrap$1 = function wrap$1(key, value) {\n    var _a;\n    return _a = {}, _a[key] = value, _a;\n  };\n  var wrapAll$1 = function wrapAll$1(keyvalues) {\n    var r = {};\n    each$1(keyvalues, function (kv) {\n      r[kv.key] = kv.value;\n    });\n    return r;\n  };\n  var exclude = function exclude(obj, fields) {\n    return exclude$1(obj, fields);\n  };\n  var wrap = function wrap(key, value) {\n    return wrap$1(key, value);\n  };\n  var wrapAll = function wrapAll(keyvalues) {\n    return wrapAll$1(keyvalues);\n  };\n  var mergeValues = function mergeValues(values, base) {\n    return values.length === 0 ? Result.value(base) : Result.value(deepMerge(base, merge$1.apply(undefined, values)));\n  };\n  var mergeErrors = function mergeErrors(errors) {\n    return Result.error(flatten(errors));\n  };\n  var consolidate = function consolidate(objs, base) {\n    var partitions = partition(objs);\n    return partitions.errors.length > 0 ? mergeErrors(partitions.errors) : mergeValues(partitions.values, base);\n  };\n  var is = function is(lhs, rhs, comparator) {\n    if (comparator === void 0) {\n      comparator = tripleEquals;\n    }\n    return lhs.exists(function (left) {\n      return comparator(left, rhs);\n    });\n  };\n  var cat = function cat(arr) {\n    var r = [];\n    var push = function push(x) {\n      r.push(x);\n    };\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].each(push);\n    }\n    return r;\n  };\n  var sequence = function sequence(arr) {\n    var r = [];\n    for (var i = 0; i < arr.length; i++) {\n      var x = arr[i];\n      if (x.isSome()) {\n        r.push(x.getOrDie());\n      } else {\n        return Optional.none();\n      }\n    }\n    return Optional.some(r);\n  };\n  var lift2 = function lift2(oa, ob, f) {\n    return oa.isSome() && ob.isSome() ? Optional.some(f(oa.getOrDie(), ob.getOrDie())) : Optional.none();\n  };\n  var someIf = function someIf(b, a) {\n    return b ? Optional.some(a) : Optional.none();\n  };\n  var ensureIsRoot = function ensureIsRoot(isRoot) {\n    return isFunction(isRoot) ? isRoot : never;\n  };\n  var ancestor$2 = function ancestor$2(scope, transform, isRoot) {\n    var element = scope.dom;\n    var stop = ensureIsRoot(isRoot);\n    while (element.parentNode) {\n      element = element.parentNode;\n      var el = SugarElement.fromDom(element);\n      var transformed = transform(el);\n      if (transformed.isSome()) {\n        return transformed;\n      } else if (stop(el)) {\n        break;\n      }\n    }\n    return Optional.none();\n  };\n  var closest$3 = function closest$3(scope, transform, isRoot) {\n    var current = transform(scope);\n    var stop = ensureIsRoot(isRoot);\n    return current.orThunk(function () {\n      return stop(scope) ? Optional.none() : ancestor$2(scope, transform, stop);\n    });\n  };\n  var isSource = function isSource(component, simulatedEvent) {\n    return eq(component.element, simulatedEvent.event.target);\n  };\n  var defaultEventHandler = {\n    can: always,\n    abort: never,\n    run: noop\n  };\n  var nu$4 = function nu$4(parts) {\n    if (!hasNonNullableKey(parts, 'can') && !hasNonNullableKey(parts, 'abort') && !hasNonNullableKey(parts, 'run')) {\n      throw new Error('EventHandler defined by: ' + JSON.stringify(parts, null, 2) + ' does not have can, abort, or run!');\n    }\n    return _assign(_assign({}, defaultEventHandler), parts);\n  };\n  var all$1 = function all$1(handlers, f) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return foldl(handlers, function (acc, handler) {\n        return acc && f(handler).apply(undefined, args);\n      }, true);\n    };\n  };\n  var any = function any(handlers, f) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return foldl(handlers, function (acc, handler) {\n        return acc || f(handler).apply(undefined, args);\n      }, false);\n    };\n  };\n  var read$1 = function read$1(handler) {\n    return isFunction(handler) ? {\n      can: always,\n      abort: never,\n      run: handler\n    } : handler;\n  };\n  var fuse$1 = function fuse$1(handlers) {\n    var can = all$1(handlers, function (handler) {\n      return handler.can;\n    });\n    var abort = any(handlers, function (handler) {\n      return handler.abort;\n    });\n    var run = function run() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      each$1(handlers, function (handler) {\n        handler.run.apply(undefined, args);\n      });\n    };\n    return {\n      can: can,\n      abort: abort,\n      run: run\n    };\n  };\n  var derive$3 = function derive$3(configs) {\n    return wrapAll(configs);\n  };\n  var abort = function abort(name, predicate) {\n    return {\n      key: name,\n      value: nu$4({\n        abort: predicate\n      })\n    };\n  };\n  var can = function can(name, predicate) {\n    return {\n      key: name,\n      value: nu$4({\n        can: predicate\n      })\n    };\n  };\n  var run = function run(name, handler) {\n    return {\n      key: name,\n      value: nu$4({\n        run: handler\n      })\n    };\n  };\n  var runActionExtra = function runActionExtra(name, action, extra) {\n    return {\n      key: name,\n      value: nu$4({\n        run: function run(component, simulatedEvent) {\n          action.apply(undefined, [component, simulatedEvent].concat(extra));\n        }\n      })\n    };\n  };\n  var runOnName = function runOnName(name) {\n    return function (handler) {\n      return run(name, handler);\n    };\n  };\n  var runOnSourceName = function runOnSourceName(name) {\n    return function (handler) {\n      return {\n        key: name,\n        value: nu$4({\n          run: function run(component, simulatedEvent) {\n            if (isSource(component, simulatedEvent)) {\n              handler(component, simulatedEvent);\n            }\n          }\n        })\n      };\n    };\n  };\n  var redirectToUid = function redirectToUid(name, uid) {\n    return run(name, function (component, simulatedEvent) {\n      component.getSystem().getByUid(uid).each(function (redirectee) {\n        dispatchEvent(redirectee, redirectee.element, name, simulatedEvent);\n      });\n    });\n  };\n  var redirectToPart = function redirectToPart(name, detail, partName) {\n    var uid = detail.partUids[partName];\n    return redirectToUid(name, uid);\n  };\n  var cutter = function cutter(name) {\n    return run(name, function (component, simulatedEvent) {\n      simulatedEvent.cut();\n    });\n  };\n  var stopper = function stopper(name) {\n    return run(name, function (component, simulatedEvent) {\n      simulatedEvent.stop();\n    });\n  };\n  var runOnSource = function runOnSource(name, f) {\n    return runOnSourceName(name)(f);\n  };\n  var runOnAttached = runOnSourceName(attachedToDom());\n  var runOnDetached = runOnSourceName(detachedFromDom());\n  var runOnInit = runOnSourceName(systemInit());\n  var runOnExecute = runOnName(execute$5());\n  var markAsBehaviourApi = function markAsBehaviourApi(f, apiName, apiFunction) {\n    var delegate = apiFunction.toString();\n    var endIndex = delegate.indexOf(')') + 1;\n    var openBracketIndex = delegate.indexOf('(');\n    var parameters = delegate.substring(openBracketIndex + 1, endIndex - 1).split(/,\\s*/);\n    f.toFunctionAnnotation = function () {\n      return {\n        name: apiName,\n        parameters: cleanParameters(parameters.slice(0, 1).concat(parameters.slice(3)))\n      };\n    };\n    return f;\n  };\n  var cleanParameters = function cleanParameters(parameters) {\n    return map$2(parameters, function (p) {\n      return endsWith(p, '/*') ? p.substring(0, p.length - '/*'.length) : p;\n    });\n  };\n  var markAsExtraApi = function markAsExtraApi(f, extraName) {\n    var delegate = f.toString();\n    var endIndex = delegate.indexOf(')') + 1;\n    var openBracketIndex = delegate.indexOf('(');\n    var parameters = delegate.substring(openBracketIndex + 1, endIndex - 1).split(/,\\s*/);\n    f.toFunctionAnnotation = function () {\n      return {\n        name: extraName,\n        parameters: cleanParameters(parameters)\n      };\n    };\n    return f;\n  };\n  var markAsSketchApi = function markAsSketchApi(f, apiFunction) {\n    var delegate = apiFunction.toString();\n    var endIndex = delegate.indexOf(')') + 1;\n    var openBracketIndex = delegate.indexOf('(');\n    var parameters = delegate.substring(openBracketIndex + 1, endIndex - 1).split(/,\\s*/);\n    f.toFunctionAnnotation = function () {\n      return {\n        name: 'OVERRIDE',\n        parameters: cleanParameters(parameters.slice(1))\n      };\n    };\n    return f;\n  };\n  var nu$3 = function nu$3(s) {\n    return {\n      classes: isUndefined(s.classes) ? [] : s.classes,\n      attributes: isUndefined(s.attributes) ? {} : s.attributes,\n      styles: isUndefined(s.styles) ? {} : s.styles\n    };\n  };\n  var merge = function merge(defnA, mod) {\n    return _assign(_assign({}, defnA), {\n      attributes: _assign(_assign({}, defnA.attributes), mod.attributes),\n      styles: _assign(_assign({}, defnA.styles), mod.styles),\n      classes: defnA.classes.concat(mod.classes)\n    });\n  };\n  var executeEvent = function executeEvent(bConfig, bState, executor) {\n    return runOnExecute(function (component) {\n      executor(component, bConfig, bState);\n    });\n  };\n  var loadEvent = function loadEvent(bConfig, bState, f) {\n    return runOnInit(function (component, _simulatedEvent) {\n      f(component, bConfig, bState);\n    });\n  };\n  var create$6 = function create$6(schema, name, active, apis, extra, state) {\n    var configSchema = objOfOnly(schema);\n    var schemaSchema = optionObjOf(name, [optionObjOfOnly('config', schema)]);\n    return doCreate(configSchema, schemaSchema, name, active, apis, extra, state);\n  };\n  var createModes$1 = function createModes$1(modes, name, active, apis, extra, state) {\n    var configSchema = modes;\n    var schemaSchema = optionObjOf(name, [optionOf('config', modes)]);\n    return doCreate(configSchema, schemaSchema, name, active, apis, extra, state);\n  };\n  var wrapApi = function wrapApi(bName, apiFunction, apiName) {\n    var f = function f(component) {\n      var rest = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n        rest[_i - 1] = arguments[_i];\n      }\n      var args = [component].concat(rest);\n      return component.config({\n        name: constant$1(bName)\n      }).fold(function () {\n        throw new Error('We could not find any behaviour configuration for: ' + bName + '. Using API: ' + apiName);\n      }, function (info) {\n        var rest = Array.prototype.slice.call(args, 1);\n        return apiFunction.apply(undefined, [component, info.config, info.state].concat(rest));\n      });\n    };\n    return markAsBehaviourApi(f, apiName, apiFunction);\n  };\n  var revokeBehaviour = function revokeBehaviour(name) {\n    return {\n      key: name,\n      value: undefined\n    };\n  };\n  var doCreate = function doCreate(configSchema, schemaSchema, name, active, apis, extra, state) {\n    var getConfig = function getConfig(info) {\n      return hasNonNullableKey(info, name) ? info[name]() : Optional.none();\n    };\n    var wrappedApis = map$1(apis, function (apiF, apiName) {\n      return wrapApi(name, apiF, apiName);\n    });\n    var wrappedExtra = map$1(extra, function (extraF, extraName) {\n      return markAsExtraApi(extraF, extraName);\n    });\n    var me = _assign(_assign(_assign({}, wrappedExtra), wrappedApis), {\n      revoke: curry(revokeBehaviour, name),\n      config: function config(spec) {\n        var prepared = asRawOrDie$1(name + '-config', configSchema, spec);\n        return {\n          key: name,\n          value: {\n            config: prepared,\n            me: me,\n            configAsRaw: cached(function () {\n              return asRawOrDie$1(name + '-config', configSchema, spec);\n            }),\n            initialConfig: spec,\n            state: state\n          }\n        };\n      },\n      schema: constant$1(schemaSchema),\n      exhibit: function exhibit(info, base) {\n        return lift2(getConfig(info), get$c(active, 'exhibit'), function (behaviourInfo, exhibitor) {\n          return exhibitor(base, behaviourInfo.config, behaviourInfo.state);\n        }).getOrThunk(function () {\n          return nu$3({});\n        });\n      },\n      name: constant$1(name),\n      handlers: function handlers(info) {\n        return getConfig(info).map(function (behaviourInfo) {\n          var getEvents = get$c(active, 'events').getOr(function () {\n            return {};\n          });\n          return getEvents(behaviourInfo.config, behaviourInfo.state);\n        }).getOr({});\n      }\n    });\n    return me;\n  };\n  var NoState = {\n    init: function init() {\n      return nu$2({\n        readState: constant$1('No State required')\n      });\n    }\n  };\n  var nu$2 = function nu$2(spec) {\n    return spec;\n  };\n  var derive$2 = function derive$2(capabilities) {\n    return wrapAll(capabilities);\n  };\n  var simpleSchema = objOfOnly([required$1('fields'), required$1('name'), defaulted('active', {}), defaulted('apis', {}), defaulted('state', NoState), defaulted('extra', {})]);\n  var create$5 = function create$5(data) {\n    var value = asRawOrDie$1('Creating behaviour: ' + data.name, simpleSchema, data);\n    return create$6(value.fields, value.name, value.active, value.apis, value.extra, value.state);\n  };\n  var modeSchema = objOfOnly([required$1('branchKey'), required$1('branches'), required$1('name'), defaulted('active', {}), defaulted('apis', {}), defaulted('state', NoState), defaulted('extra', {})]);\n  var createModes = function createModes(data) {\n    var value = asRawOrDie$1('Creating behaviour: ' + data.name, modeSchema, data);\n    return createModes$1(choose$1(value.branchKey, value.branches), value.name, value.active, value.apis, value.extra, value.state);\n  };\n  var revoke = constant$1(undefined);\n  var Swapping = create$5({\n    fields: SwapSchema,\n    name: 'swapping',\n    apis: SwapApis\n  });\n  var Cell = function Cell(initial) {\n    var value = initial;\n    var get = function get() {\n      return value;\n    };\n    var set = function set(v) {\n      value = v;\n    };\n    return {\n      get: get,\n      set: set\n    };\n  };\n  var getDocument = function getDocument() {\n    return SugarElement.fromDom(document);\n  };\n  var focus$3 = function focus$3(element) {\n    return element.dom.focus();\n  };\n  var blur$1 = function blur$1(element) {\n    return element.dom.blur();\n  };\n  var hasFocus = function hasFocus(element) {\n    var root = getRootNode(element).dom;\n    return element.dom === root.activeElement;\n  };\n  var active = function active(root) {\n    if (root === void 0) {\n      root = getDocument();\n    }\n    return Optional.from(root.dom.activeElement).map(SugarElement.fromDom);\n  };\n  var search = function search(element) {\n    return active(getRootNode(element)).filter(function (e) {\n      return element.dom.contains(e.dom);\n    });\n  };\n  var global$5 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n  var global$4 = tinymce.util.Tools.resolve('tinymce.ThemeManager');\n  var openLink = function openLink(target) {\n    var link = document.createElement('a');\n    link.target = '_blank';\n    link.href = target.href;\n    link.rel = 'noreferrer noopener';\n    var nuEvt = document.createEvent('MouseEvents');\n    nuEvt.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n    document.body.appendChild(link);\n    link.dispatchEvent(nuEvt);\n    document.body.removeChild(link);\n  };\n  var DefaultStyleFormats = [{\n    title: 'Headings',\n    items: [{\n      title: 'Heading 1',\n      format: 'h1'\n    }, {\n      title: 'Heading 2',\n      format: 'h2'\n    }, {\n      title: 'Heading 3',\n      format: 'h3'\n    }, {\n      title: 'Heading 4',\n      format: 'h4'\n    }, {\n      title: 'Heading 5',\n      format: 'h5'\n    }, {\n      title: 'Heading 6',\n      format: 'h6'\n    }]\n  }, {\n    title: 'Inline',\n    items: [{\n      title: 'Bold',\n      icon: 'bold',\n      format: 'bold'\n    }, {\n      title: 'Italic',\n      icon: 'italic',\n      format: 'italic'\n    }, {\n      title: 'Underline',\n      icon: 'underline',\n      format: 'underline'\n    }, {\n      title: 'Strikethrough',\n      icon: 'strikethrough',\n      format: 'strikethrough'\n    }, {\n      title: 'Superscript',\n      icon: 'superscript',\n      format: 'superscript'\n    }, {\n      title: 'Subscript',\n      icon: 'subscript',\n      format: 'subscript'\n    }, {\n      title: 'Code',\n      icon: 'code',\n      format: 'code'\n    }]\n  }, {\n    title: 'Blocks',\n    items: [{\n      title: 'Paragraph',\n      format: 'p'\n    }, {\n      title: 'Blockquote',\n      format: 'blockquote'\n    }, {\n      title: 'Div',\n      format: 'div'\n    }, {\n      title: 'Pre',\n      format: 'pre'\n    }]\n  }, {\n    title: 'Alignment',\n    items: [{\n      title: 'Left',\n      icon: 'alignleft',\n      format: 'alignleft'\n    }, {\n      title: 'Center',\n      icon: 'aligncenter',\n      format: 'aligncenter'\n    }, {\n      title: 'Right',\n      icon: 'alignright',\n      format: 'alignright'\n    }, {\n      title: 'Justify',\n      icon: 'alignjustify',\n      format: 'alignjustify'\n    }]\n  }];\n  var defaults = ['undo', 'bold', 'italic', 'link', 'image', 'bullist', 'styleselect'];\n  var isSkinDisabled = function isSkinDisabled(editor) {\n    return editor.getParam('skin') === false;\n  };\n  var _readOnlyOnInit = function readOnlyOnInit(_editor) {\n    return false;\n  };\n  var getToolbar = function getToolbar(editor) {\n    return editor.getParam('toolbar', defaults, 'array');\n  };\n  var getStyleFormats = function getStyleFormats(editor) {\n    return editor.getParam('style_formats', DefaultStyleFormats, 'array');\n  };\n  var getSkinUrl = function getSkinUrl(editor) {\n    return editor.getParam('skin_url');\n  };\n  var formatChanged = 'formatChanged';\n  var orientationChanged = 'orientationChanged';\n  var dropupDismissed = 'dropupDismissed';\n  var fromHtml$1 = function fromHtml$1(html, scope) {\n    var doc = scope || document;\n    var div = doc.createElement('div');\n    div.innerHTML = html;\n    return children(SugarElement.fromDom(div));\n  };\n  var get$9 = function get$9(element) {\n    return element.dom.innerHTML;\n  };\n  var set$7 = function set$7(element, content) {\n    var owner = owner$2(element);\n    var docDom = owner.dom;\n    var fragment = SugarElement.fromDom(docDom.createDocumentFragment());\n    var contentElements = fromHtml$1(content, docDom);\n    append$1(fragment, contentElements);\n    empty(element);\n    append$2(element, fragment);\n  };\n  var getOuter = function getOuter(element) {\n    var container = SugarElement.fromTag('div');\n    var clone = SugarElement.fromDom(element.dom.cloneNode(true));\n    append$2(container, clone);\n    return get$9(container);\n  };\n  var clone = function clone(original, isDeep) {\n    return SugarElement.fromDom(original.dom.cloneNode(isDeep));\n  };\n  var shallow = function shallow(original) {\n    return clone(original, false);\n  };\n  var getHtml = function getHtml(element) {\n    if (isShadowRoot(element)) {\n      return '#shadow-root';\n    } else {\n      var clone = shallow(element);\n      return getOuter(clone);\n    }\n  };\n  var element = function element(elem) {\n    return getHtml(elem);\n  };\n  var chooseChannels = function chooseChannels(channels, message) {\n    return message.universal ? channels : filter$2(channels, function (ch) {\n      return contains$1(message.channels, ch);\n    });\n  };\n  var events$a = function events$a(receiveConfig) {\n    return derive$3([run(receive$1(), function (component, message) {\n      var channelMap = receiveConfig.channels;\n      var channels = keys(channelMap);\n      var receivingData = message;\n      var targetChannels = chooseChannels(channels, receivingData);\n      each$1(targetChannels, function (ch) {\n        var channelInfo = channelMap[ch];\n        var channelSchema = channelInfo.schema;\n        var data = asRawOrDie$1('channel[' + ch + '] data\\nReceiver: ' + element(component.element), channelSchema, receivingData.data);\n        channelInfo.onReceive(component, data);\n      });\n    })]);\n  };\n  var ActiveReceiving = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    events: events$a\n  });\n  var unknown = 'unknown';\n  var EventConfiguration;\n  (function (EventConfiguration) {\n    EventConfiguration[EventConfiguration['STOP'] = 0] = 'STOP';\n    EventConfiguration[EventConfiguration['NORMAL'] = 1] = 'NORMAL';\n    EventConfiguration[EventConfiguration['LOGGING'] = 2] = 'LOGGING';\n  })(EventConfiguration || (EventConfiguration = {}));\n  var eventConfig = Cell({});\n  var makeEventLogger = function makeEventLogger(eventName, initialTarget) {\n    var sequence = [];\n    var startTime = new Date().getTime();\n    return {\n      logEventCut: function logEventCut(_name, target, purpose) {\n        sequence.push({\n          outcome: 'cut',\n          target: target,\n          purpose: purpose\n        });\n      },\n      logEventStopped: function logEventStopped(_name, target, purpose) {\n        sequence.push({\n          outcome: 'stopped',\n          target: target,\n          purpose: purpose\n        });\n      },\n      logNoParent: function logNoParent(_name, target, purpose) {\n        sequence.push({\n          outcome: 'no-parent',\n          target: target,\n          purpose: purpose\n        });\n      },\n      logEventNoHandlers: function logEventNoHandlers(_name, target) {\n        sequence.push({\n          outcome: 'no-handlers-left',\n          target: target\n        });\n      },\n      logEventResponse: function logEventResponse(_name, target, purpose) {\n        sequence.push({\n          outcome: 'response',\n          purpose: purpose,\n          target: target\n        });\n      },\n      write: function write() {\n        var finishTime = new Date().getTime();\n        if (contains$1(['mousemove', 'mouseover', 'mouseout', systemInit()], eventName)) {\n          return;\n        }\n        console.log(eventName, {\n          event: eventName,\n          time: finishTime - startTime,\n          target: initialTarget.dom,\n          sequence: map$2(sequence, function (s) {\n            if (!contains$1(['cut', 'stopped', 'response'], s.outcome)) {\n              return s.outcome;\n            } else {\n              return '{' + s.purpose + '} ' + s.outcome + ' at (' + element(s.target) + ')';\n            }\n          })\n        });\n      }\n    };\n  };\n  var processEvent = function processEvent(eventName, initialTarget, f) {\n    var status = get$c(eventConfig.get(), eventName).orThunk(function () {\n      var patterns = keys(eventConfig.get());\n      return findMap(patterns, function (p) {\n        return eventName.indexOf(p) > -1 ? Optional.some(eventConfig.get()[p]) : Optional.none();\n      });\n    }).getOr(EventConfiguration.NORMAL);\n    switch (status) {\n      case EventConfiguration.NORMAL:\n        return f(noLogger());\n      case EventConfiguration.LOGGING:\n        {\n          var logger = makeEventLogger(eventName, initialTarget);\n          var output = f(logger);\n          logger.write();\n          return output;\n        }\n      case EventConfiguration.STOP:\n        return true;\n    }\n  };\n  var path = ['alloy/data/Fields', 'alloy/debugging/Debugging'];\n  var getTrace = function getTrace() {\n    var err = new Error();\n    if (err.stack !== undefined) {\n      var lines = err.stack.split('\\n');\n      return find$2(lines, function (line) {\n        return line.indexOf('alloy') > 0 && !exists(path, function (p) {\n          return line.indexOf(p) > -1;\n        });\n      }).getOr(unknown);\n    } else {\n      return unknown;\n    }\n  };\n  var ignoreEvent = {\n    logEventCut: noop,\n    logEventStopped: noop,\n    logNoParent: noop,\n    logEventNoHandlers: noop,\n    logEventResponse: noop,\n    write: noop\n  };\n  var monitorEvent = function monitorEvent(eventName, initialTarget, f) {\n    return processEvent(eventName, initialTarget, f);\n  };\n  var noLogger = constant$1(ignoreEvent);\n  var menuFields = constant$1([required$1('menu'), required$1('selectedMenu')]);\n  var itemFields = constant$1([required$1('item'), required$1('selectedItem')]);\n  constant$1(objOf(itemFields().concat(menuFields())));\n  var itemSchema$1 = constant$1(objOf(itemFields()));\n  var _initSize = requiredObjOf('initSize', [required$1('numColumns'), required$1('numRows')]);\n  var itemMarkers = function itemMarkers() {\n    return requiredOf('markers', itemSchema$1());\n  };\n  var tieredMenuMarkers = function tieredMenuMarkers() {\n    return requiredObjOf('markers', [required$1('backgroundMenu')].concat(menuFields()).concat(itemFields()));\n  };\n  var markers = function markers(required) {\n    return requiredObjOf('markers', map$2(required, required$1));\n  };\n  var onPresenceHandler = function onPresenceHandler(label, fieldName, presence) {\n    getTrace();\n    return field$2(fieldName, fieldName, presence, valueOf(function (f) {\n      return Result.value(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        return f.apply(undefined, args);\n      });\n    }));\n  };\n  var onHandler = function onHandler(fieldName) {\n    return onPresenceHandler('onHandler', fieldName, defaulted$1(noop));\n  };\n  var onKeyboardHandler = function onKeyboardHandler(fieldName) {\n    return onPresenceHandler('onKeyboardHandler', fieldName, defaulted$1(Optional.none));\n  };\n  var onStrictHandler = function onStrictHandler(fieldName) {\n    return onPresenceHandler('onHandler', fieldName, required$2());\n  };\n  var onStrictKeyboardHandler = function onStrictKeyboardHandler(fieldName) {\n    return onPresenceHandler('onKeyboardHandler', fieldName, required$2());\n  };\n  var output = function output(name, value) {\n    return customField(name, constant$1(value));\n  };\n  var snapshot = function snapshot(name) {\n    return customField(name, identity);\n  };\n  var initSize = constant$1(_initSize);\n  var ReceivingSchema = [requiredOf('channels', setOf(Result.value, objOfOnly([onStrictHandler('onReceive'), defaulted('schema', anyValue())])))];\n  var Receiving = create$5({\n    fields: ReceivingSchema,\n    name: 'receiving',\n    active: ActiveReceiving\n  });\n  var SetupBehaviourCellState = function SetupBehaviourCellState(initialState) {\n    var init = function init() {\n      var cell = Cell(initialState);\n      var get = function get() {\n        return cell.get();\n      };\n      var set = function set(newState) {\n        return cell.set(newState);\n      };\n      var clear = function clear() {\n        return cell.set(initialState);\n      };\n      var readState = function readState() {\n        return cell.get();\n      };\n      return {\n        get: get,\n        set: set,\n        clear: clear,\n        readState: readState\n      };\n    };\n    return {\n      init: init\n    };\n  };\n  var updateAriaState = function updateAriaState(component, toggleConfig, toggleState) {\n    var ariaInfo = toggleConfig.aria;\n    ariaInfo.update(component, ariaInfo, toggleState.get());\n  };\n  var updateClass = function updateClass(component, toggleConfig, toggleState) {\n    toggleConfig.toggleClass.each(function (toggleClass) {\n      if (toggleState.get()) {\n        add$1(component.element, toggleClass);\n      } else {\n        remove$3(component.element, toggleClass);\n      }\n    });\n  };\n  var toggle = function toggle(component, toggleConfig, toggleState) {\n    set$6(component, toggleConfig, toggleState, !toggleState.get());\n  };\n  var on$1 = function on$1(component, toggleConfig, toggleState) {\n    toggleState.set(true);\n    updateClass(component, toggleConfig, toggleState);\n    updateAriaState(component, toggleConfig, toggleState);\n  };\n  var off = function off(component, toggleConfig, toggleState) {\n    toggleState.set(false);\n    updateClass(component, toggleConfig, toggleState);\n    updateAriaState(component, toggleConfig, toggleState);\n  };\n  var set$6 = function set$6(component, toggleConfig, toggleState, state) {\n    var action = state ? on$1 : off;\n    action(component, toggleConfig, toggleState);\n  };\n  var isOn = function isOn(component, toggleConfig, toggleState) {\n    return toggleState.get();\n  };\n  var onLoad$5 = function onLoad$5(component, toggleConfig, toggleState) {\n    set$6(component, toggleConfig, toggleState, toggleConfig.selected);\n  };\n  var ToggleApis = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    onLoad: onLoad$5,\n    toggle: toggle,\n    isOn: isOn,\n    on: on$1,\n    off: off,\n    set: set$6\n  });\n  var exhibit$5 = function exhibit$5() {\n    return nu$3({});\n  };\n  var events$9 = function events$9(toggleConfig, toggleState) {\n    var execute = executeEvent(toggleConfig, toggleState, toggle);\n    var load = loadEvent(toggleConfig, toggleState, onLoad$5);\n    return derive$3(flatten([toggleConfig.toggleOnExecute ? [execute] : [], [load]]));\n  };\n  var ActiveToggle = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    exhibit: exhibit$5,\n    events: events$9\n  });\n  var updatePressed = function updatePressed(component, ariaInfo, status) {\n    set$8(component.element, 'aria-pressed', status);\n    if (ariaInfo.syncWithExpanded) {\n      updateExpanded(component, ariaInfo, status);\n    }\n  };\n  var updateSelected = function updateSelected(component, ariaInfo, status) {\n    set$8(component.element, 'aria-selected', status);\n  };\n  var updateChecked = function updateChecked(component, ariaInfo, status) {\n    set$8(component.element, 'aria-checked', status);\n  };\n  var updateExpanded = function updateExpanded(component, ariaInfo, status) {\n    set$8(component.element, 'aria-expanded', status);\n  };\n  var ToggleSchema = [defaulted('selected', false), option('toggleClass'), defaulted('toggleOnExecute', true), defaultedOf('aria', {\n    mode: 'none'\n  }, choose$1('mode', {\n    pressed: [defaulted('syncWithExpanded', false), output('update', updatePressed)],\n    checked: [output('update', updateChecked)],\n    expanded: [output('update', updateExpanded)],\n    selected: [output('update', updateSelected)],\n    none: [output('update', noop)]\n  }))];\n  var Toggling = create$5({\n    fields: ToggleSchema,\n    name: 'toggling',\n    active: ActiveToggle,\n    apis: ToggleApis,\n    state: SetupBehaviourCellState(false)\n  });\n  var format = function format(command, update) {\n    return Receiving.config({\n      channels: wrap(formatChanged, {\n        onReceive: function onReceive(button, data) {\n          if (data.command === command) {\n            update(button, data.state);\n          }\n        }\n      })\n    });\n  };\n  var orientation = function orientation(onReceive) {\n    return Receiving.config({\n      channels: wrap(orientationChanged, {\n        onReceive: onReceive\n      })\n    });\n  };\n  var receive = function receive(channel, onReceive) {\n    return {\n      key: channel,\n      value: {\n        onReceive: onReceive\n      }\n    };\n  };\n  var prefix$2 = 'tinymce-mobile';\n  var resolve = function resolve(p) {\n    return prefix$2 + '-' + p;\n  };\n  var pointerEvents = function pointerEvents() {\n    var onClick = function onClick(component, simulatedEvent) {\n      simulatedEvent.stop();\n      emitExecute(component);\n    };\n    return [run(click(), onClick), run(tap(), onClick), cutter(touchstart()), cutter(mousedown())];\n  };\n  var events$8 = function events$8(optAction) {\n    var executeHandler = function executeHandler(action) {\n      return runOnExecute(function (component, simulatedEvent) {\n        action(component);\n        simulatedEvent.stop();\n      });\n    };\n    return derive$3(flatten([optAction.map(executeHandler).toArray(), pointerEvents()]));\n  };\n  var focus$2 = function focus$2(component, focusConfig) {\n    if (!focusConfig.ignore) {\n      focus$3(component.element);\n      focusConfig.onFocus(component);\n    }\n  };\n  var blur = function blur(component, focusConfig) {\n    if (!focusConfig.ignore) {\n      blur$1(component.element);\n    }\n  };\n  var isFocused = function isFocused(component) {\n    return hasFocus(component.element);\n  };\n  var FocusApis = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    focus: focus$2,\n    blur: blur,\n    isFocused: isFocused\n  });\n  var exhibit$4 = function exhibit$4(base, focusConfig) {\n    var mod = focusConfig.ignore ? {} : {\n      attributes: {\n        tabindex: '-1'\n      }\n    };\n    return nu$3(mod);\n  };\n  var events$7 = function events$7(focusConfig) {\n    return derive$3([run(focus$4(), function (component, simulatedEvent) {\n      focus$2(component, focusConfig);\n      simulatedEvent.stop();\n    })].concat(focusConfig.stopMousedown ? [run(mousedown(), function (_, simulatedEvent) {\n      simulatedEvent.event.prevent();\n    })] : []));\n  };\n  var ActiveFocus = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    exhibit: exhibit$4,\n    events: events$7\n  });\n  var FocusSchema = [onHandler('onFocus'), defaulted('stopMousedown', false), defaulted('ignore', false)];\n  var Focusing = create$5({\n    fields: FocusSchema,\n    name: 'focusing',\n    active: ActiveFocus,\n    apis: FocusApis\n  });\n  var isSupported = function isSupported(dom) {\n    return dom.style !== undefined && isFunction(dom.style.getPropertyValue);\n  };\n  var internalSet = function internalSet(dom, property, value) {\n    if (!isString(value)) {\n      console.error('Invalid call to CSS.set. Property ', property, ':: Value ', value, ':: Element ', dom);\n      throw new Error('CSS value must be a string: ' + value);\n    }\n    if (isSupported(dom)) {\n      dom.style.setProperty(property, value);\n    }\n  };\n  var internalRemove = function internalRemove(dom, property) {\n    if (isSupported(dom)) {\n      dom.style.removeProperty(property);\n    }\n  };\n  var set$5 = function set$5(element, property, value) {\n    var dom = element.dom;\n    internalSet(dom, property, value);\n  };\n  var setAll = function setAll(element, css) {\n    var dom = element.dom;\n    each(css, function (v, k) {\n      internalSet(dom, k, v);\n    });\n  };\n  var get$8 = function get$8(element, property) {\n    var dom = element.dom;\n    var styles = window.getComputedStyle(dom);\n    var r = styles.getPropertyValue(property);\n    return r === '' && !inBody(element) ? getUnsafeProperty(dom, property) : r;\n  };\n  var getUnsafeProperty = function getUnsafeProperty(dom, property) {\n    return isSupported(dom) ? dom.style.getPropertyValue(property) : '';\n  };\n  var getRaw = function getRaw(element, property) {\n    var dom = element.dom;\n    var raw = getUnsafeProperty(dom, property);\n    return Optional.from(raw).filter(function (r) {\n      return r.length > 0;\n    });\n  };\n  var remove$2 = function remove$2(element, property) {\n    var dom = element.dom;\n    internalRemove(dom, property);\n    if (is(getOpt(element, 'style').map(trim), '')) {\n      remove$6(element, 'style');\n    }\n  };\n  var reflow = function reflow(e) {\n    return e.dom.offsetWidth;\n  };\n  var Dimension = function Dimension(name, getOffset) {\n    var set = function set(element, h) {\n      if (!isNumber(h) && !h.match(/^[0-9]+$/)) {\n        throw new Error(name + '.set accepts only positive integer values. Value was ' + h);\n      }\n      var dom = element.dom;\n      if (isSupported(dom)) {\n        dom.style[name] = h + 'px';\n      }\n    };\n    var get = function get(element) {\n      var r = getOffset(element);\n      if (r <= 0 || r === null) {\n        var css = get$8(element, name);\n        return parseFloat(css) || 0;\n      }\n      return r;\n    };\n    var getOuter = get;\n    var aggregate = function aggregate(element, properties) {\n      return foldl(properties, function (acc, property) {\n        var val = get$8(element, property);\n        var value = val === undefined ? 0 : parseInt(val, 10);\n        return isNaN(value) ? acc : acc + value;\n      }, 0);\n    };\n    var max = function max(element, value, properties) {\n      var cumulativeInclusions = aggregate(element, properties);\n      var absoluteMax = value > cumulativeInclusions ? value - cumulativeInclusions : 0;\n      return absoluteMax;\n    };\n    return {\n      set: set,\n      get: get,\n      getOuter: getOuter,\n      aggregate: aggregate,\n      max: max\n    };\n  };\n  var api$3 = Dimension('height', function (element) {\n    var dom = element.dom;\n    return inBody(element) ? dom.getBoundingClientRect().height : dom.offsetHeight;\n  });\n  var get$7 = function get$7(element) {\n    return api$3.get(element);\n  };\n  var ancestors$1 = function ancestors$1(scope, predicate, isRoot) {\n    return filter$2(parents(scope, isRoot), predicate);\n  };\n  var siblings$1 = function siblings$1(scope, predicate) {\n    return filter$2(siblings$2(scope), predicate);\n  };\n  var all = function all(selector) {\n    return all$2(selector);\n  };\n  var ancestors = function ancestors(scope, selector, isRoot) {\n    return ancestors$1(scope, function (e) {\n      return is$1(e, selector);\n    }, isRoot);\n  };\n  var siblings = function siblings(scope, selector) {\n    return siblings$1(scope, function (e) {\n      return is$1(e, selector);\n    });\n  };\n  var descendants = function descendants(scope, selector) {\n    return all$2(selector, scope);\n  };\n  function ClosestOrAncestor(is, ancestor, scope, a, isRoot) {\n    if (is(scope, a)) {\n      return Optional.some(scope);\n    } else if (isFunction(isRoot) && isRoot(scope)) {\n      return Optional.none();\n    } else {\n      return ancestor(scope, a, isRoot);\n    }\n  }\n  var ancestor$1 = function ancestor$1(scope, predicate, isRoot) {\n    var element = scope.dom;\n    var stop = isFunction(isRoot) ? isRoot : never;\n    while (element.parentNode) {\n      element = element.parentNode;\n      var el = SugarElement.fromDom(element);\n      if (predicate(el)) {\n        return Optional.some(el);\n      } else if (stop(el)) {\n        break;\n      }\n    }\n    return Optional.none();\n  };\n  var closest$2 = function closest$2(scope, predicate, isRoot) {\n    var is = function is(s, test) {\n      return test(s);\n    };\n    return ClosestOrAncestor(is, ancestor$1, scope, predicate, isRoot);\n  };\n  var descendant$1 = function descendant$1(scope, predicate) {\n    var descend = function descend(node) {\n      for (var i = 0; i < node.childNodes.length; i++) {\n        var child_1 = SugarElement.fromDom(node.childNodes[i]);\n        if (predicate(child_1)) {\n          return Optional.some(child_1);\n        }\n        var res = descend(node.childNodes[i]);\n        if (res.isSome()) {\n          return res;\n        }\n      }\n      return Optional.none();\n    };\n    return descend(scope.dom);\n  };\n  var first$1 = function first$1(selector) {\n    return one(selector);\n  };\n  var ancestor = function ancestor(scope, selector, isRoot) {\n    return ancestor$1(scope, function (e) {\n      return is$1(e, selector);\n    }, isRoot);\n  };\n  var descendant = function descendant(scope, selector) {\n    return one(selector, scope);\n  };\n  var closest$1 = function closest$1(scope, selector, isRoot) {\n    var is = function is(element, selector) {\n      return is$1(element, selector);\n    };\n    return ClosestOrAncestor(is, ancestor, scope, selector, isRoot);\n  };\n  var BACKSPACE = [8];\n  var TAB = [9];\n  var ENTER = [13];\n  var ESCAPE = [27];\n  var SPACE = [32];\n  var LEFT = [37];\n  var UP = [38];\n  var RIGHT = [39];\n  var DOWN = [40];\n  var cyclePrev = function cyclePrev(values, index, predicate) {\n    var before = reverse(values.slice(0, index));\n    var after = reverse(values.slice(index + 1));\n    return find$2(before.concat(after), predicate);\n  };\n  var tryPrev = function tryPrev(values, index, predicate) {\n    var before = reverse(values.slice(0, index));\n    return find$2(before, predicate);\n  };\n  var cycleNext = function cycleNext(values, index, predicate) {\n    var before = values.slice(0, index);\n    var after = values.slice(index + 1);\n    return find$2(after.concat(before), predicate);\n  };\n  var tryNext = function tryNext(values, index, predicate) {\n    var after = values.slice(index + 1);\n    return find$2(after, predicate);\n  };\n  var inSet = function inSet(keys) {\n    return function (event) {\n      var raw = event.raw;\n      return contains$1(keys, raw.which);\n    };\n  };\n  var and = function and(preds) {\n    return function (event) {\n      return forall(preds, function (pred) {\n        return pred(event);\n      });\n    };\n  };\n  var isShift = function isShift(event) {\n    var raw = event.raw;\n    return raw.shiftKey === true;\n  };\n  var isControl = function isControl(event) {\n    var raw = event.raw;\n    return raw.ctrlKey === true;\n  };\n  var isNotShift = not(isShift);\n  var rule = function rule(matches, action) {\n    return {\n      matches: matches,\n      classification: action\n    };\n  };\n  var choose = function choose(transitions, event) {\n    var transition = find$2(transitions, function (t) {\n      return t.matches(event);\n    });\n    return transition.map(function (t) {\n      return t.classification;\n    });\n  };\n  var cycleBy = function cycleBy(value, delta, min, max) {\n    var r = value + delta;\n    if (r > max) {\n      return min;\n    } else if (r < min) {\n      return max;\n    } else {\n      return r;\n    }\n  };\n  var clamp = function clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n  };\n  var dehighlightAllExcept = function dehighlightAllExcept(component, hConfig, hState, skip) {\n    var highlighted = descendants(component.element, '.' + hConfig.highlightClass);\n    each$1(highlighted, function (h) {\n      if (!exists(skip, function (skipComp) {\n        return skipComp.element === h;\n      })) {\n        remove$3(h, hConfig.highlightClass);\n        component.getSystem().getByDom(h).each(function (target) {\n          hConfig.onDehighlight(component, target);\n          emit(target, dehighlight$1());\n        });\n      }\n    });\n  };\n  var dehighlightAll = function dehighlightAll(component, hConfig, hState) {\n    return dehighlightAllExcept(component, hConfig, hState, []);\n  };\n  var dehighlight = function dehighlight(component, hConfig, hState, target) {\n    if (isHighlighted(component, hConfig, hState, target)) {\n      remove$3(target.element, hConfig.highlightClass);\n      hConfig.onDehighlight(component, target);\n      emit(target, dehighlight$1());\n    }\n  };\n  var highlight = function highlight(component, hConfig, hState, target) {\n    dehighlightAllExcept(component, hConfig, hState, [target]);\n    if (!isHighlighted(component, hConfig, hState, target)) {\n      add$1(target.element, hConfig.highlightClass);\n      hConfig.onHighlight(component, target);\n      emit(target, highlight$1());\n    }\n  };\n  var highlightFirst = function highlightFirst(component, hConfig, hState) {\n    getFirst(component, hConfig).each(function (firstComp) {\n      highlight(component, hConfig, hState, firstComp);\n    });\n  };\n  var highlightLast = function highlightLast(component, hConfig, hState) {\n    getLast(component, hConfig).each(function (lastComp) {\n      highlight(component, hConfig, hState, lastComp);\n    });\n  };\n  var highlightAt = function highlightAt(component, hConfig, hState, index) {\n    getByIndex(component, hConfig, hState, index).fold(function (err) {\n      throw err;\n    }, function (firstComp) {\n      highlight(component, hConfig, hState, firstComp);\n    });\n  };\n  var highlightBy = function highlightBy(component, hConfig, hState, predicate) {\n    var candidates = getCandidates(component, hConfig);\n    var targetComp = find$2(candidates, predicate);\n    targetComp.each(function (c) {\n      highlight(component, hConfig, hState, c);\n    });\n  };\n  var isHighlighted = function isHighlighted(component, hConfig, hState, queryTarget) {\n    return has(queryTarget.element, hConfig.highlightClass);\n  };\n  var getHighlighted = function getHighlighted(component, hConfig, _hState) {\n    return descendant(component.element, '.' + hConfig.highlightClass).bind(function (e) {\n      return component.getSystem().getByDom(e).toOptional();\n    });\n  };\n  var getByIndex = function getByIndex(component, hConfig, hState, index) {\n    var items = descendants(component.element, '.' + hConfig.itemClass);\n    return Optional.from(items[index]).fold(function () {\n      return Result.error(new Error('No element found with index ' + index));\n    }, component.getSystem().getByDom);\n  };\n  var getFirst = function getFirst(component, hConfig, _hState) {\n    return descendant(component.element, '.' + hConfig.itemClass).bind(function (e) {\n      return component.getSystem().getByDom(e).toOptional();\n    });\n  };\n  var getLast = function getLast(component, hConfig, _hState) {\n    var items = descendants(component.element, '.' + hConfig.itemClass);\n    var last = items.length > 0 ? Optional.some(items[items.length - 1]) : Optional.none();\n    return last.bind(function (c) {\n      return component.getSystem().getByDom(c).toOptional();\n    });\n  };\n  var getDelta = function getDelta(component, hConfig, hState, delta) {\n    var items = descendants(component.element, '.' + hConfig.itemClass);\n    var current = findIndex$1(items, function (item) {\n      return has(item, hConfig.highlightClass);\n    });\n    return current.bind(function (selected) {\n      var dest = cycleBy(selected, delta, 0, items.length - 1);\n      return component.getSystem().getByDom(items[dest]).toOptional();\n    });\n  };\n  var getPrevious = function getPrevious(component, hConfig, hState) {\n    return getDelta(component, hConfig, hState, -1);\n  };\n  var getNext = function getNext(component, hConfig, hState) {\n    return getDelta(component, hConfig, hState, +1);\n  };\n  var getCandidates = function getCandidates(component, hConfig, _hState) {\n    var items = descendants(component.element, '.' + hConfig.itemClass);\n    return cat(map$2(items, function (i) {\n      return component.getSystem().getByDom(i).toOptional();\n    }));\n  };\n  var HighlightApis = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    dehighlightAll: dehighlightAll,\n    dehighlight: dehighlight,\n    highlight: highlight,\n    highlightFirst: highlightFirst,\n    highlightLast: highlightLast,\n    highlightAt: highlightAt,\n    highlightBy: highlightBy,\n    isHighlighted: isHighlighted,\n    getHighlighted: getHighlighted,\n    getFirst: getFirst,\n    getLast: getLast,\n    getPrevious: getPrevious,\n    getNext: getNext,\n    getCandidates: getCandidates\n  });\n  var HighlightSchema = [required$1('highlightClass'), required$1('itemClass'), onHandler('onHighlight'), onHandler('onDehighlight')];\n  var Highlighting = create$5({\n    fields: HighlightSchema,\n    name: 'highlighting',\n    apis: HighlightApis\n  });\n  var reportFocusShifting = function reportFocusShifting(component, prevFocus, newFocus) {\n    var noChange = prevFocus.exists(function (p) {\n      return newFocus.exists(function (n) {\n        return eq(n, p);\n      });\n    });\n    if (!noChange) {\n      emitWith(component, focusShifted(), {\n        prevFocus: prevFocus,\n        newFocus: newFocus\n      });\n    }\n  };\n  var dom$2 = function dom$2() {\n    var get = function get(component) {\n      return search(component.element);\n    };\n    var set = function set(component, focusee) {\n      var prevFocus = get(component);\n      component.getSystem().triggerFocus(focusee, component.element);\n      var newFocus = get(component);\n      reportFocusShifting(component, prevFocus, newFocus);\n    };\n    return {\n      get: get,\n      set: set\n    };\n  };\n  var highlights = function highlights() {\n    var get = function get(component) {\n      return Highlighting.getHighlighted(component).map(function (item) {\n        return item.element;\n      });\n    };\n    var set = function set(component, element) {\n      var prevFocus = get(component);\n      component.getSystem().getByDom(element).fold(noop, function (item) {\n        Highlighting.highlight(component, item);\n      });\n      var newFocus = get(component);\n      reportFocusShifting(component, prevFocus, newFocus);\n    };\n    return {\n      get: get,\n      set: set\n    };\n  };\n  var FocusInsideModes;\n  (function (FocusInsideModes) {\n    FocusInsideModes['OnFocusMode'] = 'onFocus';\n    FocusInsideModes['OnEnterOrSpaceMode'] = 'onEnterOrSpace';\n    FocusInsideModes['OnApiMode'] = 'onApi';\n  })(FocusInsideModes || (FocusInsideModes = {}));\n  var typical = function typical(infoSchema, stateInit, getKeydownRules, getKeyupRules, optFocusIn) {\n    var schema = function schema() {\n      return infoSchema.concat([defaulted('focusManager', dom$2()), defaultedOf('focusInside', 'onFocus', valueOf(function (val) {\n        return contains$1(['onFocus', 'onEnterOrSpace', 'onApi'], val) ? Result.value(val) : Result.error('Invalid value for focusInside');\n      })), output('handler', me), output('state', stateInit), output('sendFocusIn', optFocusIn)]);\n    };\n    var processKey = function processKey(component, simulatedEvent, getRules, keyingConfig, keyingState) {\n      var rules = getRules(component, simulatedEvent, keyingConfig, keyingState);\n      return choose(rules, simulatedEvent.event).bind(function (rule) {\n        return rule(component, simulatedEvent, keyingConfig, keyingState);\n      });\n    };\n    var toEvents = function toEvents(keyingConfig, keyingState) {\n      var onFocusHandler = keyingConfig.focusInside !== FocusInsideModes.OnFocusMode ? Optional.none() : optFocusIn(keyingConfig).map(function (focusIn) {\n        return run(focus$4(), function (component, simulatedEvent) {\n          focusIn(component, keyingConfig, keyingState);\n          simulatedEvent.stop();\n        });\n      });\n      var tryGoInsideComponent = function tryGoInsideComponent(component, simulatedEvent) {\n        var isEnterOrSpace = inSet(SPACE.concat(ENTER))(simulatedEvent.event);\n        if (keyingConfig.focusInside === FocusInsideModes.OnEnterOrSpaceMode && isEnterOrSpace && isSource(component, simulatedEvent)) {\n          optFocusIn(keyingConfig).each(function (focusIn) {\n            focusIn(component, keyingConfig, keyingState);\n            simulatedEvent.stop();\n          });\n        }\n      };\n      var keyboardEvents = [run(keydown(), function (component, simulatedEvent) {\n        processKey(component, simulatedEvent, getKeydownRules, keyingConfig, keyingState).fold(function () {\n          tryGoInsideComponent(component, simulatedEvent);\n        }, function (_) {\n          simulatedEvent.stop();\n        });\n      }), run(keyup(), function (component, simulatedEvent) {\n        processKey(component, simulatedEvent, getKeyupRules, keyingConfig, keyingState).each(function (_) {\n          simulatedEvent.stop();\n        });\n      })];\n      return derive$3(onFocusHandler.toArray().concat(keyboardEvents));\n    };\n    var me = {\n      schema: schema,\n      processKey: processKey,\n      toEvents: toEvents\n    };\n    return me;\n  };\n  var create$4 = function create$4(cyclicField) {\n    var schema = [option('onEscape'), option('onEnter'), defaulted('selector', '[data-alloy-tabstop=\"true\"]:not(:disabled)'), defaulted('firstTabstop', 0), defaulted('useTabstopAt', always), option('visibilitySelector')].concat([cyclicField]);\n    var isVisible = function isVisible(tabbingConfig, element) {\n      var target = tabbingConfig.visibilitySelector.bind(function (sel) {\n        return closest$1(element, sel);\n      }).getOr(element);\n      return get$7(target) > 0;\n    };\n    var findInitial = function findInitial(component, tabbingConfig) {\n      var tabstops = descendants(component.element, tabbingConfig.selector);\n      var visibles = filter$2(tabstops, function (elem) {\n        return isVisible(tabbingConfig, elem);\n      });\n      return Optional.from(visibles[tabbingConfig.firstTabstop]);\n    };\n    var findCurrent = function findCurrent(component, tabbingConfig) {\n      return tabbingConfig.focusManager.get(component).bind(function (elem) {\n        return closest$1(elem, tabbingConfig.selector);\n      });\n    };\n    var isTabstop = function isTabstop(tabbingConfig, element) {\n      return isVisible(tabbingConfig, element) && tabbingConfig.useTabstopAt(element);\n    };\n    var focusIn = function focusIn(component, tabbingConfig, _tabbingState) {\n      findInitial(component, tabbingConfig).each(function (target) {\n        tabbingConfig.focusManager.set(component, target);\n      });\n    };\n    var goFromTabstop = function goFromTabstop(component, tabstops, stopIndex, tabbingConfig, cycle) {\n      return cycle(tabstops, stopIndex, function (elem) {\n        return isTabstop(tabbingConfig, elem);\n      }).fold(function () {\n        return tabbingConfig.cyclic ? Optional.some(true) : Optional.none();\n      }, function (target) {\n        tabbingConfig.focusManager.set(component, target);\n        return Optional.some(true);\n      });\n    };\n    var go = function go(component, _simulatedEvent, tabbingConfig, cycle) {\n      var tabstops = descendants(component.element, tabbingConfig.selector);\n      return findCurrent(component, tabbingConfig).bind(function (tabstop) {\n        var optStopIndex = findIndex$1(tabstops, curry(eq, tabstop));\n        return optStopIndex.bind(function (stopIndex) {\n          return goFromTabstop(component, tabstops, stopIndex, tabbingConfig, cycle);\n        });\n      });\n    };\n    var goBackwards = function goBackwards(component, simulatedEvent, tabbingConfig) {\n      var navigate = tabbingConfig.cyclic ? cyclePrev : tryPrev;\n      return go(component, simulatedEvent, tabbingConfig, navigate);\n    };\n    var goForwards = function goForwards(component, simulatedEvent, tabbingConfig) {\n      var navigate = tabbingConfig.cyclic ? cycleNext : tryNext;\n      return go(component, simulatedEvent, tabbingConfig, navigate);\n    };\n    var execute = function execute(component, simulatedEvent, tabbingConfig) {\n      return tabbingConfig.onEnter.bind(function (f) {\n        return f(component, simulatedEvent);\n      });\n    };\n    var exit = function exit(component, simulatedEvent, tabbingConfig) {\n      return tabbingConfig.onEscape.bind(function (f) {\n        return f(component, simulatedEvent);\n      });\n    };\n    var getKeydownRules = constant$1([rule(and([isShift, inSet(TAB)]), goBackwards), rule(inSet(TAB), goForwards), rule(inSet(ESCAPE), exit), rule(and([isNotShift, inSet(ENTER)]), execute)]);\n    var getKeyupRules = constant$1([]);\n    return typical(schema, NoState.init, getKeydownRules, getKeyupRules, function () {\n      return Optional.some(focusIn);\n    });\n  };\n  var AcyclicType = create$4(customField('cyclic', never));\n  var CyclicType = create$4(customField('cyclic', always));\n  var inside = function inside(target) {\n    return name$1(target) === 'input' && get$b(target, 'type') !== 'radio' || name$1(target) === 'textarea';\n  };\n  var doDefaultExecute = function doDefaultExecute(component, _simulatedEvent, focused) {\n    dispatch(component, focused, execute$5());\n    return Optional.some(true);\n  };\n  var defaultExecute = function defaultExecute(component, simulatedEvent, focused) {\n    var isComplex = inside(focused) && inSet(SPACE)(simulatedEvent.event);\n    return isComplex ? Optional.none() : doDefaultExecute(component, simulatedEvent, focused);\n  };\n  var stopEventForFirefox = function stopEventForFirefox(_component, _simulatedEvent) {\n    return Optional.some(true);\n  };\n  var schema$f = [defaulted('execute', defaultExecute), defaulted('useSpace', false), defaulted('useEnter', true), defaulted('useControlEnter', false), defaulted('useDown', false)];\n  var execute$4 = function execute$4(component, simulatedEvent, executeConfig) {\n    return executeConfig.execute(component, simulatedEvent, component.element);\n  };\n  var getKeydownRules$5 = function getKeydownRules$5(component, _simulatedEvent, executeConfig, _executeState) {\n    var spaceExec = executeConfig.useSpace && !inside(component.element) ? SPACE : [];\n    var enterExec = executeConfig.useEnter ? ENTER : [];\n    var downExec = executeConfig.useDown ? DOWN : [];\n    var execKeys = spaceExec.concat(enterExec).concat(downExec);\n    return [rule(inSet(execKeys), execute$4)].concat(executeConfig.useControlEnter ? [rule(and([isControl, inSet(ENTER)]), execute$4)] : []);\n  };\n  var getKeyupRules$5 = function getKeyupRules$5(component, _simulatedEvent, executeConfig, _executeState) {\n    return executeConfig.useSpace && !inside(component.element) ? [rule(inSet(SPACE), stopEventForFirefox)] : [];\n  };\n  var ExecutionType = typical(schema$f, NoState.init, getKeydownRules$5, getKeyupRules$5, function () {\n    return Optional.none();\n  });\n  var singleton$1 = function singleton$1(doRevoke) {\n    var subject = Cell(Optional.none());\n    var revoke = function revoke() {\n      return subject.get().each(doRevoke);\n    };\n    var clear = function clear() {\n      revoke();\n      subject.set(Optional.none());\n    };\n    var isSet = function isSet() {\n      return subject.get().isSome();\n    };\n    var get = function get() {\n      return subject.get();\n    };\n    var set = function set(s) {\n      revoke();\n      subject.set(Optional.some(s));\n    };\n    return {\n      clear: clear,\n      isSet: isSet,\n      get: get,\n      set: set\n    };\n  };\n  var destroyable = function destroyable() {\n    return singleton$1(function (s) {\n      return s.destroy();\n    });\n  };\n  var api$2 = function api$2() {\n    var subject = destroyable();\n    var run = function run(f) {\n      return subject.get().each(f);\n    };\n    return _assign(_assign({}, subject), {\n      run: run\n    });\n  };\n  var value = function value() {\n    var subject = singleton$1(noop);\n    var on = function on(f) {\n      return subject.get().each(f);\n    };\n    return _assign(_assign({}, subject), {\n      on: on\n    });\n  };\n  var flatgrid$1 = function flatgrid$1() {\n    var dimensions = value();\n    var setGridSize = function setGridSize(numRows, numColumns) {\n      dimensions.set({\n        numRows: numRows,\n        numColumns: numColumns\n      });\n    };\n    var getNumRows = function getNumRows() {\n      return dimensions.get().map(function (d) {\n        return d.numRows;\n      });\n    };\n    var getNumColumns = function getNumColumns() {\n      return dimensions.get().map(function (d) {\n        return d.numColumns;\n      });\n    };\n    return nu$2({\n      readState: function readState() {\n        return dimensions.get().map(function (d) {\n          return {\n            numRows: String(d.numRows),\n            numColumns: String(d.numColumns)\n          };\n        }).getOr({\n          numRows: '?',\n          numColumns: '?'\n        });\n      },\n      setGridSize: setGridSize,\n      getNumRows: getNumRows,\n      getNumColumns: getNumColumns\n    });\n  };\n  var init$5 = function init$5(spec) {\n    return spec.state(spec);\n  };\n  var KeyingState = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    flatgrid: flatgrid$1,\n    init: init$5\n  });\n  var onDirection = function onDirection(isLtr, isRtl) {\n    return function (element) {\n      return getDirection(element) === 'rtl' ? isRtl : isLtr;\n    };\n  };\n  var getDirection = function getDirection(element) {\n    return get$8(element, 'direction') === 'rtl' ? 'rtl' : 'ltr';\n  };\n  var useH = function useH(movement) {\n    return function (component, simulatedEvent, config, state) {\n      var move = movement(component.element);\n      return use(move, component, simulatedEvent, config, state);\n    };\n  };\n  var west = function west(moveLeft, moveRight) {\n    var movement = onDirection(moveLeft, moveRight);\n    return useH(movement);\n  };\n  var east = function east(moveLeft, moveRight) {\n    var movement = onDirection(moveRight, moveLeft);\n    return useH(movement);\n  };\n  var useV = function useV(move) {\n    return function (component, simulatedEvent, config, state) {\n      return use(move, component, simulatedEvent, config, state);\n    };\n  };\n  var use = function use(move, component, simulatedEvent, config, state) {\n    var outcome = config.focusManager.get(component).bind(function (focused) {\n      return move(component.element, focused, config, state);\n    });\n    return outcome.map(function (newFocus) {\n      config.focusManager.set(component, newFocus);\n      return true;\n    });\n  };\n  var north = useV;\n  var south = useV;\n  var move$1 = useV;\n  var isHidden = function isHidden(dom) {\n    return dom.offsetWidth <= 0 && dom.offsetHeight <= 0;\n  };\n  var isVisible = function isVisible(element) {\n    return !isHidden(element.dom);\n  };\n  var locate = function locate(candidates, predicate) {\n    return findIndex$1(candidates, predicate).map(function (index) {\n      return {\n        index: index,\n        candidates: candidates\n      };\n    });\n  };\n  var locateVisible = function locateVisible(container, current, selector) {\n    var predicate = function predicate(x) {\n      return eq(x, current);\n    };\n    var candidates = descendants(container, selector);\n    var visible = filter$2(candidates, isVisible);\n    return locate(visible, predicate);\n  };\n  var findIndex = function findIndex(elements, target) {\n    return findIndex$1(elements, function (elem) {\n      return eq(target, elem);\n    });\n  };\n  var withGrid = function withGrid(values, index, numCols, f) {\n    var oldRow = Math.floor(index / numCols);\n    var oldColumn = index % numCols;\n    return f(oldRow, oldColumn).bind(function (address) {\n      var newIndex = address.row * numCols + address.column;\n      return newIndex >= 0 && newIndex < values.length ? Optional.some(values[newIndex]) : Optional.none();\n    });\n  };\n  var cycleHorizontal$1 = function cycleHorizontal$1(values, index, numRows, numCols, delta) {\n    return withGrid(values, index, numCols, function (oldRow, oldColumn) {\n      var onLastRow = oldRow === numRows - 1;\n      var colsInRow = onLastRow ? values.length - oldRow * numCols : numCols;\n      var newColumn = cycleBy(oldColumn, delta, 0, colsInRow - 1);\n      return Optional.some({\n        row: oldRow,\n        column: newColumn\n      });\n    });\n  };\n  var cycleVertical$1 = function cycleVertical$1(values, index, numRows, numCols, delta) {\n    return withGrid(values, index, numCols, function (oldRow, oldColumn) {\n      var newRow = cycleBy(oldRow, delta, 0, numRows - 1);\n      var onLastRow = newRow === numRows - 1;\n      var colsInRow = onLastRow ? values.length - newRow * numCols : numCols;\n      var newCol = clamp(oldColumn, 0, colsInRow - 1);\n      return Optional.some({\n        row: newRow,\n        column: newCol\n      });\n    });\n  };\n  var cycleRight$1 = function cycleRight$1(values, index, numRows, numCols) {\n    return cycleHorizontal$1(values, index, numRows, numCols, +1);\n  };\n  var cycleLeft$1 = function cycleLeft$1(values, index, numRows, numCols) {\n    return cycleHorizontal$1(values, index, numRows, numCols, -1);\n  };\n  var cycleUp$1 = function cycleUp$1(values, index, numRows, numCols) {\n    return cycleVertical$1(values, index, numRows, numCols, -1);\n  };\n  var cycleDown$1 = function cycleDown$1(values, index, numRows, numCols) {\n    return cycleVertical$1(values, index, numRows, numCols, +1);\n  };\n  var schema$e = [required$1('selector'), defaulted('execute', defaultExecute), onKeyboardHandler('onEscape'), defaulted('captureTab', false), initSize()];\n  var focusIn$3 = function focusIn$3(component, gridConfig, _gridState) {\n    descendant(component.element, gridConfig.selector).each(function (first) {\n      gridConfig.focusManager.set(component, first);\n    });\n  };\n  var findCurrent$1 = function findCurrent$1(component, gridConfig) {\n    return gridConfig.focusManager.get(component).bind(function (elem) {\n      return closest$1(elem, gridConfig.selector);\n    });\n  };\n  var execute$3 = function execute$3(component, simulatedEvent, gridConfig, _gridState) {\n    return findCurrent$1(component, gridConfig).bind(function (focused) {\n      return gridConfig.execute(component, simulatedEvent, focused);\n    });\n  };\n  var doMove$2 = function doMove$2(cycle) {\n    return function (element, focused, gridConfig, gridState) {\n      return locateVisible(element, focused, gridConfig.selector).bind(function (identified) {\n        return cycle(identified.candidates, identified.index, gridState.getNumRows().getOr(gridConfig.initSize.numRows), gridState.getNumColumns().getOr(gridConfig.initSize.numColumns));\n      });\n    };\n  };\n  var handleTab = function handleTab(_component, _simulatedEvent, gridConfig) {\n    return gridConfig.captureTab ? Optional.some(true) : Optional.none();\n  };\n  var doEscape$1 = function doEscape$1(component, simulatedEvent, gridConfig) {\n    return gridConfig.onEscape(component, simulatedEvent);\n  };\n  var moveLeft$3 = doMove$2(cycleLeft$1);\n  var moveRight$3 = doMove$2(cycleRight$1);\n  var moveNorth$1 = doMove$2(cycleUp$1);\n  var moveSouth$1 = doMove$2(cycleDown$1);\n  var getKeydownRules$4 = constant$1([rule(inSet(LEFT), west(moveLeft$3, moveRight$3)), rule(inSet(RIGHT), east(moveLeft$3, moveRight$3)), rule(inSet(UP), north(moveNorth$1)), rule(inSet(DOWN), south(moveSouth$1)), rule(and([isShift, inSet(TAB)]), handleTab), rule(and([isNotShift, inSet(TAB)]), handleTab), rule(inSet(ESCAPE), doEscape$1), rule(inSet(SPACE.concat(ENTER)), execute$3)]);\n  var getKeyupRules$4 = constant$1([rule(inSet(SPACE), stopEventForFirefox)]);\n  var FlatgridType = typical(schema$e, flatgrid$1, getKeydownRules$4, getKeyupRules$4, function () {\n    return Optional.some(focusIn$3);\n  });\n  var horizontal = function horizontal(container, selector, current, delta) {\n    var isDisabledButton = function isDisabledButton(candidate) {\n      return name$1(candidate) === 'button' && get$b(candidate, 'disabled') === 'disabled';\n    };\n    var tryCycle = function tryCycle(initial, index, candidates) {\n      var newIndex = cycleBy(index, delta, 0, candidates.length - 1);\n      if (newIndex === initial) {\n        return Optional.none();\n      } else {\n        return isDisabledButton(candidates[newIndex]) ? tryCycle(initial, newIndex, candidates) : Optional.from(candidates[newIndex]);\n      }\n    };\n    return locateVisible(container, current, selector).bind(function (identified) {\n      var index = identified.index;\n      var candidates = identified.candidates;\n      return tryCycle(index, index, candidates);\n    });\n  };\n  var schema$d = [required$1('selector'), defaulted('getInitial', Optional.none), defaulted('execute', defaultExecute), onKeyboardHandler('onEscape'), defaulted('executeOnMove', false), defaulted('allowVertical', true)];\n  var findCurrent = function findCurrent(component, flowConfig) {\n    return flowConfig.focusManager.get(component).bind(function (elem) {\n      return closest$1(elem, flowConfig.selector);\n    });\n  };\n  var execute$2 = function execute$2(component, simulatedEvent, flowConfig) {\n    return findCurrent(component, flowConfig).bind(function (focused) {\n      return flowConfig.execute(component, simulatedEvent, focused);\n    });\n  };\n  var focusIn$2 = function focusIn$2(component, flowConfig, _state) {\n    flowConfig.getInitial(component).orThunk(function () {\n      return descendant(component.element, flowConfig.selector);\n    }).each(function (first) {\n      flowConfig.focusManager.set(component, first);\n    });\n  };\n  var moveLeft$2 = function moveLeft$2(element, focused, info) {\n    return horizontal(element, info.selector, focused, -1);\n  };\n  var moveRight$2 = function moveRight$2(element, focused, info) {\n    return horizontal(element, info.selector, focused, +1);\n  };\n  var doMove$1 = function doMove$1(movement) {\n    return function (component, simulatedEvent, flowConfig, flowState) {\n      return movement(component, simulatedEvent, flowConfig, flowState).bind(function () {\n        return flowConfig.executeOnMove ? execute$2(component, simulatedEvent, flowConfig) : Optional.some(true);\n      });\n    };\n  };\n  var doEscape = function doEscape(component, simulatedEvent, flowConfig) {\n    return flowConfig.onEscape(component, simulatedEvent);\n  };\n  var getKeydownRules$3 = function getKeydownRules$3(_component, _se, flowConfig, _flowState) {\n    var westMovers = LEFT.concat(flowConfig.allowVertical ? UP : []);\n    var eastMovers = RIGHT.concat(flowConfig.allowVertical ? DOWN : []);\n    return [rule(inSet(westMovers), doMove$1(west(moveLeft$2, moveRight$2))), rule(inSet(eastMovers), doMove$1(east(moveLeft$2, moveRight$2))), rule(inSet(ENTER), execute$2), rule(inSet(SPACE), execute$2), rule(inSet(ESCAPE), doEscape)];\n  };\n  var getKeyupRules$3 = constant$1([rule(inSet(SPACE), stopEventForFirefox)]);\n  var FlowType = typical(schema$d, NoState.init, getKeydownRules$3, getKeyupRules$3, function () {\n    return Optional.some(focusIn$2);\n  });\n  var toCell = function toCell(matrix, rowIndex, columnIndex) {\n    return Optional.from(matrix[rowIndex]).bind(function (row) {\n      return Optional.from(row[columnIndex]).map(function (cell) {\n        return {\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          cell: cell\n        };\n      });\n    });\n  };\n  var cycleHorizontal = function cycleHorizontal(matrix, rowIndex, startCol, deltaCol) {\n    var row = matrix[rowIndex];\n    var colsInRow = row.length;\n    var newColIndex = cycleBy(startCol, deltaCol, 0, colsInRow - 1);\n    return toCell(matrix, rowIndex, newColIndex);\n  };\n  var cycleVertical = function cycleVertical(matrix, colIndex, startRow, deltaRow) {\n    var nextRowIndex = cycleBy(startRow, deltaRow, 0, matrix.length - 1);\n    var colsInNextRow = matrix[nextRowIndex].length;\n    var nextColIndex = clamp(colIndex, 0, colsInNextRow - 1);\n    return toCell(matrix, nextRowIndex, nextColIndex);\n  };\n  var moveHorizontal = function moveHorizontal(matrix, rowIndex, startCol, deltaCol) {\n    var row = matrix[rowIndex];\n    var colsInRow = row.length;\n    var newColIndex = clamp(startCol + deltaCol, 0, colsInRow - 1);\n    return toCell(matrix, rowIndex, newColIndex);\n  };\n  var moveVertical = function moveVertical(matrix, colIndex, startRow, deltaRow) {\n    var nextRowIndex = clamp(startRow + deltaRow, 0, matrix.length - 1);\n    var colsInNextRow = matrix[nextRowIndex].length;\n    var nextColIndex = clamp(colIndex, 0, colsInNextRow - 1);\n    return toCell(matrix, nextRowIndex, nextColIndex);\n  };\n  var cycleRight = function cycleRight(matrix, startRow, startCol) {\n    return cycleHorizontal(matrix, startRow, startCol, +1);\n  };\n  var cycleLeft = function cycleLeft(matrix, startRow, startCol) {\n    return cycleHorizontal(matrix, startRow, startCol, -1);\n  };\n  var cycleUp = function cycleUp(matrix, startRow, startCol) {\n    return cycleVertical(matrix, startCol, startRow, -1);\n  };\n  var cycleDown = function cycleDown(matrix, startRow, startCol) {\n    return cycleVertical(matrix, startCol, startRow, +1);\n  };\n  var moveLeft$1 = function moveLeft$1(matrix, startRow, startCol) {\n    return moveHorizontal(matrix, startRow, startCol, -1);\n  };\n  var moveRight$1 = function moveRight$1(matrix, startRow, startCol) {\n    return moveHorizontal(matrix, startRow, startCol, +1);\n  };\n  var moveUp$1 = function moveUp$1(matrix, startRow, startCol) {\n    return moveVertical(matrix, startCol, startRow, -1);\n  };\n  var moveDown$1 = function moveDown$1(matrix, startRow, startCol) {\n    return moveVertical(matrix, startCol, startRow, +1);\n  };\n  var schema$c = [requiredObjOf('selectors', [required$1('row'), required$1('cell')]), defaulted('cycles', true), defaulted('previousSelector', Optional.none), defaulted('execute', defaultExecute)];\n  var focusIn$1 = function focusIn$1(component, matrixConfig, _state) {\n    var focused = matrixConfig.previousSelector(component).orThunk(function () {\n      var selectors = matrixConfig.selectors;\n      return descendant(component.element, selectors.cell);\n    });\n    focused.each(function (cell) {\n      matrixConfig.focusManager.set(component, cell);\n    });\n  };\n  var execute$1 = function execute$1(component, simulatedEvent, matrixConfig) {\n    return search(component.element).bind(function (focused) {\n      return matrixConfig.execute(component, simulatedEvent, focused);\n    });\n  };\n  var toMatrix = function toMatrix(rows, matrixConfig) {\n    return map$2(rows, function (row) {\n      return descendants(row, matrixConfig.selectors.cell);\n    });\n  };\n  var doMove = function doMove(ifCycle, ifMove) {\n    return function (element, focused, matrixConfig) {\n      var move = matrixConfig.cycles ? ifCycle : ifMove;\n      return closest$1(focused, matrixConfig.selectors.row).bind(function (inRow) {\n        var cellsInRow = descendants(inRow, matrixConfig.selectors.cell);\n        return findIndex(cellsInRow, focused).bind(function (colIndex) {\n          var allRows = descendants(element, matrixConfig.selectors.row);\n          return findIndex(allRows, inRow).bind(function (rowIndex) {\n            var matrix = toMatrix(allRows, matrixConfig);\n            return move(matrix, rowIndex, colIndex).map(function (next) {\n              return next.cell;\n            });\n          });\n        });\n      });\n    };\n  };\n  var moveLeft = doMove(cycleLeft, moveLeft$1);\n  var moveRight = doMove(cycleRight, moveRight$1);\n  var moveNorth = doMove(cycleUp, moveUp$1);\n  var moveSouth = doMove(cycleDown, moveDown$1);\n  var getKeydownRules$2 = constant$1([rule(inSet(LEFT), west(moveLeft, moveRight)), rule(inSet(RIGHT), east(moveLeft, moveRight)), rule(inSet(UP), north(moveNorth)), rule(inSet(DOWN), south(moveSouth)), rule(inSet(SPACE.concat(ENTER)), execute$1)]);\n  var getKeyupRules$2 = constant$1([rule(inSet(SPACE), stopEventForFirefox)]);\n  var MatrixType = typical(schema$c, NoState.init, getKeydownRules$2, getKeyupRules$2, function () {\n    return Optional.some(focusIn$1);\n  });\n  var schema$b = [required$1('selector'), defaulted('execute', defaultExecute), defaulted('moveOnTab', false)];\n  var execute = function execute(component, simulatedEvent, menuConfig) {\n    return menuConfig.focusManager.get(component).bind(function (focused) {\n      return menuConfig.execute(component, simulatedEvent, focused);\n    });\n  };\n  var focusIn = function focusIn(component, menuConfig, _state) {\n    descendant(component.element, menuConfig.selector).each(function (first) {\n      menuConfig.focusManager.set(component, first);\n    });\n  };\n  var moveUp = function moveUp(element, focused, info) {\n    return horizontal(element, info.selector, focused, -1);\n  };\n  var moveDown = function moveDown(element, focused, info) {\n    return horizontal(element, info.selector, focused, +1);\n  };\n  var fireShiftTab = function fireShiftTab(component, simulatedEvent, menuConfig, menuState) {\n    return menuConfig.moveOnTab ? move$1(moveUp)(component, simulatedEvent, menuConfig, menuState) : Optional.none();\n  };\n  var fireTab = function fireTab(component, simulatedEvent, menuConfig, menuState) {\n    return menuConfig.moveOnTab ? move$1(moveDown)(component, simulatedEvent, menuConfig, menuState) : Optional.none();\n  };\n  var getKeydownRules$1 = constant$1([rule(inSet(UP), move$1(moveUp)), rule(inSet(DOWN), move$1(moveDown)), rule(and([isShift, inSet(TAB)]), fireShiftTab), rule(and([isNotShift, inSet(TAB)]), fireTab), rule(inSet(ENTER), execute), rule(inSet(SPACE), execute)]);\n  var getKeyupRules$1 = constant$1([rule(inSet(SPACE), stopEventForFirefox)]);\n  var MenuType = typical(schema$b, NoState.init, getKeydownRules$1, getKeyupRules$1, function () {\n    return Optional.some(focusIn);\n  });\n  var schema$a = [onKeyboardHandler('onSpace'), onKeyboardHandler('onEnter'), onKeyboardHandler('onShiftEnter'), onKeyboardHandler('onLeft'), onKeyboardHandler('onRight'), onKeyboardHandler('onTab'), onKeyboardHandler('onShiftTab'), onKeyboardHandler('onUp'), onKeyboardHandler('onDown'), onKeyboardHandler('onEscape'), defaulted('stopSpaceKeyup', false), option('focusIn')];\n  var getKeydownRules = function getKeydownRules(component, simulatedEvent, specialInfo) {\n    return [rule(inSet(SPACE), specialInfo.onSpace), rule(and([isNotShift, inSet(ENTER)]), specialInfo.onEnter), rule(and([isShift, inSet(ENTER)]), specialInfo.onShiftEnter), rule(and([isShift, inSet(TAB)]), specialInfo.onShiftTab), rule(and([isNotShift, inSet(TAB)]), specialInfo.onTab), rule(inSet(UP), specialInfo.onUp), rule(inSet(DOWN), specialInfo.onDown), rule(inSet(LEFT), specialInfo.onLeft), rule(inSet(RIGHT), specialInfo.onRight), rule(inSet(SPACE), specialInfo.onSpace), rule(inSet(ESCAPE), specialInfo.onEscape)];\n  };\n  var getKeyupRules = function getKeyupRules(component, simulatedEvent, specialInfo) {\n    return specialInfo.stopSpaceKeyup ? [rule(inSet(SPACE), stopEventForFirefox)] : [];\n  };\n  var SpecialType = typical(schema$a, NoState.init, getKeydownRules, getKeyupRules, function (specialInfo) {\n    return specialInfo.focusIn;\n  });\n  var acyclic = AcyclicType.schema();\n  var cyclic = CyclicType.schema();\n  var flow = FlowType.schema();\n  var flatgrid = FlatgridType.schema();\n  var matrix = MatrixType.schema();\n  var execution = ExecutionType.schema();\n  var menu = MenuType.schema();\n  var special = SpecialType.schema();\n  var KeyboardBranches = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    acyclic: acyclic,\n    cyclic: cyclic,\n    flow: flow,\n    flatgrid: flatgrid,\n    matrix: matrix,\n    execution: execution,\n    menu: menu,\n    special: special\n  });\n  var isFlatgridState = function isFlatgridState(keyState) {\n    return hasNonNullableKey(keyState, 'setGridSize');\n  };\n  var Keying = createModes({\n    branchKey: 'mode',\n    branches: KeyboardBranches,\n    name: 'keying',\n    active: {\n      events: function events(keyingConfig, keyingState) {\n        var handler = keyingConfig.handler;\n        return handler.toEvents(keyingConfig, keyingState);\n      }\n    },\n    apis: {\n      focusIn: function focusIn(component, keyConfig, keyState) {\n        keyConfig.sendFocusIn(keyConfig).fold(function () {\n          component.getSystem().triggerFocus(component.element, component.element);\n        }, function (sendFocusIn) {\n          sendFocusIn(component, keyConfig, keyState);\n        });\n      },\n      setGridSize: function setGridSize(component, keyConfig, keyState, numRows, numColumns) {\n        if (!isFlatgridState(keyState)) {\n          console.error('Layout does not support setGridSize');\n        } else {\n          keyState.setGridSize(numRows, numColumns);\n        }\n      }\n    },\n    state: KeyingState\n  });\n  var field$1 = function field$1(name, forbidden) {\n    return defaultedObjOf(name, {}, map$2(forbidden, function (f) {\n      return forbid(f.name(), 'Cannot configure ' + f.name() + ' for ' + name);\n    }).concat([customField('dump', identity)]));\n  };\n  var get$6 = function get$6(data) {\n    return data.dump;\n  };\n  var augment = function augment(data, original) {\n    return _assign(_assign({}, derive$2(original)), data.dump);\n  };\n  var SketchBehaviours = {\n    field: field$1,\n    augment: augment,\n    get: get$6\n  };\n  var _placeholder = 'placeholder';\n  var adt$5 = Adt.generate([{\n    single: ['required', 'valueThunk']\n  }, {\n    multiple: ['required', 'valueThunks']\n  }]);\n  var isSubstituted = function isSubstituted(spec) {\n    return has$2(spec, 'uiType');\n  };\n  var subPlaceholder = function subPlaceholder(owner, detail, compSpec, placeholders) {\n    if (owner.exists(function (o) {\n      return o !== compSpec.owner;\n    })) {\n      return adt$5.single(true, constant$1(compSpec));\n    }\n    return get$c(placeholders, compSpec.name).fold(function () {\n      throw new Error('Unknown placeholder component: ' + compSpec.name + '\\nKnown: [' + keys(placeholders) + ']\\nNamespace: ' + owner.getOr('none') + '\\nSpec: ' + JSON.stringify(compSpec, null, 2));\n    }, function (newSpec) {\n      return newSpec.replace();\n    });\n  };\n  var scan = function scan(owner, detail, compSpec, placeholders) {\n    if (isSubstituted(compSpec) && compSpec.uiType === _placeholder) {\n      return subPlaceholder(owner, detail, compSpec, placeholders);\n    } else {\n      return adt$5.single(false, constant$1(compSpec));\n    }\n  };\n  var substitute = function substitute(owner, detail, compSpec, placeholders) {\n    var base = scan(owner, detail, compSpec, placeholders);\n    return base.fold(function (req, valueThunk) {\n      var value = isSubstituted(compSpec) ? valueThunk(detail, compSpec.config, compSpec.validated) : valueThunk(detail);\n      var childSpecs = get$c(value, 'components').getOr([]);\n      var substituted = bind$3(childSpecs, function (c) {\n        return substitute(owner, detail, c, placeholders);\n      });\n      return [_assign(_assign({}, value), {\n        components: substituted\n      })];\n    }, function (req, valuesThunk) {\n      if (isSubstituted(compSpec)) {\n        var values = valuesThunk(detail, compSpec.config, compSpec.validated);\n        var preprocessor = compSpec.validated.preprocess.getOr(identity);\n        return preprocessor(values);\n      } else {\n        return valuesThunk(detail);\n      }\n    });\n  };\n  var substituteAll = function substituteAll(owner, detail, components, placeholders) {\n    return bind$3(components, function (c) {\n      return substitute(owner, detail, c, placeholders);\n    });\n  };\n  var oneReplace = function oneReplace(label, replacements) {\n    var called = false;\n    var used = function used() {\n      return called;\n    };\n    var replace = function replace() {\n      if (called) {\n        throw new Error('Trying to use the same placeholder more than once: ' + label);\n      }\n      called = true;\n      return replacements;\n    };\n    var required = function required() {\n      return replacements.fold(function (req, _) {\n        return req;\n      }, function (req, _) {\n        return req;\n      });\n    };\n    return {\n      name: constant$1(label),\n      required: required,\n      used: used,\n      replace: replace\n    };\n  };\n  var substitutePlaces = function substitutePlaces(owner, detail, components, placeholders) {\n    var ps = map$1(placeholders, function (ph, name) {\n      return oneReplace(name, ph);\n    });\n    var outcome = substituteAll(owner, detail, components, ps);\n    each(ps, function (p) {\n      if (p.used() === false && p.required()) {\n        throw new Error('Placeholder: ' + p.name() + ' was not found in components list\\nNamespace: ' + owner.getOr('none') + '\\nComponents: ' + JSON.stringify(detail.components, null, 2));\n      }\n    });\n    return outcome;\n  };\n  var single$2 = adt$5.single;\n  var multiple = adt$5.multiple;\n  var placeholder = constant$1(_placeholder);\n  var unique = 0;\n  var generate$4 = function generate$4(prefix) {\n    var date = new Date();\n    var time = date.getTime();\n    var random = Math.floor(Math.random() * 1000000000);\n    unique++;\n    return prefix + '_' + random + unique + String(time);\n  };\n  var adt$4 = Adt.generate([{\n    required: ['data']\n  }, {\n    external: ['data']\n  }, {\n    optional: ['data']\n  }, {\n    group: ['data']\n  }]);\n  var fFactory = defaulted('factory', {\n    sketch: identity\n  });\n  var fSchema = defaulted('schema', []);\n  var fName = required$1('name');\n  var fPname = field$2('pname', 'pname', defaultedThunk(function (typeSpec) {\n    return '<alloy.' + generate$4(typeSpec.name) + '>';\n  }), anyValue());\n  var fGroupSchema = customField('schema', function () {\n    return [option('preprocess')];\n  });\n  var fDefaults = defaulted('defaults', constant$1({}));\n  var fOverrides = defaulted('overrides', constant$1({}));\n  var requiredSpec = objOf([fFactory, fSchema, fName, fPname, fDefaults, fOverrides]);\n  var externalSpec = objOf([fFactory, fSchema, fName, fDefaults, fOverrides]);\n  var optionalSpec = objOf([fFactory, fSchema, fName, fPname, fDefaults, fOverrides]);\n  var groupSpec = objOf([fFactory, fGroupSchema, fName, required$1('unit'), fPname, fDefaults, fOverrides]);\n  var asNamedPart = function asNamedPart(part) {\n    return part.fold(Optional.some, Optional.none, Optional.some, Optional.some);\n  };\n  var name = function name(part) {\n    var get = function get(data) {\n      return data.name;\n    };\n    return part.fold(get, get, get, get);\n  };\n  var convert$1 = function convert$1(adtConstructor, partSchema) {\n    return function (spec) {\n      var data = asRawOrDie$1('Converting part type', partSchema, spec);\n      return adtConstructor(data);\n    };\n  };\n  var required = convert$1(adt$4.required, requiredSpec);\n  convert$1(adt$4.external, externalSpec);\n  var optional = convert$1(adt$4.optional, optionalSpec);\n  var group = convert$1(adt$4.group, groupSpec);\n  var original = constant$1('entirety');\n  var combine$2 = function combine$2(detail, data, partSpec, partValidated) {\n    return deepMerge(data.defaults(detail, partSpec, partValidated), partSpec, {\n      uid: detail.partUids[data.name]\n    }, data.overrides(detail, partSpec, partValidated));\n  };\n  var subs = function subs(owner, detail, parts) {\n    var internals = {};\n    var externals = {};\n    each$1(parts, function (part) {\n      part.fold(function (data) {\n        internals[data.pname] = single$2(true, function (detail, partSpec, partValidated) {\n          return data.factory.sketch(combine$2(detail, data, partSpec, partValidated));\n        });\n      }, function (data) {\n        var partSpec = detail.parts[data.name];\n        externals[data.name] = constant$1(data.factory.sketch(combine$2(detail, data, partSpec[original()]), partSpec));\n      }, function (data) {\n        internals[data.pname] = single$2(false, function (detail, partSpec, partValidated) {\n          return data.factory.sketch(combine$2(detail, data, partSpec, partValidated));\n        });\n      }, function (data) {\n        internals[data.pname] = multiple(true, function (detail, _partSpec, _partValidated) {\n          var units = detail[data.name];\n          return map$2(units, function (u) {\n            return data.factory.sketch(deepMerge(data.defaults(detail, u, _partValidated), u, data.overrides(detail, u)));\n          });\n        });\n      });\n    });\n    return {\n      internals: constant$1(internals),\n      externals: constant$1(externals)\n    };\n  };\n  var generate$3 = function generate$3(owner, parts) {\n    var r = {};\n    each$1(parts, function (part) {\n      asNamedPart(part).each(function (np) {\n        var g = doGenerateOne(owner, np.pname);\n        r[np.name] = function (config) {\n          var validated = asRawOrDie$1('Part: ' + np.name + ' in ' + owner, objOf(np.schema), config);\n          return _assign(_assign({}, g), {\n            config: config,\n            validated: validated\n          });\n        };\n      });\n    });\n    return r;\n  };\n  var doGenerateOne = function doGenerateOne(owner, pname) {\n    return {\n      uiType: placeholder(),\n      owner: owner,\n      name: pname\n    };\n  };\n  var generateOne = function generateOne(owner, pname, config) {\n    return {\n      uiType: placeholder(),\n      owner: owner,\n      name: pname,\n      config: config,\n      validated: {}\n    };\n  };\n  var schemas = function schemas(parts) {\n    return bind$3(parts, function (part) {\n      return part.fold(Optional.none, Optional.some, Optional.none, Optional.none).map(function (data) {\n        return requiredObjOf(data.name, data.schema.concat([snapshot(original())]));\n      }).toArray();\n    });\n  };\n  var names = function names(parts) {\n    return map$2(parts, name);\n  };\n  var substitutes = function substitutes(owner, detail, parts) {\n    return subs(owner, detail, parts);\n  };\n  var components = function components(owner, detail, internals) {\n    return substitutePlaces(Optional.some(owner), detail, detail.components, internals);\n  };\n  var getPart = function getPart(component, detail, partKey) {\n    var uid = detail.partUids[partKey];\n    return component.getSystem().getByUid(uid).toOptional();\n  };\n  var getPartOrDie = function getPartOrDie(component, detail, partKey) {\n    return getPart(component, detail, partKey).getOrDie('Could not find part: ' + partKey);\n  };\n  var getAllParts = function getAllParts(component, detail) {\n    var system = component.getSystem();\n    return map$1(detail.partUids, function (pUid, _k) {\n      return constant$1(system.getByUid(pUid));\n    });\n  };\n  var defaultUids = function defaultUids(baseUid, partTypes) {\n    var partNames = names(partTypes);\n    return wrapAll(map$2(partNames, function (pn) {\n      return {\n        key: pn,\n        value: baseUid + '-' + pn\n      };\n    }));\n  };\n  var defaultUidsSchema = function defaultUidsSchema(partTypes) {\n    return field$2('partUids', 'partUids', mergeWithThunk(function (spec) {\n      return defaultUids(spec.uid, partTypes);\n    }), anyValue());\n  };\n  var premadeTag = generate$4('alloy-premade');\n  var premade$1 = function premade$1(comp) {\n    return wrap(premadeTag, comp);\n  };\n  var getPremade = function getPremade(spec) {\n    return get$c(spec, premadeTag);\n  };\n  var makeApi = function makeApi(f) {\n    return markAsSketchApi(function (component) {\n      var rest = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n        rest[_i - 1] = arguments[_i];\n      }\n      return f.apply(void 0, __spreadArray([component.getApis(), component], rest, false));\n    }, f);\n  };\n  var prefix$1 = constant$1('alloy-id-');\n  var idAttr$1 = constant$1('data-alloy-id');\n  var prefix = prefix$1();\n  var idAttr = idAttr$1();\n  var write = function write(label, elem) {\n    var id = generate$4(prefix + label);\n    writeOnly(elem, id);\n    return id;\n  };\n  var writeOnly = function writeOnly(elem, uid) {\n    Object.defineProperty(elem.dom, idAttr, {\n      value: uid,\n      writable: true\n    });\n  };\n  var read = function read(elem) {\n    var id = isElement(elem) ? elem.dom[idAttr] : null;\n    return Optional.from(id);\n  };\n  var generate$2 = function generate$2(prefix) {\n    return generate$4(prefix);\n  };\n  var base = function base(partSchemas, partUidsSchemas) {\n    var ps = partSchemas.length > 0 ? [requiredObjOf('parts', partSchemas)] : [];\n    return ps.concat([required$1('uid'), defaulted('dom', {}), defaulted('components', []), snapshot('originalSpec'), defaulted('debug.sketcher', {})]).concat(partUidsSchemas);\n  };\n  var asRawOrDie = function asRawOrDie(label, schema, spec, partSchemas, partUidsSchemas) {\n    var baseS = base(partSchemas, partUidsSchemas);\n    return asRawOrDie$1(label + ' [SpecSchema]', objOfOnly(baseS.concat(schema)), spec);\n  };\n  var single$1 = function single$1(owner, schema, factory, spec) {\n    var specWithUid = supplyUid(spec);\n    var detail = asRawOrDie(owner, schema, specWithUid, [], []);\n    return factory(detail, specWithUid);\n  };\n  var composite$1 = function composite$1(owner, schema, partTypes, factory, spec) {\n    var specWithUid = supplyUid(spec);\n    var partSchemas = schemas(partTypes);\n    var partUidsSchema = defaultUidsSchema(partTypes);\n    var detail = asRawOrDie(owner, schema, specWithUid, partSchemas, [partUidsSchema]);\n    var subs = substitutes(owner, detail, partTypes);\n    var components$1 = components(owner, detail, subs.internals());\n    return factory(detail, components$1, specWithUid, subs.externals());\n  };\n  var hasUid = function hasUid(spec) {\n    return has$2(spec, 'uid');\n  };\n  var supplyUid = function supplyUid(spec) {\n    return hasUid(spec) ? spec : _assign(_assign({}, spec), {\n      uid: generate$2('uid')\n    });\n  };\n  var isSketchSpec$1 = function isSketchSpec$1(spec) {\n    return spec.uid !== undefined;\n  };\n  var singleSchema = objOfOnly([required$1('name'), required$1('factory'), required$1('configFields'), defaulted('apis', {}), defaulted('extraApis', {})]);\n  var compositeSchema = objOfOnly([required$1('name'), required$1('factory'), required$1('configFields'), required$1('partFields'), defaulted('apis', {}), defaulted('extraApis', {})]);\n  var single = function single(rawConfig) {\n    var config = asRawOrDie$1('Sketcher for ' + rawConfig.name, singleSchema, rawConfig);\n    var sketch = function sketch(spec) {\n      return single$1(config.name, config.configFields, config.factory, spec);\n    };\n    var apis = map$1(config.apis, makeApi);\n    var extraApis = map$1(config.extraApis, function (f, k) {\n      return markAsExtraApi(f, k);\n    });\n    return _assign(_assign({\n      name: config.name,\n      configFields: config.configFields,\n      sketch: sketch\n    }, apis), extraApis);\n  };\n  var composite = function composite(rawConfig) {\n    var config = asRawOrDie$1('Sketcher for ' + rawConfig.name, compositeSchema, rawConfig);\n    var sketch = function sketch(spec) {\n      return composite$1(config.name, config.configFields, config.partFields, config.factory, spec);\n    };\n    var parts = generate$3(config.name, config.partFields);\n    var apis = map$1(config.apis, makeApi);\n    var extraApis = map$1(config.extraApis, function (f, k) {\n      return markAsExtraApi(f, k);\n    });\n    return _assign(_assign({\n      name: config.name,\n      partFields: config.partFields,\n      configFields: config.configFields,\n      sketch: sketch,\n      parts: parts\n    }, apis), extraApis);\n  };\n  var factory$5 = function factory$5(detail) {\n    var events = events$8(detail.action);\n    var tag = detail.dom.tag;\n    var lookupAttr = function lookupAttr(attr) {\n      return get$c(detail.dom, 'attributes').bind(function (attrs) {\n        return get$c(attrs, attr);\n      });\n    };\n    var getModAttributes = function getModAttributes() {\n      if (tag === 'button') {\n        var type = lookupAttr('type').getOr('button');\n        var roleAttrs = lookupAttr('role').map(function (role) {\n          return {\n            role: role\n          };\n        }).getOr({});\n        return _assign({\n          type: type\n        }, roleAttrs);\n      } else {\n        var role = lookupAttr('role').getOr('button');\n        return {\n          role: role\n        };\n      }\n    };\n    return {\n      uid: detail.uid,\n      dom: detail.dom,\n      components: detail.components,\n      events: events,\n      behaviours: SketchBehaviours.augment(detail.buttonBehaviours, [Focusing.config({}), Keying.config({\n        mode: 'execution',\n        useSpace: true,\n        useEnter: true\n      })]),\n      domModification: {\n        attributes: getModAttributes()\n      },\n      eventOrder: detail.eventOrder\n    };\n  };\n  var Button = single({\n    name: 'Button',\n    factory: factory$5,\n    configFields: [defaulted('uid', undefined), required$1('dom'), defaulted('components', []), SketchBehaviours.field('buttonBehaviours', [Focusing, Keying]), option('action'), option('role'), defaulted('eventOrder', {})]\n  });\n  var exhibit$3 = function exhibit$3() {\n    return nu$3({\n      styles: {\n        '-webkit-user-select': 'none',\n        'user-select': 'none',\n        '-ms-user-select': 'none',\n        '-moz-user-select': '-moz-none'\n      },\n      attributes: {\n        unselectable: 'on'\n      }\n    });\n  };\n  var events$6 = function events$6() {\n    return derive$3([abort(selectstart(), always)]);\n  };\n  var ActiveUnselecting = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    events: events$6,\n    exhibit: exhibit$3\n  });\n  var Unselecting = create$5({\n    fields: [],\n    name: 'unselecting',\n    active: ActiveUnselecting\n  });\n  var getAttrs$1 = function getAttrs$1(elem) {\n    var attributes = elem.dom.attributes !== undefined ? elem.dom.attributes : [];\n    return foldl(attributes, function (b, attr) {\n      var _a;\n      if (attr.name === 'class') {\n        return b;\n      } else {\n        return _assign(_assign({}, b), (_a = {}, _a[attr.name] = attr.value, _a));\n      }\n    }, {});\n  };\n  var getClasses = function getClasses(elem) {\n    return Array.prototype.slice.call(elem.dom.classList, 0);\n  };\n  var fromHtml = function fromHtml(html) {\n    var elem = SugarElement.fromHtml(html);\n    var children$1 = children(elem);\n    var attrs = getAttrs$1(elem);\n    var classes = getClasses(elem);\n    var contents = children$1.length === 0 ? {} : {\n      innerHtml: get$9(elem)\n    };\n    return _assign({\n      tag: name$1(elem),\n      classes: classes,\n      attributes: attrs\n    }, contents);\n  };\n  var dom$1 = function dom$1(rawHtml) {\n    var html = supplant(rawHtml, {\n      prefix: prefix$2\n    });\n    return fromHtml(html);\n  };\n  var spec = function spec(rawHtml) {\n    return {\n      dom: dom$1(rawHtml)\n    };\n  };\n  var forToolbarCommand = function forToolbarCommand(editor, command) {\n    return forToolbar(command, function () {\n      editor.execCommand(command);\n    }, {}, editor);\n  };\n  var getToggleBehaviours = function getToggleBehaviours(command) {\n    return derive$2([Toggling.config({\n      toggleClass: resolve('toolbar-button-selected'),\n      toggleOnExecute: false,\n      aria: {\n        mode: 'pressed'\n      }\n    }), format(command, function (button, status) {\n      var toggle = status ? Toggling.on : Toggling.off;\n      toggle(button);\n    })]);\n  };\n  var forToolbarStateCommand = function forToolbarStateCommand(editor, command) {\n    var extraBehaviours = getToggleBehaviours(command);\n    return forToolbar(command, function () {\n      editor.execCommand(command);\n    }, extraBehaviours, editor);\n  };\n  var forToolbarStateAction = function forToolbarStateAction(editor, clazz, command, action) {\n    var extraBehaviours = getToggleBehaviours(command);\n    return forToolbar(clazz, action, extraBehaviours, editor);\n  };\n  var getToolbarIconButton = function getToolbarIconButton(clazz, editor) {\n    var icons = editor.ui.registry.getAll().icons;\n    var optOxideIcon = Optional.from(icons[clazz]);\n    return optOxideIcon.fold(function () {\n      return dom$1('<span class=\"${prefix}-toolbar-button ${prefix}-toolbar-group-item ${prefix}-icon-' + clazz + ' ${prefix}-icon\"></span>');\n    }, function (icon) {\n      return dom$1('<span class=\"${prefix}-toolbar-button ${prefix}-toolbar-group-item\">' + icon + '</span>');\n    });\n  };\n  var forToolbar = function forToolbar(clazz, action, extraBehaviours, editor) {\n    return Button.sketch({\n      dom: getToolbarIconButton(clazz, editor),\n      action: action,\n      buttonBehaviours: deepMerge(derive$2([Unselecting.config({})]), extraBehaviours)\n    });\n  };\n  var labelPart = optional({\n    schema: [required$1('dom')],\n    name: 'label'\n  });\n  var edgePart = function edgePart(name) {\n    return optional({\n      name: '' + name + '-edge',\n      overrides: function overrides(detail) {\n        var action = detail.model.manager.edgeActions[name];\n        return action.fold(function () {\n          return {};\n        }, function (a) {\n          return {\n            events: derive$3([runActionExtra(touchstart(), function (comp, se, d) {\n              return a(comp, d);\n            }, [detail]), runActionExtra(mousedown(), function (comp, se, d) {\n              return a(comp, d);\n            }, [detail]), runActionExtra(mousemove(), function (comp, se, det) {\n              if (det.mouseIsDown.get()) {\n                a(comp, det);\n              }\n            }, [detail])])\n          };\n        });\n      }\n    });\n  };\n  var tlEdgePart = edgePart('top-left');\n  var tedgePart = edgePart('top');\n  var trEdgePart = edgePart('top-right');\n  var redgePart = edgePart('right');\n  var brEdgePart = edgePart('bottom-right');\n  var bedgePart = edgePart('bottom');\n  var blEdgePart = edgePart('bottom-left');\n  var ledgePart = edgePart('left');\n  var thumbPart = required({\n    name: 'thumb',\n    defaults: constant$1({\n      dom: {\n        styles: {\n          position: 'absolute'\n        }\n      }\n    }),\n    overrides: function overrides(detail) {\n      return {\n        events: derive$3([redirectToPart(touchstart(), detail, 'spectrum'), redirectToPart(touchmove(), detail, 'spectrum'), redirectToPart(touchend(), detail, 'spectrum'), redirectToPart(mousedown(), detail, 'spectrum'), redirectToPart(mousemove(), detail, 'spectrum'), redirectToPart(mouseup(), detail, 'spectrum')])\n      };\n    }\n  });\n  var spectrumPart = required({\n    schema: [customField('mouseIsDown', function () {\n      return Cell(false);\n    })],\n    name: 'spectrum',\n    overrides: function overrides(detail) {\n      var modelDetail = detail.model;\n      var model = modelDetail.manager;\n      var setValueFrom = function setValueFrom(component, simulatedEvent) {\n        return model.getValueFromEvent(simulatedEvent).map(function (value) {\n          return model.setValueFrom(component, detail, value);\n        });\n      };\n      return {\n        behaviours: derive$2([Keying.config({\n          mode: 'special',\n          onLeft: function onLeft(spectrum) {\n            return model.onLeft(spectrum, detail);\n          },\n          onRight: function onRight(spectrum) {\n            return model.onRight(spectrum, detail);\n          },\n          onUp: function onUp(spectrum) {\n            return model.onUp(spectrum, detail);\n          },\n          onDown: function onDown(spectrum) {\n            return model.onDown(spectrum, detail);\n          }\n        }), Focusing.config({})]),\n        events: derive$3([run(touchstart(), setValueFrom), run(touchmove(), setValueFrom), run(mousedown(), setValueFrom), run(mousemove(), function (spectrum, se) {\n          if (detail.mouseIsDown.get()) {\n            setValueFrom(spectrum, se);\n          }\n        })])\n      };\n    }\n  });\n  var SliderParts = [labelPart, ledgePart, redgePart, tedgePart, bedgePart, tlEdgePart, trEdgePart, blEdgePart, brEdgePart, thumbPart, spectrumPart];\n  var onLoad$4 = function onLoad$4(component, repConfig, repState) {\n    repConfig.store.manager.onLoad(component, repConfig, repState);\n  };\n  var onUnload$2 = function onUnload$2(component, repConfig, repState) {\n    repConfig.store.manager.onUnload(component, repConfig, repState);\n  };\n  var setValue$3 = function setValue$3(component, repConfig, repState, data) {\n    repConfig.store.manager.setValue(component, repConfig, repState, data);\n  };\n  var getValue$4 = function getValue$4(component, repConfig, repState) {\n    return repConfig.store.manager.getValue(component, repConfig, repState);\n  };\n  var getState$1 = function getState$1(component, repConfig, repState) {\n    return repState;\n  };\n  var RepresentApis = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    onLoad: onLoad$4,\n    onUnload: onUnload$2,\n    setValue: setValue$3,\n    getValue: getValue$4,\n    getState: getState$1\n  });\n  var events$5 = function events$5(repConfig, repState) {\n    var es = repConfig.resetOnDom ? [runOnAttached(function (comp, _se) {\n      onLoad$4(comp, repConfig, repState);\n    }), runOnDetached(function (comp, _se) {\n      onUnload$2(comp, repConfig, repState);\n    })] : [loadEvent(repConfig, repState, onLoad$4)];\n    return derive$3(es);\n  };\n  var ActiveRepresenting = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    events: events$5\n  });\n  var memory = function memory() {\n    var data = Cell(null);\n    var readState = function readState() {\n      return {\n        mode: 'memory',\n        value: data.get()\n      };\n    };\n    var isNotSet = function isNotSet() {\n      return data.get() === null;\n    };\n    var clear = function clear() {\n      data.set(null);\n    };\n    return nu$2({\n      set: data.set,\n      get: data.get,\n      isNotSet: isNotSet,\n      clear: clear,\n      readState: readState\n    });\n  };\n  var manual = function manual() {\n    var readState = noop;\n    return nu$2({\n      readState: readState\n    });\n  };\n  var dataset = function dataset() {\n    var dataByValue = Cell({});\n    var dataByText = Cell({});\n    var readState = function readState() {\n      return {\n        mode: 'dataset',\n        dataByValue: dataByValue.get(),\n        dataByText: dataByText.get()\n      };\n    };\n    var clear = function clear() {\n      dataByValue.set({});\n      dataByText.set({});\n    };\n    var lookup = function lookup(itemString) {\n      return get$c(dataByValue.get(), itemString).orThunk(function () {\n        return get$c(dataByText.get(), itemString);\n      });\n    };\n    var update = function update(items) {\n      var currentDataByValue = dataByValue.get();\n      var currentDataByText = dataByText.get();\n      var newDataByValue = {};\n      var newDataByText = {};\n      each$1(items, function (item) {\n        newDataByValue[item.value] = item;\n        get$c(item, 'meta').each(function (meta) {\n          get$c(meta, 'text').each(function (text) {\n            newDataByText[text] = item;\n          });\n        });\n      });\n      dataByValue.set(_assign(_assign({}, currentDataByValue), newDataByValue));\n      dataByText.set(_assign(_assign({}, currentDataByText), newDataByText));\n    };\n    return nu$2({\n      readState: readState,\n      lookup: lookup,\n      update: update,\n      clear: clear\n    });\n  };\n  var init$4 = function init$4(spec) {\n    return spec.store.manager.state(spec);\n  };\n  var RepresentState = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    memory: memory,\n    dataset: dataset,\n    manual: manual,\n    init: init$4\n  });\n  var setValue$2 = function setValue$2(component, repConfig, repState, data) {\n    var store = repConfig.store;\n    repState.update([data]);\n    store.setValue(component, data);\n    repConfig.onSetValue(component, data);\n  };\n  var getValue$3 = function getValue$3(component, repConfig, repState) {\n    var store = repConfig.store;\n    var key = store.getDataKey(component);\n    return repState.lookup(key).getOrThunk(function () {\n      return store.getFallbackEntry(key);\n    });\n  };\n  var onLoad$3 = function onLoad$3(component, repConfig, repState) {\n    var store = repConfig.store;\n    store.initialValue.each(function (data) {\n      setValue$2(component, repConfig, repState, data);\n    });\n  };\n  var onUnload$1 = function onUnload$1(component, repConfig, repState) {\n    repState.clear();\n  };\n  var DatasetStore = [option('initialValue'), required$1('getFallbackEntry'), required$1('getDataKey'), required$1('setValue'), output('manager', {\n    setValue: setValue$2,\n    getValue: getValue$3,\n    onLoad: onLoad$3,\n    onUnload: onUnload$1,\n    state: dataset\n  })];\n  var getValue$2 = function getValue$2(component, repConfig, _repState) {\n    return repConfig.store.getValue(component);\n  };\n  var setValue$1 = function setValue$1(component, repConfig, _repState, data) {\n    repConfig.store.setValue(component, data);\n    repConfig.onSetValue(component, data);\n  };\n  var onLoad$2 = function onLoad$2(component, repConfig, _repState) {\n    repConfig.store.initialValue.each(function (data) {\n      repConfig.store.setValue(component, data);\n    });\n  };\n  var ManualStore = [required$1('getValue'), defaulted('setValue', noop), option('initialValue'), output('manager', {\n    setValue: setValue$1,\n    getValue: getValue$2,\n    onLoad: onLoad$2,\n    onUnload: noop,\n    state: NoState.init\n  })];\n  var setValue = function setValue(component, repConfig, repState, data) {\n    repState.set(data);\n    repConfig.onSetValue(component, data);\n  };\n  var getValue$1 = function getValue$1(component, repConfig, repState) {\n    return repState.get();\n  };\n  var onLoad$1 = function onLoad$1(component, repConfig, repState) {\n    repConfig.store.initialValue.each(function (initVal) {\n      if (repState.isNotSet()) {\n        repState.set(initVal);\n      }\n    });\n  };\n  var onUnload = function onUnload(component, repConfig, repState) {\n    repState.clear();\n  };\n  var MemoryStore = [option('initialValue'), output('manager', {\n    setValue: setValue,\n    getValue: getValue$1,\n    onLoad: onLoad$1,\n    onUnload: onUnload,\n    state: memory\n  })];\n  var RepresentSchema = [defaultedOf('store', {\n    mode: 'memory'\n  }, choose$1('mode', {\n    memory: MemoryStore,\n    manual: ManualStore,\n    dataset: DatasetStore\n  })), onHandler('onSetValue'), defaulted('resetOnDom', false)];\n  var Representing = create$5({\n    fields: RepresentSchema,\n    name: 'representing',\n    active: ActiveRepresenting,\n    apis: RepresentApis,\n    extra: {\n      setValueFrom: function setValueFrom(component, source) {\n        var value = Representing.getValue(source);\n        Representing.setValue(component, value);\n      }\n    },\n    state: RepresentState\n  });\n  var api$1 = Dimension('width', function (element) {\n    return element.dom.offsetWidth;\n  });\n  var set$4 = function set$4(element, h) {\n    return api$1.set(element, h);\n  };\n  var get$5 = function get$5(element) {\n    return api$1.get(element);\n  };\n  var r$1 = function r$1(left, top) {\n    var translate = function translate(x, y) {\n      return r$1(left + x, top + y);\n    };\n    return {\n      left: left,\n      top: top,\n      translate: translate\n    };\n  };\n  var SugarPosition = r$1;\n  var _sliderChangeEvent = 'slider.change.value';\n  var sliderChangeEvent = constant$1(_sliderChangeEvent);\n  var isTouchEvent = function isTouchEvent(evt) {\n    return evt.type.indexOf('touch') !== -1;\n  };\n  var getEventSource = function getEventSource(simulatedEvent) {\n    var evt = simulatedEvent.event.raw;\n    if (isTouchEvent(evt)) {\n      var touchEvent = evt;\n      return touchEvent.touches !== undefined && touchEvent.touches.length === 1 ? Optional.some(touchEvent.touches[0]).map(function (t) {\n        return SugarPosition(t.clientX, t.clientY);\n      }) : Optional.none();\n    } else {\n      var mouseEvent = evt;\n      return mouseEvent.clientX !== undefined ? Optional.some(mouseEvent).map(function (me) {\n        return SugarPosition(me.clientX, me.clientY);\n      }) : Optional.none();\n    }\n  };\n  var t = 'top',\n    r = 'right',\n    b = 'bottom',\n    l = 'left';\n  var minX = function minX(detail) {\n    return detail.model.minX;\n  };\n  var minY = function minY(detail) {\n    return detail.model.minY;\n  };\n  var min1X = function min1X(detail) {\n    return detail.model.minX - 1;\n  };\n  var min1Y = function min1Y(detail) {\n    return detail.model.minY - 1;\n  };\n  var maxX = function maxX(detail) {\n    return detail.model.maxX;\n  };\n  var maxY = function maxY(detail) {\n    return detail.model.maxY;\n  };\n  var max1X = function max1X(detail) {\n    return detail.model.maxX + 1;\n  };\n  var max1Y = function max1Y(detail) {\n    return detail.model.maxY + 1;\n  };\n  var range$1 = function range$1(detail, max, min) {\n    return max(detail) - min(detail);\n  };\n  var xRange = function xRange(detail) {\n    return range$1(detail, maxX, minX);\n  };\n  var yRange = function yRange(detail) {\n    return range$1(detail, maxY, minY);\n  };\n  var halfX = function halfX(detail) {\n    return xRange(detail) / 2;\n  };\n  var halfY = function halfY(detail) {\n    return yRange(detail) / 2;\n  };\n  var step = function step(detail) {\n    return detail.stepSize;\n  };\n  var snap = function snap(detail) {\n    return detail.snapToGrid;\n  };\n  var snapStart = function snapStart(detail) {\n    return detail.snapStart;\n  };\n  var rounded = function rounded(detail) {\n    return detail.rounded;\n  };\n  var hasEdge = function hasEdge(detail, edgeName) {\n    return detail[edgeName + '-edge'] !== undefined;\n  };\n  var hasLEdge = function hasLEdge(detail) {\n    return hasEdge(detail, l);\n  };\n  var hasREdge = function hasREdge(detail) {\n    return hasEdge(detail, r);\n  };\n  var hasTEdge = function hasTEdge(detail) {\n    return hasEdge(detail, t);\n  };\n  var hasBEdge = function hasBEdge(detail) {\n    return hasEdge(detail, b);\n  };\n  var currentValue = function currentValue(detail) {\n    return detail.model.value.get();\n  };\n  var xValue = function xValue(x) {\n    return {\n      x: x\n    };\n  };\n  var yValue = function yValue(y) {\n    return {\n      y: y\n    };\n  };\n  var xyValue = function xyValue(x, y) {\n    return {\n      x: x,\n      y: y\n    };\n  };\n  var fireSliderChange$3 = function fireSliderChange$3(component, value) {\n    emitWith(component, sliderChangeEvent(), {\n      value: value\n    });\n  };\n  var setToTLEdgeXY = function setToTLEdgeXY(edge, detail) {\n    fireSliderChange$3(edge, xyValue(min1X(detail), min1Y(detail)));\n  };\n  var setToTEdge = function setToTEdge(edge, detail) {\n    fireSliderChange$3(edge, yValue(min1Y(detail)));\n  };\n  var setToTEdgeXY = function setToTEdgeXY(edge, detail) {\n    fireSliderChange$3(edge, xyValue(halfX(detail), min1Y(detail)));\n  };\n  var setToTREdgeXY = function setToTREdgeXY(edge, detail) {\n    fireSliderChange$3(edge, xyValue(max1X(detail), min1Y(detail)));\n  };\n  var setToREdge = function setToREdge(edge, detail) {\n    fireSliderChange$3(edge, xValue(max1X(detail)));\n  };\n  var setToREdgeXY = function setToREdgeXY(edge, detail) {\n    fireSliderChange$3(edge, xyValue(max1X(detail), halfY(detail)));\n  };\n  var setToBREdgeXY = function setToBREdgeXY(edge, detail) {\n    fireSliderChange$3(edge, xyValue(max1X(detail), max1Y(detail)));\n  };\n  var setToBEdge = function setToBEdge(edge, detail) {\n    fireSliderChange$3(edge, yValue(max1Y(detail)));\n  };\n  var setToBEdgeXY = function setToBEdgeXY(edge, detail) {\n    fireSliderChange$3(edge, xyValue(halfX(detail), max1Y(detail)));\n  };\n  var setToBLEdgeXY = function setToBLEdgeXY(edge, detail) {\n    fireSliderChange$3(edge, xyValue(min1X(detail), max1Y(detail)));\n  };\n  var setToLEdge = function setToLEdge(edge, detail) {\n    fireSliderChange$3(edge, xValue(min1X(detail)));\n  };\n  var setToLEdgeXY = function setToLEdgeXY(edge, detail) {\n    fireSliderChange$3(edge, xyValue(min1X(detail), halfY(detail)));\n  };\n  var reduceBy = function reduceBy(value, min, max, step) {\n    if (value < min) {\n      return value;\n    } else if (value > max) {\n      return max;\n    } else if (value === min) {\n      return min - 1;\n    } else {\n      return Math.max(min, value - step);\n    }\n  };\n  var increaseBy = function increaseBy(value, min, max, step) {\n    if (value > max) {\n      return value;\n    } else if (value < min) {\n      return min;\n    } else if (value === max) {\n      return max + 1;\n    } else {\n      return Math.min(max, value + step);\n    }\n  };\n  var capValue = function capValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n  };\n  var snapValueOf = function snapValueOf(value, min, max, step, snapStart) {\n    return snapStart.fold(function () {\n      var initValue = value - min;\n      var extraValue = Math.round(initValue / step) * step;\n      return capValue(min + extraValue, min - 1, max + 1);\n    }, function (start) {\n      var remainder = (value - start) % step;\n      var adjustment = Math.round(remainder / step);\n      var rawSteps = Math.floor((value - start) / step);\n      var maxSteps = Math.floor((max - start) / step);\n      var numSteps = Math.min(maxSteps, rawSteps + adjustment);\n      var r = start + numSteps * step;\n      return Math.max(start, r);\n    });\n  };\n  var findOffsetOf = function findOffsetOf(value, min, max) {\n    return Math.min(max, Math.max(value, min)) - min;\n  };\n  var findValueOf = function findValueOf(args) {\n    var min = args.min,\n      max = args.max,\n      range = args.range,\n      value = args.value,\n      step = args.step,\n      snap = args.snap,\n      snapStart = args.snapStart,\n      rounded = args.rounded,\n      hasMinEdge = args.hasMinEdge,\n      hasMaxEdge = args.hasMaxEdge,\n      minBound = args.minBound,\n      maxBound = args.maxBound,\n      screenRange = args.screenRange;\n    var capMin = hasMinEdge ? min - 1 : min;\n    var capMax = hasMaxEdge ? max + 1 : max;\n    if (value < minBound) {\n      return capMin;\n    } else if (value > maxBound) {\n      return capMax;\n    } else {\n      var offset = findOffsetOf(value, minBound, maxBound);\n      var newValue = capValue(offset / screenRange * range + min, capMin, capMax);\n      if (snap && newValue >= min && newValue <= max) {\n        return snapValueOf(newValue, min, max, step, snapStart);\n      } else if (rounded) {\n        return Math.round(newValue);\n      } else {\n        return newValue;\n      }\n    }\n  };\n  var findOffsetOfValue$2 = function findOffsetOfValue$2(args) {\n    var min = args.min,\n      max = args.max,\n      range = args.range,\n      value = args.value,\n      hasMinEdge = args.hasMinEdge,\n      hasMaxEdge = args.hasMaxEdge,\n      maxBound = args.maxBound,\n      maxOffset = args.maxOffset,\n      centerMinEdge = args.centerMinEdge,\n      centerMaxEdge = args.centerMaxEdge;\n    if (value < min) {\n      return hasMinEdge ? 0 : centerMinEdge;\n    } else if (value > max) {\n      return hasMaxEdge ? maxBound : centerMaxEdge;\n    } else {\n      return (value - min) / range * maxOffset;\n    }\n  };\n  var top = 'top',\n    right = 'right',\n    bottom = 'bottom',\n    left = 'left',\n    width = 'width',\n    height = 'height';\n  var getBounds$1 = function getBounds$1(component) {\n    return component.element.dom.getBoundingClientRect();\n  };\n  var getBoundsProperty = function getBoundsProperty(bounds, property) {\n    return bounds[property];\n  };\n  var getMinXBounds = function getMinXBounds(component) {\n    var bounds = getBounds$1(component);\n    return getBoundsProperty(bounds, left);\n  };\n  var getMaxXBounds = function getMaxXBounds(component) {\n    var bounds = getBounds$1(component);\n    return getBoundsProperty(bounds, right);\n  };\n  var getMinYBounds = function getMinYBounds(component) {\n    var bounds = getBounds$1(component);\n    return getBoundsProperty(bounds, top);\n  };\n  var getMaxYBounds = function getMaxYBounds(component) {\n    var bounds = getBounds$1(component);\n    return getBoundsProperty(bounds, bottom);\n  };\n  var getXScreenRange = function getXScreenRange(component) {\n    var bounds = getBounds$1(component);\n    return getBoundsProperty(bounds, width);\n  };\n  var getYScreenRange = function getYScreenRange(component) {\n    var bounds = getBounds$1(component);\n    return getBoundsProperty(bounds, height);\n  };\n  var getCenterOffsetOf = function getCenterOffsetOf(componentMinEdge, componentMaxEdge, spectrumMinEdge) {\n    return (componentMinEdge + componentMaxEdge) / 2 - spectrumMinEdge;\n  };\n  var getXCenterOffSetOf = function getXCenterOffSetOf(component, spectrum) {\n    var componentBounds = getBounds$1(component);\n    var spectrumBounds = getBounds$1(spectrum);\n    var componentMinEdge = getBoundsProperty(componentBounds, left);\n    var componentMaxEdge = getBoundsProperty(componentBounds, right);\n    var spectrumMinEdge = getBoundsProperty(spectrumBounds, left);\n    return getCenterOffsetOf(componentMinEdge, componentMaxEdge, spectrumMinEdge);\n  };\n  var getYCenterOffSetOf = function getYCenterOffSetOf(component, spectrum) {\n    var componentBounds = getBounds$1(component);\n    var spectrumBounds = getBounds$1(spectrum);\n    var componentMinEdge = getBoundsProperty(componentBounds, top);\n    var componentMaxEdge = getBoundsProperty(componentBounds, bottom);\n    var spectrumMinEdge = getBoundsProperty(spectrumBounds, top);\n    return getCenterOffsetOf(componentMinEdge, componentMaxEdge, spectrumMinEdge);\n  };\n  var fireSliderChange$2 = function fireSliderChange$2(spectrum, value) {\n    emitWith(spectrum, sliderChangeEvent(), {\n      value: value\n    });\n  };\n  var sliderValue$2 = function sliderValue$2(x) {\n    return {\n      x: x\n    };\n  };\n  var findValueOfOffset$1 = function findValueOfOffset$1(spectrum, detail, left) {\n    var args = {\n      min: minX(detail),\n      max: maxX(detail),\n      range: xRange(detail),\n      value: left,\n      step: step(detail),\n      snap: snap(detail),\n      snapStart: snapStart(detail),\n      rounded: rounded(detail),\n      hasMinEdge: hasLEdge(detail),\n      hasMaxEdge: hasREdge(detail),\n      minBound: getMinXBounds(spectrum),\n      maxBound: getMaxXBounds(spectrum),\n      screenRange: getXScreenRange(spectrum)\n    };\n    return findValueOf(args);\n  };\n  var setValueFrom$2 = function setValueFrom$2(spectrum, detail, value) {\n    var xValue = findValueOfOffset$1(spectrum, detail, value);\n    var sliderVal = sliderValue$2(xValue);\n    fireSliderChange$2(spectrum, sliderVal);\n    return xValue;\n  };\n  var setToMin$2 = function setToMin$2(spectrum, detail) {\n    var min = minX(detail);\n    fireSliderChange$2(spectrum, sliderValue$2(min));\n  };\n  var setToMax$2 = function setToMax$2(spectrum, detail) {\n    var max = maxX(detail);\n    fireSliderChange$2(spectrum, sliderValue$2(max));\n  };\n  var moveBy$2 = function moveBy$2(direction, spectrum, detail) {\n    var f = direction > 0 ? increaseBy : reduceBy;\n    var xValue = f(currentValue(detail).x, minX(detail), maxX(detail), step(detail));\n    fireSliderChange$2(spectrum, sliderValue$2(xValue));\n    return Optional.some(xValue);\n  };\n  var handleMovement$2 = function handleMovement$2(direction) {\n    return function (spectrum, detail) {\n      return moveBy$2(direction, spectrum, detail).map(always);\n    };\n  };\n  var getValueFromEvent$2 = function getValueFromEvent$2(simulatedEvent) {\n    var pos = getEventSource(simulatedEvent);\n    return pos.map(function (p) {\n      return p.left;\n    });\n  };\n  var findOffsetOfValue$1 = function findOffsetOfValue$1(spectrum, detail, value, minEdge, maxEdge) {\n    var minOffset = 0;\n    var maxOffset = getXScreenRange(spectrum);\n    var centerMinEdge = minEdge.bind(function (edge) {\n      return Optional.some(getXCenterOffSetOf(edge, spectrum));\n    }).getOr(minOffset);\n    var centerMaxEdge = maxEdge.bind(function (edge) {\n      return Optional.some(getXCenterOffSetOf(edge, spectrum));\n    }).getOr(maxOffset);\n    var args = {\n      min: minX(detail),\n      max: maxX(detail),\n      range: xRange(detail),\n      value: value,\n      hasMinEdge: hasLEdge(detail),\n      hasMaxEdge: hasREdge(detail),\n      minBound: getMinXBounds(spectrum),\n      minOffset: minOffset,\n      maxBound: getMaxXBounds(spectrum),\n      maxOffset: maxOffset,\n      centerMinEdge: centerMinEdge,\n      centerMaxEdge: centerMaxEdge\n    };\n    return findOffsetOfValue$2(args);\n  };\n  var findPositionOfValue$1 = function findPositionOfValue$1(slider, spectrum, value, minEdge, maxEdge, detail) {\n    var offset = findOffsetOfValue$1(spectrum, detail, value, minEdge, maxEdge);\n    return getMinXBounds(spectrum) - getMinXBounds(slider) + offset;\n  };\n  var setPositionFromValue$2 = function setPositionFromValue$2(slider, thumb, detail, edges) {\n    var value = currentValue(detail);\n    var pos = findPositionOfValue$1(slider, edges.getSpectrum(slider), value.x, edges.getLeftEdge(slider), edges.getRightEdge(slider), detail);\n    var thumbRadius = get$5(thumb.element) / 2;\n    set$5(thumb.element, 'left', pos - thumbRadius + 'px');\n  };\n  var onLeft$2 = handleMovement$2(-1);\n  var onRight$2 = handleMovement$2(1);\n  var onUp$2 = Optional.none;\n  var onDown$2 = Optional.none;\n  var edgeActions$2 = {\n    'top-left': Optional.none(),\n    'top': Optional.none(),\n    'top-right': Optional.none(),\n    'right': Optional.some(setToREdge),\n    'bottom-right': Optional.none(),\n    'bottom': Optional.none(),\n    'bottom-left': Optional.none(),\n    'left': Optional.some(setToLEdge)\n  };\n  var HorizontalModel = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    setValueFrom: setValueFrom$2,\n    setToMin: setToMin$2,\n    setToMax: setToMax$2,\n    findValueOfOffset: findValueOfOffset$1,\n    getValueFromEvent: getValueFromEvent$2,\n    findPositionOfValue: findPositionOfValue$1,\n    setPositionFromValue: setPositionFromValue$2,\n    onLeft: onLeft$2,\n    onRight: onRight$2,\n    onUp: onUp$2,\n    onDown: onDown$2,\n    edgeActions: edgeActions$2\n  });\n  var fireSliderChange$1 = function fireSliderChange$1(spectrum, value) {\n    emitWith(spectrum, sliderChangeEvent(), {\n      value: value\n    });\n  };\n  var sliderValue$1 = function sliderValue$1(y) {\n    return {\n      y: y\n    };\n  };\n  var findValueOfOffset = function findValueOfOffset(spectrum, detail, top) {\n    var args = {\n      min: minY(detail),\n      max: maxY(detail),\n      range: yRange(detail),\n      value: top,\n      step: step(detail),\n      snap: snap(detail),\n      snapStart: snapStart(detail),\n      rounded: rounded(detail),\n      hasMinEdge: hasTEdge(detail),\n      hasMaxEdge: hasBEdge(detail),\n      minBound: getMinYBounds(spectrum),\n      maxBound: getMaxYBounds(spectrum),\n      screenRange: getYScreenRange(spectrum)\n    };\n    return findValueOf(args);\n  };\n  var setValueFrom$1 = function setValueFrom$1(spectrum, detail, value) {\n    var yValue = findValueOfOffset(spectrum, detail, value);\n    var sliderVal = sliderValue$1(yValue);\n    fireSliderChange$1(spectrum, sliderVal);\n    return yValue;\n  };\n  var setToMin$1 = function setToMin$1(spectrum, detail) {\n    var min = minY(detail);\n    fireSliderChange$1(spectrum, sliderValue$1(min));\n  };\n  var setToMax$1 = function setToMax$1(spectrum, detail) {\n    var max = maxY(detail);\n    fireSliderChange$1(spectrum, sliderValue$1(max));\n  };\n  var moveBy$1 = function moveBy$1(direction, spectrum, detail) {\n    var f = direction > 0 ? increaseBy : reduceBy;\n    var yValue = f(currentValue(detail).y, minY(detail), maxY(detail), step(detail));\n    fireSliderChange$1(spectrum, sliderValue$1(yValue));\n    return Optional.some(yValue);\n  };\n  var handleMovement$1 = function handleMovement$1(direction) {\n    return function (spectrum, detail) {\n      return moveBy$1(direction, spectrum, detail).map(always);\n    };\n  };\n  var getValueFromEvent$1 = function getValueFromEvent$1(simulatedEvent) {\n    var pos = getEventSource(simulatedEvent);\n    return pos.map(function (p) {\n      return p.top;\n    });\n  };\n  var findOffsetOfValue = function findOffsetOfValue(spectrum, detail, value, minEdge, maxEdge) {\n    var minOffset = 0;\n    var maxOffset = getYScreenRange(spectrum);\n    var centerMinEdge = minEdge.bind(function (edge) {\n      return Optional.some(getYCenterOffSetOf(edge, spectrum));\n    }).getOr(minOffset);\n    var centerMaxEdge = maxEdge.bind(function (edge) {\n      return Optional.some(getYCenterOffSetOf(edge, spectrum));\n    }).getOr(maxOffset);\n    var args = {\n      min: minY(detail),\n      max: maxY(detail),\n      range: yRange(detail),\n      value: value,\n      hasMinEdge: hasTEdge(detail),\n      hasMaxEdge: hasBEdge(detail),\n      minBound: getMinYBounds(spectrum),\n      minOffset: minOffset,\n      maxBound: getMaxYBounds(spectrum),\n      maxOffset: maxOffset,\n      centerMinEdge: centerMinEdge,\n      centerMaxEdge: centerMaxEdge\n    };\n    return findOffsetOfValue$2(args);\n  };\n  var findPositionOfValue = function findPositionOfValue(slider, spectrum, value, minEdge, maxEdge, detail) {\n    var offset = findOffsetOfValue(spectrum, detail, value, minEdge, maxEdge);\n    return getMinYBounds(spectrum) - getMinYBounds(slider) + offset;\n  };\n  var setPositionFromValue$1 = function setPositionFromValue$1(slider, thumb, detail, edges) {\n    var value = currentValue(detail);\n    var pos = findPositionOfValue(slider, edges.getSpectrum(slider), value.y, edges.getTopEdge(slider), edges.getBottomEdge(slider), detail);\n    var thumbRadius = get$7(thumb.element) / 2;\n    set$5(thumb.element, 'top', pos - thumbRadius + 'px');\n  };\n  var onLeft$1 = Optional.none;\n  var onRight$1 = Optional.none;\n  var onUp$1 = handleMovement$1(-1);\n  var onDown$1 = handleMovement$1(1);\n  var edgeActions$1 = {\n    'top-left': Optional.none(),\n    'top': Optional.some(setToTEdge),\n    'top-right': Optional.none(),\n    'right': Optional.none(),\n    'bottom-right': Optional.none(),\n    'bottom': Optional.some(setToBEdge),\n    'bottom-left': Optional.none(),\n    'left': Optional.none()\n  };\n  var VerticalModel = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    setValueFrom: setValueFrom$1,\n    setToMin: setToMin$1,\n    setToMax: setToMax$1,\n    findValueOfOffset: findValueOfOffset,\n    getValueFromEvent: getValueFromEvent$1,\n    findPositionOfValue: findPositionOfValue,\n    setPositionFromValue: setPositionFromValue$1,\n    onLeft: onLeft$1,\n    onRight: onRight$1,\n    onUp: onUp$1,\n    onDown: onDown$1,\n    edgeActions: edgeActions$1\n  });\n  var fireSliderChange = function fireSliderChange(spectrum, value) {\n    emitWith(spectrum, sliderChangeEvent(), {\n      value: value\n    });\n  };\n  var sliderValue = function sliderValue(x, y) {\n    return {\n      x: x,\n      y: y\n    };\n  };\n  var setValueFrom = function setValueFrom(spectrum, detail, value) {\n    var xValue = findValueOfOffset$1(spectrum, detail, value.left);\n    var yValue = findValueOfOffset(spectrum, detail, value.top);\n    var val = sliderValue(xValue, yValue);\n    fireSliderChange(spectrum, val);\n    return val;\n  };\n  var moveBy = function moveBy(direction, isVerticalMovement, spectrum, detail) {\n    var f = direction > 0 ? increaseBy : reduceBy;\n    var xValue = isVerticalMovement ? currentValue(detail).x : f(currentValue(detail).x, minX(detail), maxX(detail), step(detail));\n    var yValue = !isVerticalMovement ? currentValue(detail).y : f(currentValue(detail).y, minY(detail), maxY(detail), step(detail));\n    fireSliderChange(spectrum, sliderValue(xValue, yValue));\n    return Optional.some(xValue);\n  };\n  var handleMovement = function handleMovement(direction, isVerticalMovement) {\n    return function (spectrum, detail) {\n      return moveBy(direction, isVerticalMovement, spectrum, detail).map(always);\n    };\n  };\n  var setToMin = function setToMin(spectrum, detail) {\n    var mX = minX(detail);\n    var mY = minY(detail);\n    fireSliderChange(spectrum, sliderValue(mX, mY));\n  };\n  var setToMax = function setToMax(spectrum, detail) {\n    var mX = maxX(detail);\n    var mY = maxY(detail);\n    fireSliderChange(spectrum, sliderValue(mX, mY));\n  };\n  var getValueFromEvent = function getValueFromEvent(simulatedEvent) {\n    return getEventSource(simulatedEvent);\n  };\n  var setPositionFromValue = function setPositionFromValue(slider, thumb, detail, edges) {\n    var value = currentValue(detail);\n    var xPos = findPositionOfValue$1(slider, edges.getSpectrum(slider), value.x, edges.getLeftEdge(slider), edges.getRightEdge(slider), detail);\n    var yPos = findPositionOfValue(slider, edges.getSpectrum(slider), value.y, edges.getTopEdge(slider), edges.getBottomEdge(slider), detail);\n    var thumbXRadius = get$5(thumb.element) / 2;\n    var thumbYRadius = get$7(thumb.element) / 2;\n    set$5(thumb.element, 'left', xPos - thumbXRadius + 'px');\n    set$5(thumb.element, 'top', yPos - thumbYRadius + 'px');\n  };\n  var onLeft = handleMovement(-1, false);\n  var onRight = handleMovement(1, false);\n  var onUp = handleMovement(-1, true);\n  var onDown = handleMovement(1, true);\n  var edgeActions = {\n    'top-left': Optional.some(setToTLEdgeXY),\n    'top': Optional.some(setToTEdgeXY),\n    'top-right': Optional.some(setToTREdgeXY),\n    'right': Optional.some(setToREdgeXY),\n    'bottom-right': Optional.some(setToBREdgeXY),\n    'bottom': Optional.some(setToBEdgeXY),\n    'bottom-left': Optional.some(setToBLEdgeXY),\n    'left': Optional.some(setToLEdgeXY)\n  };\n  var TwoDModel = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    setValueFrom: setValueFrom,\n    setToMin: setToMin,\n    setToMax: setToMax,\n    getValueFromEvent: getValueFromEvent,\n    setPositionFromValue: setPositionFromValue,\n    onLeft: onLeft,\n    onRight: onRight,\n    onUp: onUp,\n    onDown: onDown,\n    edgeActions: edgeActions\n  });\n  var SliderSchema = [defaulted('stepSize', 1), defaulted('onChange', noop), defaulted('onChoose', noop), defaulted('onInit', noop), defaulted('onDragStart', noop), defaulted('onDragEnd', noop), defaulted('snapToGrid', false), defaulted('rounded', true), option('snapStart'), requiredOf('model', choose$1('mode', {\n    x: [defaulted('minX', 0), defaulted('maxX', 100), customField('value', function (spec) {\n      return Cell(spec.mode.minX);\n    }), required$1('getInitialValue'), output('manager', HorizontalModel)],\n    y: [defaulted('minY', 0), defaulted('maxY', 100), customField('value', function (spec) {\n      return Cell(spec.mode.minY);\n    }), required$1('getInitialValue'), output('manager', VerticalModel)],\n    xy: [defaulted('minX', 0), defaulted('maxX', 100), defaulted('minY', 0), defaulted('maxY', 100), customField('value', function (spec) {\n      return Cell({\n        x: spec.mode.minX,\n        y: spec.mode.minY\n      });\n    }), required$1('getInitialValue'), output('manager', TwoDModel)]\n  })), field$1('sliderBehaviours', [Keying, Representing]), customField('mouseIsDown', function () {\n    return Cell(false);\n  })];\n  var mouseReleased = constant$1('mouse.released');\n  var sketch$9 = function sketch$9(detail, components, _spec, _externals) {\n    var _a;\n    var getThumb = function getThumb(component) {\n      return getPartOrDie(component, detail, 'thumb');\n    };\n    var getSpectrum = function getSpectrum(component) {\n      return getPartOrDie(component, detail, 'spectrum');\n    };\n    var getLeftEdge = function getLeftEdge(component) {\n      return getPart(component, detail, 'left-edge');\n    };\n    var getRightEdge = function getRightEdge(component) {\n      return getPart(component, detail, 'right-edge');\n    };\n    var getTopEdge = function getTopEdge(component) {\n      return getPart(component, detail, 'top-edge');\n    };\n    var getBottomEdge = function getBottomEdge(component) {\n      return getPart(component, detail, 'bottom-edge');\n    };\n    var modelDetail = detail.model;\n    var model = modelDetail.manager;\n    var refresh = function refresh(slider, thumb) {\n      model.setPositionFromValue(slider, thumb, detail, {\n        getLeftEdge: getLeftEdge,\n        getRightEdge: getRightEdge,\n        getTopEdge: getTopEdge,\n        getBottomEdge: getBottomEdge,\n        getSpectrum: getSpectrum\n      });\n    };\n    var setValue = function setValue(slider, newValue) {\n      modelDetail.value.set(newValue);\n      var thumb = getThumb(slider);\n      refresh(slider, thumb);\n    };\n    var changeValue = function changeValue(slider, newValue) {\n      setValue(slider, newValue);\n      var thumb = getThumb(slider);\n      detail.onChange(slider, thumb, newValue);\n      return Optional.some(true);\n    };\n    var resetToMin = function resetToMin(slider) {\n      model.setToMin(slider, detail);\n    };\n    var resetToMax = function resetToMax(slider) {\n      model.setToMax(slider, detail);\n    };\n    var choose = function choose(slider) {\n      var fireOnChoose = function fireOnChoose() {\n        getPart(slider, detail, 'thumb').each(function (thumb) {\n          var value = modelDetail.value.get();\n          detail.onChoose(slider, thumb, value);\n        });\n      };\n      var wasDown = detail.mouseIsDown.get();\n      detail.mouseIsDown.set(false);\n      if (wasDown) {\n        fireOnChoose();\n      }\n    };\n    var onDragStart = function onDragStart(slider, simulatedEvent) {\n      simulatedEvent.stop();\n      detail.mouseIsDown.set(true);\n      detail.onDragStart(slider, getThumb(slider));\n    };\n    var onDragEnd = function onDragEnd(slider, simulatedEvent) {\n      simulatedEvent.stop();\n      detail.onDragEnd(slider, getThumb(slider));\n      choose(slider);\n    };\n    return {\n      uid: detail.uid,\n      dom: detail.dom,\n      components: components,\n      behaviours: augment(detail.sliderBehaviours, [Keying.config({\n        mode: 'special',\n        focusIn: function focusIn(slider) {\n          return getPart(slider, detail, 'spectrum').map(Keying.focusIn).map(always);\n        }\n      }), Representing.config({\n        store: {\n          mode: 'manual',\n          getValue: function getValue(_) {\n            return modelDetail.value.get();\n          }\n        }\n      }), Receiving.config({\n        channels: (_a = {}, _a[mouseReleased()] = {\n          onReceive: choose\n        }, _a)\n      })]),\n      events: derive$3([run(sliderChangeEvent(), function (slider, simulatedEvent) {\n        changeValue(slider, simulatedEvent.event.value);\n      }), runOnAttached(function (slider, _simulatedEvent) {\n        var getInitial = modelDetail.getInitialValue();\n        modelDetail.value.set(getInitial);\n        var thumb = getThumb(slider);\n        refresh(slider, thumb);\n        var spectrum = getSpectrum(slider);\n        detail.onInit(slider, thumb, spectrum, modelDetail.value.get());\n      }), run(touchstart(), onDragStart), run(touchend(), onDragEnd), run(mousedown(), onDragStart), run(mouseup(), onDragEnd)]),\n      apis: {\n        resetToMin: resetToMin,\n        resetToMax: resetToMax,\n        setValue: setValue,\n        refresh: refresh\n      },\n      domModification: {\n        styles: {\n          position: 'relative'\n        }\n      }\n    };\n  };\n  var Slider = composite({\n    name: 'Slider',\n    configFields: SliderSchema,\n    partFields: SliderParts,\n    factory: sketch$9,\n    apis: {\n      setValue: function setValue(apis, slider, value) {\n        apis.setValue(slider, value);\n      },\n      resetToMin: function resetToMin(apis, slider) {\n        apis.resetToMin(slider);\n      },\n      resetToMax: function resetToMax(apis, slider) {\n        apis.resetToMax(slider);\n      },\n      refresh: function refresh(apis, slider) {\n        apis.refresh(slider);\n      }\n    }\n  });\n  var button = function button(realm, clazz, makeItems, editor) {\n    return forToolbar(clazz, function () {\n      var items = makeItems();\n      realm.setContextToolbar([{\n        label: clazz + ' group',\n        items: items\n      }]);\n    }, {}, editor);\n  };\n  var BLACK = -1;\n  var makeSlider$1 = function makeSlider$1(spec$1) {\n    var getColor = function getColor(hue) {\n      if (hue < 0) {\n        return 'black';\n      } else if (hue > 360) {\n        return 'white';\n      } else {\n        return 'hsl(' + hue + ', 100%, 50%)';\n      }\n    };\n    var onInit = function onInit(slider, thumb, spectrum, value) {\n      var color = getColor(value.x());\n      set$5(thumb.element, 'background-color', color);\n    };\n    var onChange = function onChange(slider, thumb, value) {\n      var color = getColor(value.x());\n      set$5(thumb.element, 'background-color', color);\n      spec$1.onChange(slider, thumb, color);\n    };\n    return Slider.sketch({\n      dom: dom$1('<div class=\"${prefix}-slider ${prefix}-hue-slider-container\"></div>'),\n      components: [Slider.parts['left-edge'](spec('<div class=\"${prefix}-hue-slider-black\"></div>')), Slider.parts.spectrum({\n        dom: dom$1('<div class=\"${prefix}-slider-gradient-container\"></div>'),\n        components: [spec('<div class=\"${prefix}-slider-gradient\"></div>')],\n        behaviours: derive$2([Toggling.config({\n          toggleClass: resolve('thumb-active')\n        })])\n      }), Slider.parts['right-edge'](spec('<div class=\"${prefix}-hue-slider-white\"></div>')), Slider.parts.thumb({\n        dom: dom$1('<div class=\"${prefix}-slider-thumb\"></div>'),\n        behaviours: derive$2([Toggling.config({\n          toggleClass: resolve('thumb-active')\n        })])\n      })],\n      onChange: onChange,\n      onDragStart: function onDragStart(slider, thumb) {\n        Toggling.on(thumb);\n      },\n      onDragEnd: function onDragEnd(slider, thumb) {\n        Toggling.off(thumb);\n      },\n      onInit: onInit,\n      stepSize: 10,\n      model: {\n        mode: 'x',\n        minX: 0,\n        maxX: 360,\n        getInitialValue: function getInitialValue() {\n          return {\n            x: spec$1.getInitialValue()\n          };\n        }\n      },\n      sliderBehaviours: derive$2([orientation(Slider.refresh)])\n    });\n  };\n  var makeItems$1 = function makeItems$1(spec) {\n    return [makeSlider$1(spec)];\n  };\n  var sketch$8 = function sketch$8(realm, editor) {\n    var spec = {\n      onChange: function onChange(slider, thumb, color) {\n        editor.undoManager.transact(function () {\n          editor.formatter.apply('forecolor', {\n            value: color\n          });\n          editor.nodeChanged();\n        });\n      },\n      getInitialValue: constant$1(BLACK)\n    };\n    return button(realm, 'color-levels', function () {\n      return makeItems$1(spec);\n    }, editor);\n  };\n  var candidatesArray = ['9px', '10px', '11px', '12px', '14px', '16px', '18px', '20px', '24px', '32px', '36px'];\n  var defaultSize = 'medium';\n  var defaultIndex = 2;\n  var indexToSize = function indexToSize(index) {\n    return Optional.from(candidatesArray[index]);\n  };\n  var sizeToIndex = function sizeToIndex(size) {\n    return findIndex$1(candidatesArray, function (v) {\n      return v === size;\n    });\n  };\n  var getRawOrComputed = function getRawOrComputed(isRoot, rawStart) {\n    var optStart = isElement(rawStart) ? Optional.some(rawStart) : parent(rawStart).filter(isElement);\n    return optStart.map(function (start) {\n      var inline = closest$2(start, function (elem) {\n        return getRaw(elem, 'font-size').isSome();\n      }, isRoot).bind(function (elem) {\n        return getRaw(elem, 'font-size');\n      });\n      return inline.getOrThunk(function () {\n        return get$8(start, 'font-size');\n      });\n    }).getOr('');\n  };\n  var getSize = function getSize(editor) {\n    var node = editor.selection.getStart();\n    var elem = SugarElement.fromDom(node);\n    var root = SugarElement.fromDom(editor.getBody());\n    var isRoot = function isRoot(e) {\n      return eq(root, e);\n    };\n    var elemSize = getRawOrComputed(isRoot, elem);\n    return find$2(candidatesArray, function (size) {\n      return elemSize === size;\n    }).getOr(defaultSize);\n  };\n  var applySize = function applySize(editor, value) {\n    var currentValue = getSize(editor);\n    if (currentValue !== value) {\n      editor.execCommand('fontSize', false, value);\n    }\n  };\n  var get$4 = function get$4(editor) {\n    var size = getSize(editor);\n    return sizeToIndex(size).getOr(defaultIndex);\n  };\n  var apply = function apply(editor, index) {\n    indexToSize(index).each(function (size) {\n      applySize(editor, size);\n    });\n  };\n  var candidates = constant$1(candidatesArray);\n  var schema$9 = objOfOnly([required$1('getInitialValue'), required$1('onChange'), required$1('category'), required$1('sizes')]);\n  var sketch$7 = function sketch$7(rawSpec) {\n    var spec$1 = asRawOrDie$1('SizeSlider', schema$9, rawSpec);\n    var isValidValue = function isValidValue(valueIndex) {\n      return valueIndex >= 0 && valueIndex < spec$1.sizes.length;\n    };\n    var onChange = function onChange(slider, thumb, valueIndex) {\n      var index = valueIndex.x();\n      if (isValidValue(index)) {\n        spec$1.onChange(index);\n      }\n    };\n    return Slider.sketch({\n      dom: {\n        tag: 'div',\n        classes: [resolve('slider-' + spec$1.category + '-size-container'), resolve('slider'), resolve('slider-size-container')]\n      },\n      onChange: onChange,\n      onDragStart: function onDragStart(slider, thumb) {\n        Toggling.on(thumb);\n      },\n      onDragEnd: function onDragEnd(slider, thumb) {\n        Toggling.off(thumb);\n      },\n      model: {\n        mode: 'x',\n        minX: 0,\n        maxX: spec$1.sizes.length - 1,\n        getInitialValue: function getInitialValue() {\n          return {\n            x: spec$1.getInitialValue()\n          };\n        }\n      },\n      stepSize: 1,\n      snapToGrid: true,\n      sliderBehaviours: derive$2([orientation(Slider.refresh)]),\n      components: [Slider.parts.spectrum({\n        dom: dom$1('<div class=\"${prefix}-slider-size-container\"></div>'),\n        components: [spec('<div class=\"${prefix}-slider-size-line\"></div>')]\n      }), Slider.parts.thumb({\n        dom: dom$1('<div class=\"${prefix}-slider-thumb\"></div>'),\n        behaviours: derive$2([Toggling.config({\n          toggleClass: resolve('thumb-active')\n        })])\n      })]\n    });\n  };\n  var sizes = candidates();\n  var makeSlider = function makeSlider(spec) {\n    return sketch$7({\n      onChange: spec.onChange,\n      sizes: sizes,\n      category: 'font',\n      getInitialValue: spec.getInitialValue\n    });\n  };\n  var makeItems = function makeItems(spec$1) {\n    return [spec('<span class=\"${prefix}-toolbar-button ${prefix}-icon-small-font ${prefix}-icon\"></span>'), makeSlider(spec$1), spec('<span class=\"${prefix}-toolbar-button ${prefix}-icon-large-font ${prefix}-icon\"></span>')];\n  };\n  var sketch$6 = function sketch$6(realm, editor) {\n    var spec = {\n      onChange: function onChange(value) {\n        apply(editor, value);\n      },\n      getInitialValue: function getInitialValue() {\n        return get$4(editor);\n      }\n    };\n    return button(realm, 'font-size', function () {\n      return makeItems(spec);\n    }, editor);\n  };\n  var record = function record(spec) {\n    var uid = isSketchSpec$1(spec) && hasNonNullableKey(spec, 'uid') ? spec.uid : generate$2('memento');\n    var get = function get(anyInSystem) {\n      return anyInSystem.getSystem().getByUid(uid).getOrDie();\n    };\n    var getOpt = function getOpt(anyInSystem) {\n      return anyInSystem.getSystem().getByUid(uid).toOptional();\n    };\n    var asSpec = function asSpec() {\n      return _assign(_assign({}, spec), {\n        uid: uid\n      });\n    };\n    return {\n      get: get,\n      getOpt: getOpt,\n      asSpec: asSpec\n    };\n  };\n  var exports$1 = {},\n    module = {\n      exports: exports$1\n    };\n  (function (define, exports, module, require) {\n    (function (global, factory) {\n      _typeof(exports) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.EphoxContactWrapper = factory());\n    })(this, function () {\n      var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n      var promise = {\n        exports: {}\n      };\n      (function (module) {\n        (function (root) {\n          var setTimeoutFunc = setTimeout;\n          function noop() {}\n          function bind(fn, thisArg) {\n            return function () {\n              fn.apply(thisArg, arguments);\n            };\n          }\n          function Promise(fn) {\n            if (_typeof(this) !== 'object') throw new TypeError('Promises must be constructed via new');\n            if (typeof fn !== 'function') throw new TypeError('not a function');\n            this._state = 0;\n            this._handled = false;\n            this._value = undefined;\n            this._deferreds = [];\n            doResolve(fn, this);\n          }\n          function handle(self, deferred) {\n            while (self._state === 3) {\n              self = self._value;\n            }\n            if (self._state === 0) {\n              self._deferreds.push(deferred);\n              return;\n            }\n            self._handled = true;\n            Promise._immediateFn(function () {\n              var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n              if (cb === null) {\n                (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n                return;\n              }\n              var ret;\n              try {\n                ret = cb(self._value);\n              } catch (e) {\n                reject(deferred.promise, e);\n                return;\n              }\n              resolve(deferred.promise, ret);\n            });\n          }\n          function resolve(self, newValue) {\n            try {\n              if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');\n              if (newValue && (_typeof(newValue) === 'object' || typeof newValue === 'function')) {\n                var then = newValue.then;\n                if (newValue instanceof Promise) {\n                  self._state = 3;\n                  self._value = newValue;\n                  finale(self);\n                  return;\n                } else if (typeof then === 'function') {\n                  doResolve(bind(then, newValue), self);\n                  return;\n                }\n              }\n              self._state = 1;\n              self._value = newValue;\n              finale(self);\n            } catch (e) {\n              reject(self, e);\n            }\n          }\n          function reject(self, newValue) {\n            self._state = 2;\n            self._value = newValue;\n            finale(self);\n          }\n          function finale(self) {\n            if (self._state === 2 && self._deferreds.length === 0) {\n              Promise._immediateFn(function () {\n                if (!self._handled) {\n                  Promise._unhandledRejectionFn(self._value);\n                }\n              });\n            }\n            for (var i = 0, len = self._deferreds.length; i < len; i++) {\n              handle(self, self._deferreds[i]);\n            }\n            self._deferreds = null;\n          }\n          function Handler(onFulfilled, onRejected, promise) {\n            this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n            this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n            this.promise = promise;\n          }\n          function doResolve(fn, self) {\n            var done = false;\n            try {\n              fn(function (value) {\n                if (done) return;\n                done = true;\n                resolve(self, value);\n              }, function (reason) {\n                if (done) return;\n                done = true;\n                reject(self, reason);\n              });\n            } catch (ex) {\n              if (done) return;\n              done = true;\n              reject(self, ex);\n            }\n          }\n          Promise.prototype['catch'] = function (onRejected) {\n            return this.then(null, onRejected);\n          };\n          Promise.prototype.then = function (onFulfilled, onRejected) {\n            var prom = new this.constructor(noop);\n            handle(this, new Handler(onFulfilled, onRejected, prom));\n            return prom;\n          };\n          Promise.all = function (arr) {\n            var args = Array.prototype.slice.call(arr);\n            return new Promise(function (resolve, reject) {\n              if (args.length === 0) return resolve([]);\n              var remaining = args.length;\n              function res(i, val) {\n                try {\n                  if (val && (_typeof(val) === 'object' || typeof val === 'function')) {\n                    var then = val.then;\n                    if (typeof then === 'function') {\n                      then.call(val, function (val) {\n                        res(i, val);\n                      }, reject);\n                      return;\n                    }\n                  }\n                  args[i] = val;\n                  if (--remaining === 0) {\n                    resolve(args);\n                  }\n                } catch (ex) {\n                  reject(ex);\n                }\n              }\n              for (var i = 0; i < args.length; i++) {\n                res(i, args[i]);\n              }\n            });\n          };\n          Promise.resolve = function (value) {\n            if (value && _typeof(value) === 'object' && value.constructor === Promise) {\n              return value;\n            }\n            return new Promise(function (resolve) {\n              resolve(value);\n            });\n          };\n          Promise.reject = function (value) {\n            return new Promise(function (resolve, reject) {\n              reject(value);\n            });\n          };\n          Promise.race = function (values) {\n            return new Promise(function (resolve, reject) {\n              for (var i = 0, len = values.length; i < len; i++) {\n                values[i].then(resolve, reject);\n              }\n            });\n          };\n          Promise._immediateFn = typeof setImmediate === 'function' ? function (fn) {\n            setImmediate(fn);\n          } : function (fn) {\n            setTimeoutFunc(fn, 0);\n          };\n          Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n            if (typeof console !== 'undefined' && console) {\n              console.warn('Possible Unhandled Promise Rejection:', err);\n            }\n          };\n          Promise._setImmediateFn = function _setImmediateFn(fn) {\n            Promise._immediateFn = fn;\n          };\n          Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {\n            Promise._unhandledRejectionFn = fn;\n          };\n          if (module.exports) {\n            module.exports = Promise;\n          } else if (!root.Promise) {\n            root.Promise = Promise;\n          }\n        })(commonjsGlobal);\n      })(promise);\n      var promisePolyfill = promise.exports;\n      var Global = function () {\n        if (typeof window !== 'undefined') {\n          return window;\n        } else {\n          return Function('return this;')();\n        }\n      }();\n      var promisePolyfill_1 = {\n        boltExport: Global.Promise || promisePolyfill\n      };\n      return promisePolyfill_1;\n    });\n  })(undefined, exports$1, module);\n  var Promise$1 = module.exports.boltExport;\n  var blobToDataUri = function blobToDataUri(blob) {\n    return new Promise$1(function (resolve) {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        resolve(reader.result);\n      };\n      reader.readAsDataURL(blob);\n    });\n  };\n  var blobToBase64$1 = function blobToBase64$1(blob) {\n    return blobToDataUri(blob).then(function (dataUri) {\n      return dataUri.split(',')[1];\n    });\n  };\n  var blobToBase64 = function blobToBase64(blob) {\n    return blobToBase64$1(blob);\n  };\n  var addImage = function addImage(editor, blob) {\n    blobToBase64(blob).then(function (base64) {\n      editor.undoManager.transact(function () {\n        var cache = editor.editorUpload.blobCache;\n        var info = cache.create(generate$4('mceu'), blob, base64);\n        cache.add(info);\n        var img = editor.dom.createHTML('img', {\n          src: info.blobUri()\n        });\n        editor.insertContent(img);\n      });\n    });\n  };\n  var extractBlob = function extractBlob(simulatedEvent) {\n    var event = simulatedEvent.event.raw;\n    var files = event.target.files || event.dataTransfer.files;\n    return Optional.from(files[0]);\n  };\n  var sketch$5 = function sketch$5(editor) {\n    var pickerDom = {\n      tag: 'input',\n      attributes: {\n        accept: 'image/*',\n        type: 'file',\n        title: ''\n      },\n      styles: {\n        visibility: 'hidden',\n        position: 'absolute'\n      }\n    };\n    var memPicker = record({\n      dom: pickerDom,\n      events: derive$3([cutter(click()), run(change(), function (picker, simulatedEvent) {\n        extractBlob(simulatedEvent).each(function (blob) {\n          addImage(editor, blob);\n        });\n      })])\n    });\n    return Button.sketch({\n      dom: getToolbarIconButton('image', editor),\n      components: [memPicker.asSpec()],\n      action: function action(button) {\n        var picker = memPicker.get(button);\n        picker.element.dom.click();\n      }\n    });\n  };\n  var get$3 = function get$3(element) {\n    return element.dom.textContent;\n  };\n  var set$3 = function set$3(element, value) {\n    element.dom.textContent = value;\n  };\n  var isNotEmpty = function isNotEmpty(val) {\n    return val.length > 0;\n  };\n  var defaultToEmpty = function defaultToEmpty(str) {\n    return str === undefined || str === null ? '' : str;\n  };\n  var noLink = function noLink(editor) {\n    var text = editor.selection.getContent({\n      format: 'text'\n    });\n    return {\n      url: '',\n      text: text,\n      title: '',\n      target: '',\n      link: Optional.none()\n    };\n  };\n  var fromLink = function fromLink(link) {\n    var text = get$3(link);\n    var url = get$b(link, 'href');\n    var title = get$b(link, 'title');\n    var target = get$b(link, 'target');\n    return {\n      url: defaultToEmpty(url),\n      text: text !== url ? defaultToEmpty(text) : '',\n      title: defaultToEmpty(title),\n      target: defaultToEmpty(target),\n      link: Optional.some(link)\n    };\n  };\n  var getInfo = function getInfo(editor) {\n    return query(editor).fold(function () {\n      return noLink(editor);\n    }, function (link) {\n      return fromLink(link);\n    });\n  };\n  var wasSimple = function wasSimple(link) {\n    var prevHref = get$b(link, 'href');\n    var prevText = get$3(link);\n    return prevHref === prevText;\n  };\n  var getTextToApply = function getTextToApply(link, url, info) {\n    return info.text.toOptional().filter(isNotEmpty).fold(function () {\n      return wasSimple(link) ? Optional.some(url) : Optional.none();\n    }, Optional.some);\n  };\n  var unlinkIfRequired = function unlinkIfRequired(editor, info) {\n    var activeLink = info.link.bind(identity);\n    activeLink.each(function (_link) {\n      editor.execCommand('unlink');\n    });\n  };\n  var getAttrs = function getAttrs(url, info) {\n    var attrs = {};\n    attrs.href = url;\n    info.title.toOptional().filter(isNotEmpty).each(function (title) {\n      attrs.title = title;\n    });\n    info.target.toOptional().filter(isNotEmpty).each(function (target) {\n      attrs.target = target;\n    });\n    return attrs;\n  };\n  var applyInfo = function applyInfo(editor, info) {\n    info.url.toOptional().filter(isNotEmpty).fold(function () {\n      unlinkIfRequired(editor, info);\n    }, function (url) {\n      var attrs = getAttrs(url, info);\n      var activeLink = info.link.bind(identity);\n      activeLink.fold(function () {\n        var text = info.text.toOptional().filter(isNotEmpty).getOr(url);\n        editor.insertContent(editor.dom.createHTML('a', attrs, editor.dom.encode(text)));\n      }, function (link) {\n        var text = getTextToApply(link, url, info);\n        setAll$1(link, attrs);\n        text.each(function (newText) {\n          set$3(link, newText);\n        });\n      });\n    });\n  };\n  var query = function query(editor) {\n    var start = SugarElement.fromDom(editor.selection.getStart());\n    return closest$1(start, 'a');\n  };\n  var platform = detect$1();\n  var preserve$1 = function preserve$1(f, editor) {\n    var rng = editor.selection.getRng();\n    f();\n    editor.selection.setRng(rng);\n  };\n  var forAndroid = function forAndroid(editor, f) {\n    var wrapper = platform.os.isAndroid() ? preserve$1 : apply$1;\n    wrapper(f, editor);\n  };\n  var events$4 = function events$4(name, eventHandlers) {\n    var events = derive$3(eventHandlers);\n    return create$5({\n      fields: [required$1('enabled')],\n      name: name,\n      active: {\n        events: constant$1(events)\n      }\n    });\n  };\n  var config = function config(name, eventHandlers) {\n    var me = events$4(name, eventHandlers);\n    return {\n      key: name,\n      value: {\n        config: {},\n        me: me,\n        configAsRaw: constant$1({}),\n        initialConfig: {},\n        state: NoState\n      }\n    };\n  };\n  var getCurrent = function getCurrent(component, composeConfig, _composeState) {\n    return composeConfig.find(component);\n  };\n  var ComposeApis = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    getCurrent: getCurrent\n  });\n  var ComposeSchema = [required$1('find')];\n  var Composing = create$5({\n    fields: ComposeSchema,\n    name: 'composing',\n    apis: ComposeApis\n  });\n  var factory$4 = function factory$4(detail) {\n    var _a = detail.dom,\n      attributes = _a.attributes,\n      domWithoutAttributes = __rest(_a, ['attributes']);\n    return {\n      uid: detail.uid,\n      dom: _assign({\n        tag: 'div',\n        attributes: _assign({\n          role: 'presentation'\n        }, attributes)\n      }, domWithoutAttributes),\n      components: detail.components,\n      behaviours: get$6(detail.containerBehaviours),\n      events: detail.events,\n      domModification: detail.domModification,\n      eventOrder: detail.eventOrder\n    };\n  };\n  var Container = single({\n    name: 'Container',\n    factory: factory$4,\n    configFields: [defaulted('components', []), field$1('containerBehaviours', []), defaulted('events', {}), defaulted('domModification', {}), defaulted('eventOrder', {})]\n  });\n  var factory$3 = function factory$3(detail) {\n    return {\n      uid: detail.uid,\n      dom: detail.dom,\n      behaviours: SketchBehaviours.augment(detail.dataBehaviours, [Representing.config({\n        store: {\n          mode: 'memory',\n          initialValue: detail.getInitialValue()\n        }\n      }), Composing.config({\n        find: Optional.some\n      })]),\n      events: derive$3([runOnAttached(function (component, _simulatedEvent) {\n        Representing.setValue(component, detail.getInitialValue());\n      })])\n    };\n  };\n  var DataField = single({\n    name: 'DataField',\n    factory: factory$3,\n    configFields: [required$1('uid'), required$1('dom'), required$1('getInitialValue'), SketchBehaviours.field('dataBehaviours', [Representing, Composing])]\n  });\n  var get$2 = function get$2(element) {\n    return element.dom.value;\n  };\n  var set$2 = function set$2(element, value) {\n    if (value === undefined) {\n      throw new Error('Value.set was undefined');\n    }\n    element.dom.value = value;\n  };\n  var schema$8 = constant$1([option('data'), defaulted('inputAttributes', {}), defaulted('inputStyles', {}), defaulted('tag', 'input'), defaulted('inputClasses', []), onHandler('onSetValue'), defaulted('styles', {}), defaulted('eventOrder', {}), field$1('inputBehaviours', [Representing, Focusing]), defaulted('selectOnFocus', true)]);\n  var focusBehaviours = function focusBehaviours(detail) {\n    return derive$2([Focusing.config({\n      onFocus: !detail.selectOnFocus ? noop : function (component) {\n        var input = component.element;\n        var value = get$2(input);\n        input.dom.setSelectionRange(0, value.length);\n      }\n    })]);\n  };\n  var behaviours = function behaviours(detail) {\n    return _assign(_assign({}, focusBehaviours(detail)), augment(detail.inputBehaviours, [Representing.config({\n      store: _assign(_assign({\n        mode: 'manual'\n      }, detail.data.map(function (data) {\n        return {\n          initialValue: data\n        };\n      }).getOr({})), {\n        getValue: function getValue(input) {\n          return get$2(input.element);\n        },\n        setValue: function setValue(input, data) {\n          var current = get$2(input.element);\n          if (current !== data) {\n            set$2(input.element, data);\n          }\n        }\n      }),\n      onSetValue: detail.onSetValue\n    })]));\n  };\n  var dom = function dom(detail) {\n    return {\n      tag: detail.tag,\n      attributes: _assign({\n        type: 'text'\n      }, detail.inputAttributes),\n      styles: detail.inputStyles,\n      classes: detail.inputClasses\n    };\n  };\n  var factory$2 = function factory$2(detail, _spec) {\n    return {\n      uid: detail.uid,\n      dom: dom(detail),\n      components: [],\n      behaviours: behaviours(detail),\n      eventOrder: detail.eventOrder\n    };\n  };\n  var Input = single({\n    name: 'Input',\n    configFields: schema$8(),\n    factory: factory$2\n  });\n  var exhibit$2 = function exhibit$2(base, tabConfig) {\n    return nu$3({\n      attributes: wrapAll([{\n        key: tabConfig.tabAttr,\n        value: 'true'\n      }])\n    });\n  };\n  var ActiveTabstopping = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    exhibit: exhibit$2\n  });\n  var TabstopSchema = [defaulted('tabAttr', 'data-alloy-tabstop')];\n  var Tabstopping = create$5({\n    fields: TabstopSchema,\n    name: 'tabstopping',\n    active: ActiveTabstopping\n  });\n  var global$3 = tinymce.util.Tools.resolve('tinymce.util.I18n');\n  var clearInputBehaviour = 'input-clearing';\n  var field = function field(name, placeholder) {\n    var inputSpec = record(Input.sketch({\n      inputAttributes: {\n        placeholder: global$3.translate(placeholder)\n      },\n      onSetValue: function onSetValue(input, _data) {\n        emit(input, input$1());\n      },\n      inputBehaviours: derive$2([Composing.config({\n        find: Optional.some\n      }), Tabstopping.config({}), Keying.config({\n        mode: 'execution'\n      })]),\n      selectOnFocus: false\n    }));\n    var buttonSpec = record(Button.sketch({\n      dom: dom$1('<button class=\"${prefix}-input-container-x ${prefix}-icon-cancel-circle ${prefix}-icon\"></button>'),\n      action: function action(button) {\n        var input = inputSpec.get(button);\n        Representing.setValue(input, '');\n      }\n    }));\n    return {\n      name: name,\n      spec: Container.sketch({\n        dom: dom$1('<div class=\"${prefix}-input-container\"></div>'),\n        components: [inputSpec.asSpec(), buttonSpec.asSpec()],\n        containerBehaviours: derive$2([Toggling.config({\n          toggleClass: resolve('input-container-empty')\n        }), Composing.config({\n          find: function find(comp) {\n            return Optional.some(inputSpec.get(comp));\n          }\n        }), config(clearInputBehaviour, [run(input$1(), function (iContainer) {\n          var input = inputSpec.get(iContainer);\n          var val = Representing.getValue(input);\n          var f = val.length > 0 ? Toggling.off : Toggling.on;\n          f(iContainer);\n        })])])\n      })\n    };\n  };\n  var hidden = function hidden(name) {\n    return {\n      name: name,\n      spec: DataField.sketch({\n        dom: {\n          tag: 'span',\n          styles: {\n            display: 'none'\n          }\n        },\n        getInitialValue: function getInitialValue() {\n          return Optional.none();\n        }\n      })\n    };\n  };\n  var nativeDisabled = ['input', 'button', 'textarea', 'select'];\n  var onLoad = function onLoad(component, disableConfig, disableState) {\n    var f = disableConfig.disabled() ? disable : enable;\n    f(component, disableConfig);\n  };\n  var hasNative = function hasNative(component, config) {\n    return config.useNative === true && contains$1(nativeDisabled, name$1(component.element));\n  };\n  var nativeIsDisabled = function nativeIsDisabled(component) {\n    return has$1(component.element, 'disabled');\n  };\n  var nativeDisable = function nativeDisable(component) {\n    set$8(component.element, 'disabled', 'disabled');\n  };\n  var nativeEnable = function nativeEnable(component) {\n    remove$6(component.element, 'disabled');\n  };\n  var ariaIsDisabled = function ariaIsDisabled(component) {\n    return get$b(component.element, 'aria-disabled') === 'true';\n  };\n  var ariaDisable = function ariaDisable(component) {\n    set$8(component.element, 'aria-disabled', 'true');\n  };\n  var ariaEnable = function ariaEnable(component) {\n    set$8(component.element, 'aria-disabled', 'false');\n  };\n  var disable = function disable(component, disableConfig, _disableState) {\n    disableConfig.disableClass.each(function (disableClass) {\n      add$1(component.element, disableClass);\n    });\n    var f = hasNative(component, disableConfig) ? nativeDisable : ariaDisable;\n    f(component);\n    disableConfig.onDisabled(component);\n  };\n  var enable = function enable(component, disableConfig, _disableState) {\n    disableConfig.disableClass.each(function (disableClass) {\n      remove$3(component.element, disableClass);\n    });\n    var f = hasNative(component, disableConfig) ? nativeEnable : ariaEnable;\n    f(component);\n    disableConfig.onEnabled(component);\n  };\n  var isDisabled = function isDisabled(component, disableConfig) {\n    return hasNative(component, disableConfig) ? nativeIsDisabled(component) : ariaIsDisabled(component);\n  };\n  var set$1 = function set$1(component, disableConfig, disableState, disabled) {\n    var f = disabled ? disable : enable;\n    f(component, disableConfig);\n  };\n  var DisableApis = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    enable: enable,\n    disable: disable,\n    isDisabled: isDisabled,\n    onLoad: onLoad,\n    set: set$1\n  });\n  var exhibit$1 = function exhibit$1(base, disableConfig) {\n    return nu$3({\n      classes: disableConfig.disabled() ? disableConfig.disableClass.toArray() : []\n    });\n  };\n  var events$3 = function events$3(disableConfig, disableState) {\n    return derive$3([abort(execute$5(), function (component, _simulatedEvent) {\n      return isDisabled(component, disableConfig);\n    }), loadEvent(disableConfig, disableState, onLoad)]);\n  };\n  var ActiveDisable = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    exhibit: exhibit$1,\n    events: events$3\n  });\n  var DisableSchema = [defaultedFunction('disabled', never), defaulted('useNative', true), option('disableClass'), onHandler('onDisabled'), onHandler('onEnabled')];\n  var Disabling = create$5({\n    fields: DisableSchema,\n    name: 'disabling',\n    active: ActiveDisable,\n    apis: DisableApis\n  });\n  var owner$1 = 'form';\n  var schema$7 = [field$1('formBehaviours', [Representing])];\n  var getPartName = function getPartName(name) {\n    return '<alloy.field.' + name + '>';\n  };\n  var sketch$4 = function sketch$4(fSpec) {\n    var parts = function () {\n      var record = [];\n      var field = function field(name, config) {\n        record.push(name);\n        return generateOne(owner$1, getPartName(name), config);\n      };\n      return {\n        field: field,\n        record: constant$1(record)\n      };\n    }();\n    var spec = fSpec(parts);\n    var partNames = parts.record();\n    var fieldParts = map$2(partNames, function (n) {\n      return required({\n        name: n,\n        pname: getPartName(n)\n      });\n    });\n    return composite$1(owner$1, schema$7, fieldParts, make$4, spec);\n  };\n  var toResult = function toResult(o, e) {\n    return o.fold(function () {\n      return Result.error(e);\n    }, Result.value);\n  };\n  var make$4 = function make$4(detail, components) {\n    return {\n      uid: detail.uid,\n      dom: detail.dom,\n      components: components,\n      behaviours: augment(detail.formBehaviours, [Representing.config({\n        store: {\n          mode: 'manual',\n          getValue: function getValue(form) {\n            var resPs = getAllParts(form, detail);\n            return map$1(resPs, function (resPThunk, pName) {\n              return resPThunk().bind(function (v) {\n                var opt = Composing.getCurrent(v);\n                return toResult(opt, new Error('Cannot find a current component to extract the value from for form part \\'' + pName + '\\': ' + element(v.element)));\n              }).map(Representing.getValue);\n            });\n          },\n          setValue: function setValue(form, values) {\n            each(values, function (newValue, key) {\n              getPart(form, detail, key).each(function (wrapper) {\n                Composing.getCurrent(wrapper).each(function (field) {\n                  Representing.setValue(field, newValue);\n                });\n              });\n            });\n          }\n        }\n      })]),\n      apis: {\n        getField: function getField(form, key) {\n          return getPart(form, detail, key).bind(Composing.getCurrent);\n        }\n      }\n    };\n  };\n  var Form = {\n    getField: makeApi(function (apis, component, key) {\n      return apis.getField(component, key);\n    }),\n    sketch: sketch$4\n  };\n  var SWIPING_LEFT = 1;\n  var SWIPING_RIGHT = -1;\n  var SWIPING_NONE = 0;\n  var init$3 = function init$3(xValue) {\n    return {\n      xValue: xValue,\n      points: []\n    };\n  };\n  var move = function move(model, xValue) {\n    if (xValue === model.xValue) {\n      return model;\n    }\n    var currentDirection = xValue - model.xValue > 0 ? SWIPING_LEFT : SWIPING_RIGHT;\n    var newPoint = {\n      direction: currentDirection,\n      xValue: xValue\n    };\n    var priorPoints = function () {\n      if (model.points.length === 0) {\n        return [];\n      } else {\n        var prev = model.points[model.points.length - 1];\n        return prev.direction === currentDirection ? model.points.slice(0, model.points.length - 1) : model.points;\n      }\n    }();\n    return {\n      xValue: xValue,\n      points: priorPoints.concat([newPoint])\n    };\n  };\n  var complete = function complete(model) {\n    if (model.points.length === 0) {\n      return SWIPING_NONE;\n    } else {\n      var firstDirection = model.points[0].direction;\n      var lastDirection = model.points[model.points.length - 1].direction;\n      return firstDirection === SWIPING_RIGHT && lastDirection === SWIPING_RIGHT ? SWIPING_RIGHT : firstDirection === SWIPING_LEFT && lastDirection === SWIPING_LEFT ? SWIPING_LEFT : SWIPING_NONE;\n    }\n  };\n  var sketch$3 = function sketch$3(rawSpec) {\n    var navigateEvent = 'navigateEvent';\n    var wrapperAdhocEvents = 'serializer-wrapper-events';\n    var formAdhocEvents = 'form-events';\n    var schema = objOf([required$1('fields'), defaulted('maxFieldIndex', rawSpec.fields.length - 1), required$1('onExecute'), required$1('getInitialValue'), customField('state', function () {\n      return {\n        dialogSwipeState: value(),\n        currentScreen: Cell(0)\n      };\n    })]);\n    var spec$1 = asRawOrDie$1('SerialisedDialog', schema, rawSpec);\n    var navigationButton = function navigationButton(direction, directionName, enabled) {\n      return Button.sketch({\n        dom: dom$1('<span class=\"${prefix}-icon-' + directionName + ' ${prefix}-icon\"></span>'),\n        action: function action(button) {\n          emitWith(button, navigateEvent, {\n            direction: direction\n          });\n        },\n        buttonBehaviours: derive$2([Disabling.config({\n          disableClass: resolve('toolbar-navigation-disabled'),\n          disabled: function disabled() {\n            return !enabled;\n          }\n        })])\n      });\n    };\n    var reposition = function reposition(dialog, message) {\n      descendant(dialog.element, '.' + resolve('serialised-dialog-chain')).each(function (parent) {\n        set$5(parent, 'left', -spec$1.state.currentScreen.get() * message.width + 'px');\n      });\n    };\n    var navigate = function navigate(dialog, direction) {\n      var screens = descendants(dialog.element, '.' + resolve('serialised-dialog-screen'));\n      descendant(dialog.element, '.' + resolve('serialised-dialog-chain')).each(function (parent) {\n        if (spec$1.state.currentScreen.get() + direction >= 0 && spec$1.state.currentScreen.get() + direction < screens.length) {\n          getRaw(parent, 'left').each(function (left) {\n            var currentLeft = parseInt(left, 10);\n            var w = get$5(screens[0]);\n            set$5(parent, 'left', currentLeft - direction * w + 'px');\n          });\n          spec$1.state.currentScreen.set(spec$1.state.currentScreen.get() + direction);\n        }\n      });\n    };\n    var focusInput = function focusInput(dialog) {\n      var inputs = descendants(dialog.element, 'input');\n      var optInput = Optional.from(inputs[spec$1.state.currentScreen.get()]);\n      optInput.each(function (input) {\n        dialog.getSystem().getByDom(input).each(function (inputComp) {\n          dispatchFocus(dialog, inputComp.element);\n        });\n      });\n      var dotitems = memDots.get(dialog);\n      Highlighting.highlightAt(dotitems, spec$1.state.currentScreen.get());\n    };\n    var resetState = function resetState() {\n      spec$1.state.currentScreen.set(0);\n      spec$1.state.dialogSwipeState.clear();\n    };\n    var memForm = record(Form.sketch(function (parts) {\n      return {\n        dom: dom$1('<div class=\"${prefix}-serialised-dialog\"></div>'),\n        components: [Container.sketch({\n          dom: dom$1('<div class=\"${prefix}-serialised-dialog-chain\" style=\"left: 0px; position: absolute;\"></div>'),\n          components: map$2(spec$1.fields, function (field, i) {\n            return i <= spec$1.maxFieldIndex ? Container.sketch({\n              dom: dom$1('<div class=\"${prefix}-serialised-dialog-screen\"></div>'),\n              components: [navigationButton(-1, 'previous', i > 0), parts.field(field.name, field.spec), navigationButton(+1, 'next', i < spec$1.maxFieldIndex)]\n            }) : parts.field(field.name, field.spec);\n          })\n        })],\n        formBehaviours: derive$2([orientation(function (dialog, message) {\n          reposition(dialog, message);\n        }), Keying.config({\n          mode: 'special',\n          focusIn: function focusIn(dialog, _specialInfo) {\n            focusInput(dialog);\n          },\n          onTab: function onTab(dialog, _specialInfo) {\n            navigate(dialog, +1);\n            return Optional.some(true);\n          },\n          onShiftTab: function onShiftTab(dialog, _specialInfo) {\n            navigate(dialog, -1);\n            return Optional.some(true);\n          }\n        }), config(formAdhocEvents, [runOnAttached(function (dialog, _simulatedEvent) {\n          resetState();\n          var dotitems = memDots.get(dialog);\n          Highlighting.highlightFirst(dotitems);\n          spec$1.getInitialValue(dialog).each(function (v) {\n            Representing.setValue(dialog, v);\n          });\n        }), runOnExecute(spec$1.onExecute), run(transitionend(), function (dialog, simulatedEvent) {\n          var event = simulatedEvent.event;\n          if (event.raw.propertyName === 'left') {\n            focusInput(dialog);\n          }\n        }), run(navigateEvent, function (dialog, simulatedEvent) {\n          var event = simulatedEvent.event;\n          var direction = event.direction;\n          navigate(dialog, direction);\n        })])])\n      };\n    }));\n    var memDots = record({\n      dom: dom$1('<div class=\"${prefix}-dot-container\"></div>'),\n      behaviours: derive$2([Highlighting.config({\n        highlightClass: resolve('dot-active'),\n        itemClass: resolve('dot-item')\n      })]),\n      components: bind$3(spec$1.fields, function (_f, i) {\n        return i <= spec$1.maxFieldIndex ? [spec('<div class=\"${prefix}-dot-item ${prefix}-icon-full-dot ${prefix}-icon\"></div>')] : [];\n      })\n    });\n    return {\n      dom: dom$1('<div class=\"${prefix}-serializer-wrapper\"></div>'),\n      components: [memForm.asSpec(), memDots.asSpec()],\n      behaviours: derive$2([Keying.config({\n        mode: 'special',\n        focusIn: function focusIn(wrapper) {\n          var form = memForm.get(wrapper);\n          Keying.focusIn(form);\n        }\n      }), config(wrapperAdhocEvents, [run(touchstart(), function (_wrapper, simulatedEvent) {\n        var event = simulatedEvent.event;\n        spec$1.state.dialogSwipeState.set(init$3(event.raw.touches[0].clientX));\n      }), run(touchmove(), function (_wrapper, simulatedEvent) {\n        var event = simulatedEvent.event;\n        spec$1.state.dialogSwipeState.on(function (state) {\n          simulatedEvent.event.prevent();\n          spec$1.state.dialogSwipeState.set(move(state, event.raw.touches[0].clientX));\n        });\n      }), run(touchend(), function (wrapper, _simulatedEvent) {\n        spec$1.state.dialogSwipeState.on(function (state) {\n          var dialog = memForm.get(wrapper);\n          var direction = -1 * complete(state);\n          navigate(dialog, direction);\n        });\n      })])])\n    };\n  };\n  var getGroups = cached(function (realm, editor) {\n    return [{\n      label: 'the link group',\n      items: [sketch$3({\n        fields: [field('url', 'Type or paste URL'), field('text', 'Link text'), field('title', 'Link title'), field('target', 'Link target'), hidden('link')],\n        maxFieldIndex: ['url', 'text', 'title', 'target'].length - 1,\n        getInitialValue: function getInitialValue() {\n          return Optional.some(getInfo(editor));\n        },\n        onExecute: function onExecute(dialog, _simulatedEvent) {\n          var info = Representing.getValue(dialog);\n          applyInfo(editor, info);\n          realm.restoreToolbar();\n          editor.focus();\n        }\n      })]\n    }];\n  });\n  var sketch$2 = function sketch$2(realm, editor) {\n    return forToolbarStateAction(editor, 'link', 'link', function () {\n      var groups = getGroups(realm, editor);\n      realm.setContextToolbar(groups);\n      forAndroid(editor, function () {\n        realm.focusToolbar();\n      });\n      query(editor).each(function (link) {\n        editor.selection.select(link.dom);\n      });\n    });\n  };\n  var isRecursive = function isRecursive(component, originator, target) {\n    return eq(originator, component.element) && !eq(originator, target);\n  };\n  var events$2 = derive$3([can(focus$4(), function (component, simulatedEvent) {\n    var event = simulatedEvent.event;\n    var originator = event.originator;\n    var target = event.target;\n    if (isRecursive(component, originator, target)) {\n      console.warn(focus$4() + ' did not get interpreted by the desired target. ' + '\\nOriginator: ' + element(originator) + '\\nTarget: ' + element(target) + '\\nCheck the ' + focus$4() + ' event handlers');\n      return false;\n    } else {\n      return true;\n    }\n  })]);\n  var DefaultEvents = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    events: events$2\n  });\n  var make$3 = identity;\n  var NoContextApi = function NoContextApi(getComp) {\n    var getMessage = function getMessage(event) {\n      return 'The component must be in a context to execute: ' + event + (getComp ? '\\n' + element(getComp().element) + ' is not in context.' : '');\n    };\n    var fail = function fail(event) {\n      return function () {\n        throw new Error(getMessage(event));\n      };\n    };\n    var warn = function warn(event) {\n      return function () {\n        console.warn(getMessage(event));\n      };\n    };\n    return {\n      debugInfo: constant$1('fake'),\n      triggerEvent: warn('triggerEvent'),\n      triggerFocus: warn('triggerFocus'),\n      triggerEscape: warn('triggerEscape'),\n      broadcast: warn('broadcast'),\n      broadcastOn: warn('broadcastOn'),\n      broadcastEvent: warn('broadcastEvent'),\n      build: fail('build'),\n      addToWorld: fail('addToWorld'),\n      removeFromWorld: fail('removeFromWorld'),\n      addToGui: fail('addToGui'),\n      removeFromGui: fail('removeFromGui'),\n      getByUid: fail('getByUid'),\n      getByDom: fail('getByDom'),\n      isConnected: never\n    };\n  };\n  var singleton = NoContextApi();\n  var generateFrom$1 = function generateFrom$1(spec, all) {\n    var schema = map$2(all, function (a) {\n      return optionObjOf(a.name(), [required$1('config'), defaulted('state', NoState)]);\n    });\n    var validated = asRaw('component.behaviours', objOf(schema), spec.behaviours).fold(function (errInfo) {\n      throw new Error(formatError(errInfo) + '\\nComplete spec:\\n' + JSON.stringify(spec, null, 2));\n    }, identity);\n    return {\n      list: all,\n      data: map$1(validated, function (optBlobThunk) {\n        var output = optBlobThunk.map(function (blob) {\n          return {\n            config: blob.config,\n            state: blob.state.init(blob.config)\n          };\n        });\n        return constant$1(output);\n      })\n    };\n  };\n  var getBehaviours$1 = function getBehaviours$1(bData) {\n    return bData.list;\n  };\n  var getData = function getData(bData) {\n    return bData.data;\n  };\n  var byInnerKey = function byInnerKey(data, tuple) {\n    var r = {};\n    each(data, function (detail, key) {\n      each(detail, function (value, indexKey) {\n        var chain = get$c(r, indexKey).getOr([]);\n        r[indexKey] = chain.concat([tuple(key, value)]);\n      });\n    });\n    return r;\n  };\n  var combine$1 = function combine$1(info, baseMod, behaviours, base) {\n    var modsByBehaviour = _assign({}, baseMod);\n    each$1(behaviours, function (behaviour) {\n      modsByBehaviour[behaviour.name()] = behaviour.exhibit(info, base);\n    });\n    var byAspect = byInnerKey(modsByBehaviour, function (name, modification) {\n      return {\n        name: name,\n        modification: modification\n      };\n    });\n    var combineObjects = function combineObjects(objects) {\n      return foldr(objects, function (b, a) {\n        return _assign(_assign({}, a.modification), b);\n      }, {});\n    };\n    var combinedClasses = foldr(byAspect.classes, function (b, a) {\n      return a.modification.concat(b);\n    }, []);\n    var combinedAttributes = combineObjects(byAspect.attributes);\n    var combinedStyles = combineObjects(byAspect.styles);\n    return nu$3({\n      classes: combinedClasses,\n      attributes: combinedAttributes,\n      styles: combinedStyles\n    });\n  };\n  var sortKeys = function sortKeys(label, keyName, array, order) {\n    try {\n      var sorted = sort(array, function (a, b) {\n        var aKey = a[keyName];\n        var bKey = b[keyName];\n        var aIndex = order.indexOf(aKey);\n        var bIndex = order.indexOf(bKey);\n        if (aIndex === -1) {\n          throw new Error('The ordering for ' + label + ' does not have an entry for ' + aKey + '.\\nOrder specified: ' + JSON.stringify(order, null, 2));\n        }\n        if (bIndex === -1) {\n          throw new Error('The ordering for ' + label + ' does not have an entry for ' + bKey + '.\\nOrder specified: ' + JSON.stringify(order, null, 2));\n        }\n        if (aIndex < bIndex) {\n          return -1;\n        } else if (bIndex < aIndex) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n      return Result.value(sorted);\n    } catch (err) {\n      return Result.error([err]);\n    }\n  };\n  var uncurried = function uncurried(handler, purpose) {\n    return {\n      handler: handler,\n      purpose: purpose\n    };\n  };\n  var curried = function curried(handler, purpose) {\n    return {\n      cHandler: handler,\n      purpose: purpose\n    };\n  };\n  var curryArgs = function curryArgs(descHandler, extraArgs) {\n    return curried(curry.apply(undefined, [descHandler.handler].concat(extraArgs)), descHandler.purpose);\n  };\n  var getCurried = function getCurried(descHandler) {\n    return descHandler.cHandler;\n  };\n  var behaviourTuple = function behaviourTuple(name, handler) {\n    return {\n      name: name,\n      handler: handler\n    };\n  };\n  var nameToHandlers = function nameToHandlers(behaviours, info) {\n    var r = {};\n    each$1(behaviours, function (behaviour) {\n      r[behaviour.name()] = behaviour.handlers(info);\n    });\n    return r;\n  };\n  var groupByEvents = function groupByEvents(info, behaviours, base) {\n    var behaviourEvents = _assign(_assign({}, base), nameToHandlers(behaviours, info));\n    return byInnerKey(behaviourEvents, behaviourTuple);\n  };\n  var combine = function combine(info, eventOrder, behaviours, base) {\n    var byEventName = groupByEvents(info, behaviours, base);\n    return combineGroups(byEventName, eventOrder);\n  };\n  var assemble = function assemble(rawHandler) {\n    var handler = read$1(rawHandler);\n    return function (component, simulatedEvent) {\n      var rest = [];\n      for (var _i = 2; _i < arguments.length; _i++) {\n        rest[_i - 2] = arguments[_i];\n      }\n      var args = [component, simulatedEvent].concat(rest);\n      if (handler.abort.apply(undefined, args)) {\n        simulatedEvent.stop();\n      } else if (handler.can.apply(undefined, args)) {\n        handler.run.apply(undefined, args);\n      }\n    };\n  };\n  var missingOrderError = function missingOrderError(eventName, tuples) {\n    return Result.error(['The event (' + eventName + ') has more than one behaviour that listens to it.\\nWhen this occurs, you must ' + 'specify an event ordering for the behaviours in your spec (e.g. [ \"listing\", \"toggling\" ]).\\nThe behaviours that ' + 'can trigger it are: ' + JSON.stringify(map$2(tuples, function (c) {\n      return c.name;\n    }), null, 2)]);\n  };\n  var fuse = function fuse(tuples, eventOrder, eventName) {\n    var order = eventOrder[eventName];\n    if (!order) {\n      return missingOrderError(eventName, tuples);\n    } else {\n      return sortKeys('Event: ' + eventName, 'name', tuples, order).map(function (sortedTuples) {\n        var handlers = map$2(sortedTuples, function (tuple) {\n          return tuple.handler;\n        });\n        return fuse$1(handlers);\n      });\n    }\n  };\n  var combineGroups = function combineGroups(byEventName, eventOrder) {\n    var r = mapToArray(byEventName, function (tuples, eventName) {\n      var combined = tuples.length === 1 ? Result.value(tuples[0].handler) : fuse(tuples, eventOrder, eventName);\n      return combined.map(function (handler) {\n        var assembled = assemble(handler);\n        var purpose = tuples.length > 1 ? filter$2(eventOrder[eventName], function (o) {\n          return exists(tuples, function (t) {\n            return t.name === o;\n          });\n        }).join(' > ') : tuples[0].name;\n        return wrap(eventName, uncurried(assembled, purpose));\n      });\n    });\n    return consolidate(r, {});\n  };\n  var _a;\n  var baseBehaviour = 'alloy.base.behaviour';\n  var schema$6 = objOf([field$2('dom', 'dom', required$2(), objOf([required$1('tag'), defaulted('styles', {}), defaulted('classes', []), defaulted('attributes', {}), option('value'), option('innerHtml')])), required$1('components'), required$1('uid'), defaulted('events', {}), defaulted('apis', {}), field$2('eventOrder', 'eventOrder', mergeWith((_a = {}, _a[execute$5()] = ['disabling', baseBehaviour, 'toggling', 'typeaheadevents'], _a[focus$4()] = [baseBehaviour, 'focusing', 'keying'], _a[systemInit()] = [baseBehaviour, 'disabling', 'toggling', 'representing'], _a[input$1()] = [baseBehaviour, 'representing', 'streaming', 'invalidating'], _a[detachedFromDom()] = [baseBehaviour, 'representing', 'item-events', 'tooltipping'], _a[mousedown()] = ['focusing', baseBehaviour, 'item-type-events'], _a[touchstart()] = ['focusing', baseBehaviour, 'item-type-events'], _a[mouseover()] = ['item-type-events', 'tooltipping'], _a[receive$1()] = ['receiving', 'reflecting', 'tooltipping'], _a)), anyValue()), option('domModification')]);\n  var toInfo = function toInfo(spec) {\n    return asRaw('custom.definition', schema$6, spec);\n  };\n  var toDefinition = function toDefinition(detail) {\n    return _assign(_assign({}, detail.dom), {\n      uid: detail.uid,\n      domChildren: map$2(detail.components, function (comp) {\n        return comp.element;\n      })\n    });\n  };\n  var toModification = function toModification(detail) {\n    return detail.domModification.fold(function () {\n      return nu$3({});\n    }, nu$3);\n  };\n  var toEvents = function toEvents(info) {\n    return info.events;\n  };\n  var add = function add(element, classes) {\n    each$1(classes, function (x) {\n      add$1(element, x);\n    });\n  };\n  var remove$1 = function remove$1(element, classes) {\n    each$1(classes, function (x) {\n      remove$3(element, x);\n    });\n  };\n  var renderToDom = function renderToDom(definition) {\n    var subject = SugarElement.fromTag(definition.tag);\n    setAll$1(subject, definition.attributes);\n    add(subject, definition.classes);\n    setAll(subject, definition.styles);\n    definition.innerHtml.each(function (html) {\n      return set$7(subject, html);\n    });\n    var children = definition.domChildren;\n    append$1(subject, children);\n    definition.value.each(function (value) {\n      set$2(subject, value);\n    });\n    if (!definition.uid) {\n      debugger;\n    }\n    writeOnly(subject, definition.uid);\n    return subject;\n  };\n  var getBehaviours = function getBehaviours(spec) {\n    var behaviours = get$c(spec, 'behaviours').getOr({});\n    return bind$3(keys(behaviours), function (name) {\n      var behaviour = behaviours[name];\n      return isNonNullable(behaviour) ? [behaviour.me] : [];\n    });\n  };\n  var generateFrom = function generateFrom(spec, all) {\n    return generateFrom$1(spec, all);\n  };\n  var generate$1 = function generate$1(spec) {\n    var all = getBehaviours(spec);\n    return generateFrom(spec, all);\n  };\n  var getDomDefinition = function getDomDefinition(info, bList, bData) {\n    var definition = toDefinition(info);\n    var infoModification = toModification(info);\n    var baseModification = {\n      'alloy.base.modification': infoModification\n    };\n    var modification = bList.length > 0 ? combine$1(bData, baseModification, bList, definition) : infoModification;\n    return merge(definition, modification);\n  };\n  var getEvents = function getEvents(info, bList, bData) {\n    var baseEvents = {\n      'alloy.base.behaviour': toEvents(info)\n    };\n    return combine(bData, info.eventOrder, bList, baseEvents).getOrDie();\n  };\n  var build$2 = function build$2(spec) {\n    var getMe = function getMe() {\n      return me;\n    };\n    var systemApi = Cell(singleton);\n    var info = getOrDie(toInfo(spec));\n    var bBlob = generate$1(spec);\n    var bList = getBehaviours$1(bBlob);\n    var bData = getData(bBlob);\n    var modDefinition = getDomDefinition(info, bList, bData);\n    var item = renderToDom(modDefinition);\n    var events = getEvents(info, bList, bData);\n    var subcomponents = Cell(info.components);\n    var connect = function connect(newApi) {\n      systemApi.set(newApi);\n    };\n    var disconnect = function disconnect() {\n      systemApi.set(NoContextApi(getMe));\n    };\n    var syncComponents = function syncComponents() {\n      var children$1 = children(item);\n      var subs = bind$3(children$1, function (child) {\n        return systemApi.get().getByDom(child).fold(function () {\n          return [];\n        }, pure$2);\n      });\n      subcomponents.set(subs);\n    };\n    var config = function config(behaviour) {\n      var b = bData;\n      var f = isFunction(b[behaviour.name()]) ? b[behaviour.name()] : function () {\n        throw new Error('Could not find ' + behaviour.name() + ' in ' + JSON.stringify(spec, null, 2));\n      };\n      return f();\n    };\n    var hasConfigured = function hasConfigured(behaviour) {\n      return isFunction(bData[behaviour.name()]);\n    };\n    var getApis = function getApis() {\n      return info.apis;\n    };\n    var readState = function readState(behaviourName) {\n      return bData[behaviourName]().map(function (b) {\n        return b.state.readState();\n      }).getOr('not enabled');\n    };\n    var me = {\n      uid: spec.uid,\n      getSystem: systemApi.get,\n      config: config,\n      hasConfigured: hasConfigured,\n      spec: spec,\n      readState: readState,\n      getApis: getApis,\n      connect: connect,\n      disconnect: disconnect,\n      element: item,\n      syncComponents: syncComponents,\n      components: subcomponents.get,\n      events: events\n    };\n    return me;\n  };\n  var buildSubcomponents = function buildSubcomponents(spec) {\n    var components = get$c(spec, 'components').getOr([]);\n    return map$2(components, build$1);\n  };\n  var buildFromSpec = function buildFromSpec(userSpec) {\n    var _a = make$3(userSpec),\n      specEvents = _a.events,\n      spec = __rest(_a, ['events']);\n    var components = buildSubcomponents(spec);\n    var completeSpec = _assign(_assign({}, spec), {\n      events: _assign(_assign({}, DefaultEvents), specEvents),\n      components: components\n    });\n    return Result.value(build$2(completeSpec));\n  };\n  var text = function text(textContent) {\n    var element = SugarElement.fromText(textContent);\n    return external({\n      element: element\n    });\n  };\n  var external = function external(spec) {\n    var extSpec = asRawOrDie$1('external.component', objOfOnly([required$1('element'), option('uid')]), spec);\n    var systemApi = Cell(NoContextApi());\n    var connect = function connect(newApi) {\n      systemApi.set(newApi);\n    };\n    var disconnect = function disconnect() {\n      systemApi.set(NoContextApi(function () {\n        return me;\n      }));\n    };\n    var uid = extSpec.uid.getOrThunk(function () {\n      return generate$2('external');\n    });\n    writeOnly(extSpec.element, uid);\n    var me = {\n      uid: uid,\n      getSystem: systemApi.get,\n      config: Optional.none,\n      hasConfigured: never,\n      connect: connect,\n      disconnect: disconnect,\n      getApis: function getApis() {\n        return {};\n      },\n      element: extSpec.element,\n      spec: spec,\n      readState: constant$1('No state'),\n      syncComponents: noop,\n      components: constant$1([]),\n      events: {}\n    };\n    return premade$1(me);\n  };\n  var uids = generate$2;\n  var isSketchSpec = function isSketchSpec(spec) {\n    return has$2(spec, 'uid');\n  };\n  var build$1 = function build$1(spec) {\n    return getPremade(spec).getOrThunk(function () {\n      var userSpecWithUid = isSketchSpec(spec) ? spec : _assign({\n        uid: uids('')\n      }, spec);\n      return buildFromSpec(userSpecWithUid).getOrDie();\n    });\n  };\n  var premade = premade$1;\n  var hoverEvent = 'alloy.item-hover';\n  var focusEvent = 'alloy.item-focus';\n  var onHover = function onHover(item) {\n    if (search(item.element).isNone() || Focusing.isFocused(item)) {\n      if (!Focusing.isFocused(item)) {\n        Focusing.focus(item);\n      }\n      emitWith(item, hoverEvent, {\n        item: item\n      });\n    }\n  };\n  var _onFocus = function onFocus(item) {\n    emitWith(item, focusEvent, {\n      item: item\n    });\n  };\n  var hover = constant$1(hoverEvent);\n  var focus$1 = constant$1(focusEvent);\n  var builder$2 = function builder$2(detail) {\n    return {\n      dom: detail.dom,\n      domModification: _assign(_assign({}, detail.domModification), {\n        attributes: _assign(_assign(_assign({\n          'role': detail.toggling.isSome() ? 'menuitemcheckbox' : 'menuitem'\n        }, detail.domModification.attributes), {\n          'aria-haspopup': detail.hasSubmenu\n        }), detail.hasSubmenu ? {\n          'aria-expanded': false\n        } : {})\n      }),\n      behaviours: SketchBehaviours.augment(detail.itemBehaviours, [detail.toggling.fold(Toggling.revoke, function (tConfig) {\n        return Toggling.config(_assign({\n          aria: {\n            mode: 'checked'\n          }\n        }, tConfig));\n      }), Focusing.config({\n        ignore: detail.ignoreFocus,\n        stopMousedown: detail.ignoreFocus,\n        onFocus: function onFocus(component) {\n          _onFocus(component);\n        }\n      }), Keying.config({\n        mode: 'execution'\n      }), Representing.config({\n        store: {\n          mode: 'memory',\n          initialValue: detail.data\n        }\n      }), config('item-type-events', __spreadArray(__spreadArray([], pointerEvents(), true), [run(mouseover(), onHover), run(focusItem(), Focusing.focus)], false))]),\n      components: detail.components,\n      eventOrder: detail.eventOrder\n    };\n  };\n  var schema$5 = [required$1('data'), required$1('components'), required$1('dom'), defaulted('hasSubmenu', false), option('toggling'), SketchBehaviours.field('itemBehaviours', [Toggling, Focusing, Keying, Representing]), defaulted('ignoreFocus', false), defaulted('domModification', {}), output('builder', builder$2), defaulted('eventOrder', {})];\n  var builder$1 = function builder$1(detail) {\n    return {\n      dom: detail.dom,\n      components: detail.components,\n      events: derive$3([stopper(focusItem())])\n    };\n  };\n  var schema$4 = [required$1('dom'), required$1('components'), output('builder', builder$1)];\n  var owner = constant$1('item-widget');\n  var parts$3 = constant$1([required({\n    name: 'widget',\n    overrides: function overrides(detail) {\n      return {\n        behaviours: derive$2([Representing.config({\n          store: {\n            mode: 'manual',\n            getValue: function getValue(_component) {\n              return detail.data;\n            },\n            setValue: noop\n          }\n        })])\n      };\n    }\n  })]);\n  var builder = function builder(detail) {\n    var subs = substitutes(owner(), detail, parts$3());\n    var components$1 = components(owner(), detail, subs.internals());\n    var focusWidget = function focusWidget(component) {\n      return getPart(component, detail, 'widget').map(function (widget) {\n        Keying.focusIn(widget);\n        return widget;\n      });\n    };\n    var onHorizontalArrow = function onHorizontalArrow(component, simulatedEvent) {\n      return inside(simulatedEvent.event.target) ? Optional.none() : function () {\n        if (detail.autofocus) {\n          simulatedEvent.setSource(component.element);\n          return Optional.none();\n        } else {\n          return Optional.none();\n        }\n      }();\n    };\n    return {\n      dom: detail.dom,\n      components: components$1,\n      domModification: detail.domModification,\n      events: derive$3([runOnExecute(function (component, simulatedEvent) {\n        focusWidget(component).each(function (_widget) {\n          simulatedEvent.stop();\n        });\n      }), run(mouseover(), onHover), run(focusItem(), function (component, _simulatedEvent) {\n        if (detail.autofocus) {\n          focusWidget(component);\n        } else {\n          Focusing.focus(component);\n        }\n      })]),\n      behaviours: SketchBehaviours.augment(detail.widgetBehaviours, [Representing.config({\n        store: {\n          mode: 'memory',\n          initialValue: detail.data\n        }\n      }), Focusing.config({\n        ignore: detail.ignoreFocus,\n        onFocus: function onFocus(component) {\n          _onFocus(component);\n        }\n      }), Keying.config({\n        mode: 'special',\n        focusIn: detail.autofocus ? function (component) {\n          focusWidget(component);\n        } : revoke(),\n        onLeft: onHorizontalArrow,\n        onRight: onHorizontalArrow,\n        onEscape: function onEscape(component, simulatedEvent) {\n          if (!Focusing.isFocused(component) && !detail.autofocus) {\n            Focusing.focus(component);\n            return Optional.some(true);\n          } else if (detail.autofocus) {\n            simulatedEvent.setSource(component.element);\n            return Optional.none();\n          } else {\n            return Optional.none();\n          }\n        }\n      })])\n    };\n  };\n  var schema$3 = [required$1('uid'), required$1('data'), required$1('components'), required$1('dom'), defaulted('autofocus', false), defaulted('ignoreFocus', false), SketchBehaviours.field('widgetBehaviours', [Representing, Focusing, Keying]), defaulted('domModification', {}), defaultUidsSchema(parts$3()), output('builder', builder)];\n  var itemSchema = choose$1('type', {\n    widget: schema$3,\n    item: schema$5,\n    separator: schema$4\n  });\n  var configureGrid = function configureGrid(detail, movementInfo) {\n    return {\n      mode: 'flatgrid',\n      selector: '.' + detail.markers.item,\n      initSize: {\n        numColumns: movementInfo.initSize.numColumns,\n        numRows: movementInfo.initSize.numRows\n      },\n      focusManager: detail.focusManager\n    };\n  };\n  var configureMatrix = function configureMatrix(detail, movementInfo) {\n    return {\n      mode: 'matrix',\n      selectors: {\n        row: movementInfo.rowSelector,\n        cell: '.' + detail.markers.item\n      },\n      focusManager: detail.focusManager\n    };\n  };\n  var configureMenu = function configureMenu(detail, movementInfo) {\n    return {\n      mode: 'menu',\n      selector: '.' + detail.markers.item,\n      moveOnTab: movementInfo.moveOnTab,\n      focusManager: detail.focusManager\n    };\n  };\n  var parts$2 = constant$1([group({\n    factory: {\n      sketch: function sketch(spec) {\n        var itemInfo = asRawOrDie$1('menu.spec item', itemSchema, spec);\n        return itemInfo.builder(itemInfo);\n      }\n    },\n    name: 'items',\n    unit: 'item',\n    defaults: function defaults(detail, u) {\n      return has$2(u, 'uid') ? u : _assign(_assign({}, u), {\n        uid: generate$2('item')\n      });\n    },\n    overrides: function overrides(detail, u) {\n      return {\n        type: u.type,\n        ignoreFocus: detail.fakeFocus,\n        domModification: {\n          classes: [detail.markers.item]\n        }\n      };\n    }\n  })]);\n  var schema$2 = constant$1([required$1('value'), required$1('items'), required$1('dom'), required$1('components'), defaulted('eventOrder', {}), field$1('menuBehaviours', [Highlighting, Representing, Composing, Keying]), defaultedOf('movement', {\n    mode: 'menu',\n    moveOnTab: true\n  }, choose$1('mode', {\n    grid: [initSize(), output('config', configureGrid)],\n    matrix: [output('config', configureMatrix), required$1('rowSelector')],\n    menu: [defaulted('moveOnTab', true), output('config', configureMenu)]\n  })), itemMarkers(), defaulted('fakeFocus', false), defaulted('focusManager', dom$2()), onHandler('onHighlight')]);\n  var focus = constant$1('alloy.menu-focus');\n  var make$2 = function make$2(detail, components, _spec, _externals) {\n    return {\n      uid: detail.uid,\n      dom: detail.dom,\n      markers: detail.markers,\n      behaviours: augment(detail.menuBehaviours, [Highlighting.config({\n        highlightClass: detail.markers.selectedItem,\n        itemClass: detail.markers.item,\n        onHighlight: detail.onHighlight\n      }), Representing.config({\n        store: {\n          mode: 'memory',\n          initialValue: detail.value\n        }\n      }), Composing.config({\n        find: Optional.some\n      }), Keying.config(detail.movement.config(detail, detail.movement))]),\n      events: derive$3([run(focus$1(), function (menu, simulatedEvent) {\n        var event = simulatedEvent.event;\n        menu.getSystem().getByDom(event.target).each(function (item) {\n          Highlighting.highlight(menu, item);\n          simulatedEvent.stop();\n          emitWith(menu, focus(), {\n            menu: menu,\n            item: item\n          });\n        });\n      }), run(hover(), function (menu, simulatedEvent) {\n        var item = simulatedEvent.event.item;\n        Highlighting.highlight(menu, item);\n      })]),\n      components: components,\n      eventOrder: detail.eventOrder,\n      domModification: {\n        attributes: {\n          role: 'menu'\n        }\n      }\n    };\n  };\n  var Menu = composite({\n    name: 'Menu',\n    configFields: schema$2(),\n    partFields: parts$2(),\n    factory: make$2\n  });\n  var preserve = function preserve(f, container) {\n    var dos = getRootNode(container);\n    var refocus = active(dos).bind(function (focused) {\n      var hasFocus = function hasFocus(elem) {\n        return eq(focused, elem);\n      };\n      return hasFocus(container) ? Optional.some(container) : descendant$1(container, hasFocus);\n    });\n    var result = f(container);\n    refocus.each(function (oldFocus) {\n      active(dos).filter(function (newFocus) {\n        return eq(newFocus, oldFocus);\n      }).fold(function () {\n        focus$3(oldFocus);\n      }, noop);\n    });\n    return result;\n  };\n  var set = function set(component, replaceConfig, replaceState, data) {\n    preserve(function () {\n      var newChildren = map$2(data, component.getSystem().build);\n      replaceChildren(component, newChildren);\n    }, component.element);\n  };\n  var insert = function insert(component, replaceConfig, insertion, childSpec) {\n    var child = component.getSystem().build(childSpec);\n    attachWith(component, child, insertion);\n  };\n  var append = function append(component, replaceConfig, replaceState, appendee) {\n    insert(component, replaceConfig, append$2, appendee);\n  };\n  var prepend = function prepend(component, replaceConfig, replaceState, prependee) {\n    insert(component, replaceConfig, prepend$1, prependee);\n  };\n  var remove = function remove(component, replaceConfig, replaceState, removee) {\n    var children = contents(component);\n    var foundChild = find$2(children, function (child) {\n      return eq(removee.element, child.element);\n    });\n    foundChild.each(detach);\n  };\n  var contents = function contents(component, _replaceConfig) {\n    return component.components();\n  };\n  var replaceAt = function replaceAt(component, replaceConfig, replaceState, replaceeIndex, replacer) {\n    var children = contents(component);\n    return Optional.from(children[replaceeIndex]).map(function (replacee) {\n      remove(component, replaceConfig, replaceState, replacee);\n      replacer.each(function (r) {\n        insert(component, replaceConfig, function (p, c) {\n          appendAt(p, c, replaceeIndex);\n        }, r);\n      });\n      return replacee;\n    });\n  };\n  var replaceBy = function replaceBy(component, replaceConfig, replaceState, replaceePred, replacer) {\n    var children = contents(component);\n    return findIndex$1(children, replaceePred).bind(function (replaceeIndex) {\n      return replaceAt(component, replaceConfig, replaceState, replaceeIndex, replacer);\n    });\n  };\n  var ReplaceApis = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    append: append,\n    prepend: prepend,\n    remove: remove,\n    replaceAt: replaceAt,\n    replaceBy: replaceBy,\n    set: set,\n    contents: contents\n  });\n  var Replacing = create$5({\n    fields: [],\n    name: 'replacing',\n    apis: ReplaceApis\n  });\n  var transpose = function transpose(obj) {\n    return tupleMap(obj, function (v, k) {\n      return {\n        k: v,\n        v: k\n      };\n    });\n  };\n  var trace = function trace(items, byItem, byMenu, finish) {\n    return get$c(byMenu, finish).bind(function (triggerItem) {\n      return get$c(items, triggerItem).bind(function (triggerMenu) {\n        var rest = trace(items, byItem, byMenu, triggerMenu);\n        return Optional.some([triggerMenu].concat(rest));\n      });\n    }).getOr([]);\n  };\n  var generate = function generate(menus, expansions) {\n    var items = {};\n    each(menus, function (menuItems, menu) {\n      each$1(menuItems, function (item) {\n        items[item] = menu;\n      });\n    });\n    var byItem = expansions;\n    var byMenu = transpose(expansions);\n    var menuPaths = map$1(byMenu, function (_triggerItem, submenu) {\n      return [submenu].concat(trace(items, byItem, byMenu, submenu));\n    });\n    return map$1(items, function (menu) {\n      return get$c(menuPaths, menu).getOr([menu]);\n    });\n  };\n  var init$2 = function init$2() {\n    var expansions = Cell({});\n    var menus = Cell({});\n    var paths = Cell({});\n    var primary = value();\n    var directory = Cell({});\n    var clear = function clear() {\n      expansions.set({});\n      menus.set({});\n      paths.set({});\n      primary.clear();\n    };\n    var isClear = function isClear() {\n      return primary.get().isNone();\n    };\n    var setMenuBuilt = function setMenuBuilt(menuName, built) {\n      var _a;\n      menus.set(_assign(_assign({}, menus.get()), (_a = {}, _a[menuName] = {\n        type: 'prepared',\n        menu: built\n      }, _a)));\n    };\n    var setContents = function setContents(sPrimary, sMenus, sExpansions, dir) {\n      primary.set(sPrimary);\n      expansions.set(sExpansions);\n      menus.set(sMenus);\n      directory.set(dir);\n      var sPaths = generate(dir, sExpansions);\n      paths.set(sPaths);\n    };\n    var getTriggeringItem = function getTriggeringItem(menuValue) {\n      return find(expansions.get(), function (v, _k) {\n        return v === menuValue;\n      });\n    };\n    var getTriggerData = function getTriggerData(menuValue, getItemByValue, path) {\n      return getPreparedMenu(menuValue).bind(function (menu) {\n        return getTriggeringItem(menuValue).bind(function (triggeringItemValue) {\n          return getItemByValue(triggeringItemValue).map(function (triggeredItem) {\n            return {\n              triggeredMenu: menu,\n              triggeringItem: triggeredItem,\n              triggeringPath: path\n            };\n          });\n        });\n      });\n    };\n    var getTriggeringPath = function getTriggeringPath(itemValue, getItemByValue) {\n      var extraPath = filter$2(lookupItem(itemValue).toArray(), function (menuValue) {\n        return getPreparedMenu(menuValue).isSome();\n      });\n      return get$c(paths.get(), itemValue).bind(function (path) {\n        var revPath = reverse(extraPath.concat(path));\n        var triggers = bind$3(revPath, function (menuValue, menuIndex) {\n          return getTriggerData(menuValue, getItemByValue, revPath.slice(0, menuIndex + 1)).fold(function () {\n            return is(primary.get(), menuValue) ? [] : [Optional.none()];\n          }, function (data) {\n            return [Optional.some(data)];\n          });\n        });\n        return sequence(triggers);\n      });\n    };\n    var expand = function expand(itemValue) {\n      return get$c(expansions.get(), itemValue).map(function (menu) {\n        var current = get$c(paths.get(), itemValue).getOr([]);\n        return [menu].concat(current);\n      });\n    };\n    var collapse = function collapse(itemValue) {\n      return get$c(paths.get(), itemValue).bind(function (path) {\n        return path.length > 1 ? Optional.some(path.slice(1)) : Optional.none();\n      });\n    };\n    var refresh = function refresh(itemValue) {\n      return get$c(paths.get(), itemValue);\n    };\n    var getPreparedMenu = function getPreparedMenu(menuValue) {\n      return lookupMenu(menuValue).bind(extractPreparedMenu);\n    };\n    var lookupMenu = function lookupMenu(menuValue) {\n      return get$c(menus.get(), menuValue);\n    };\n    var lookupItem = function lookupItem(itemValue) {\n      return get$c(expansions.get(), itemValue);\n    };\n    var otherMenus = function otherMenus(path) {\n      var menuValues = directory.get();\n      return difference(keys(menuValues), path);\n    };\n    var getPrimary = function getPrimary() {\n      return primary.get().bind(getPreparedMenu);\n    };\n    var getMenus = function getMenus() {\n      return menus.get();\n    };\n    return {\n      setMenuBuilt: setMenuBuilt,\n      setContents: setContents,\n      expand: expand,\n      refresh: refresh,\n      collapse: collapse,\n      lookupMenu: lookupMenu,\n      lookupItem: lookupItem,\n      otherMenus: otherMenus,\n      getPrimary: getPrimary,\n      getMenus: getMenus,\n      clear: clear,\n      isClear: isClear,\n      getTriggeringPath: getTriggeringPath\n    };\n  };\n  var extractPreparedMenu = function extractPreparedMenu(prep) {\n    return prep.type === 'prepared' ? Optional.some(prep.menu) : Optional.none();\n  };\n  var LayeredState = {\n    init: init$2,\n    extractPreparedMenu: extractPreparedMenu\n  };\n  var make$1 = function make$1(detail, _rawUiSpec) {\n    var submenuParentItems = value();\n    var buildMenus = function buildMenus(container, primaryName, menus) {\n      return map$1(menus, function (spec, name) {\n        var makeSketch = function makeSketch() {\n          return Menu.sketch(_assign(_assign({}, spec), {\n            value: name,\n            markers: detail.markers,\n            fakeFocus: detail.fakeFocus,\n            onHighlight: detail.onHighlight,\n            focusManager: detail.fakeFocus ? highlights() : dom$2()\n          }));\n        };\n        return name === primaryName ? {\n          type: 'prepared',\n          menu: container.getSystem().build(makeSketch())\n        } : {\n          type: 'notbuilt',\n          nbMenu: makeSketch\n        };\n      });\n    };\n    var layeredState = LayeredState.init();\n    var setup = function setup(container) {\n      var componentMap = buildMenus(container, detail.data.primary, detail.data.menus);\n      var directory = toDirectory();\n      layeredState.setContents(detail.data.primary, componentMap, detail.data.expansions, directory);\n      return layeredState.getPrimary();\n    };\n    var getItemValue = function getItemValue(item) {\n      return Representing.getValue(item).value;\n    };\n    var getItemByValue = function getItemByValue(_container, menus, itemValue) {\n      return findMap(menus, function (menu) {\n        if (!menu.getSystem().isConnected()) {\n          return Optional.none();\n        }\n        var candidates = Highlighting.getCandidates(menu);\n        return find$2(candidates, function (c) {\n          return getItemValue(c) === itemValue;\n        });\n      });\n    };\n    var toDirectory = function toDirectory(_container) {\n      return map$1(detail.data.menus, function (data, _menuName) {\n        return bind$3(data.items, function (item) {\n          return item.type === 'separator' ? [] : [item.data.value];\n        });\n      });\n    };\n    var setActiveMenu = function setActiveMenu(container, menu) {\n      Highlighting.highlight(container, menu);\n      Highlighting.getHighlighted(menu).orThunk(function () {\n        return Highlighting.getFirst(menu);\n      }).each(function (item) {\n        dispatch(container, item.element, focusItem());\n      });\n    };\n    var getMenus = function getMenus(state, menuValues) {\n      return cat(map$2(menuValues, function (mv) {\n        return state.lookupMenu(mv).bind(function (prep) {\n          return prep.type === 'prepared' ? Optional.some(prep.menu) : Optional.none();\n        });\n      }));\n    };\n    var closeOthers = function closeOthers(container, state, path) {\n      var others = getMenus(state, state.otherMenus(path));\n      each$1(others, function (o) {\n        remove$1(o.element, [detail.markers.backgroundMenu]);\n        if (!detail.stayInDom) {\n          Replacing.remove(container, o);\n        }\n      });\n    };\n    var getSubmenuParents = function getSubmenuParents(container) {\n      return submenuParentItems.get().getOrThunk(function () {\n        var r = {};\n        var items = descendants(container.element, '.' + detail.markers.item);\n        var parentItems = filter$2(items, function (i) {\n          return get$b(i, 'aria-haspopup') === 'true';\n        });\n        each$1(parentItems, function (i) {\n          container.getSystem().getByDom(i).each(function (itemComp) {\n            var key = getItemValue(itemComp);\n            r[key] = itemComp;\n          });\n        });\n        submenuParentItems.set(r);\n        return r;\n      });\n    };\n    var updateAriaExpansions = function updateAriaExpansions(container, path) {\n      var parentItems = getSubmenuParents(container);\n      each(parentItems, function (v, k) {\n        var expanded = contains$1(path, k);\n        set$8(v.element, 'aria-expanded', expanded);\n      });\n    };\n    var updateMenuPath = function updateMenuPath(container, state, path) {\n      return Optional.from(path[0]).bind(function (latestMenuName) {\n        return state.lookupMenu(latestMenuName).bind(function (menuPrep) {\n          if (menuPrep.type === 'notbuilt') {\n            return Optional.none();\n          } else {\n            var activeMenu = menuPrep.menu;\n            var rest = getMenus(state, path.slice(1));\n            each$1(rest, function (r) {\n              add$1(r.element, detail.markers.backgroundMenu);\n            });\n            if (!inBody(activeMenu.element)) {\n              Replacing.append(container, premade(activeMenu));\n            }\n            remove$1(activeMenu.element, [detail.markers.backgroundMenu]);\n            setActiveMenu(container, activeMenu);\n            closeOthers(container, state, path);\n            return Optional.some(activeMenu);\n          }\n        });\n      });\n    };\n    var ExpandHighlightDecision;\n    (function (ExpandHighlightDecision) {\n      ExpandHighlightDecision[ExpandHighlightDecision['HighlightSubmenu'] = 0] = 'HighlightSubmenu';\n      ExpandHighlightDecision[ExpandHighlightDecision['HighlightParent'] = 1] = 'HighlightParent';\n    })(ExpandHighlightDecision || (ExpandHighlightDecision = {}));\n    var buildIfRequired = function buildIfRequired(container, menuName, menuPrep) {\n      if (menuPrep.type === 'notbuilt') {\n        var menu = container.getSystem().build(menuPrep.nbMenu());\n        layeredState.setMenuBuilt(menuName, menu);\n        return menu;\n      } else {\n        return menuPrep.menu;\n      }\n    };\n    var expandRight = function expandRight(container, item, decision) {\n      if (decision === void 0) {\n        decision = ExpandHighlightDecision.HighlightSubmenu;\n      }\n      if (item.hasConfigured(Disabling) && Disabling.isDisabled(item)) {\n        return Optional.some(item);\n      } else {\n        var value = getItemValue(item);\n        return layeredState.expand(value).bind(function (path) {\n          updateAriaExpansions(container, path);\n          return Optional.from(path[0]).bind(function (menuName) {\n            return layeredState.lookupMenu(menuName).bind(function (activeMenuPrep) {\n              var activeMenu = buildIfRequired(container, menuName, activeMenuPrep);\n              if (!inBody(activeMenu.element)) {\n                Replacing.append(container, premade(activeMenu));\n              }\n              detail.onOpenSubmenu(container, item, activeMenu, reverse(path));\n              if (decision === ExpandHighlightDecision.HighlightSubmenu) {\n                Highlighting.highlightFirst(activeMenu);\n                return updateMenuPath(container, layeredState, path);\n              } else {\n                Highlighting.dehighlightAll(activeMenu);\n                return Optional.some(item);\n              }\n            });\n          });\n        });\n      }\n    };\n    var collapseLeft = function collapseLeft(container, item) {\n      var value = getItemValue(item);\n      return layeredState.collapse(value).bind(function (path) {\n        updateAriaExpansions(container, path);\n        return updateMenuPath(container, layeredState, path).map(function (activeMenu) {\n          detail.onCollapseMenu(container, item, activeMenu);\n          return activeMenu;\n        });\n      });\n    };\n    var updateView = function updateView(container, item) {\n      var value = getItemValue(item);\n      return layeredState.refresh(value).bind(function (path) {\n        updateAriaExpansions(container, path);\n        return updateMenuPath(container, layeredState, path);\n      });\n    };\n    var onRight = function onRight(container, item) {\n      return inside(item.element) ? Optional.none() : expandRight(container, item, ExpandHighlightDecision.HighlightSubmenu);\n    };\n    var onLeft = function onLeft(container, item) {\n      return inside(item.element) ? Optional.none() : collapseLeft(container, item);\n    };\n    var onEscape = function onEscape(container, item) {\n      return collapseLeft(container, item).orThunk(function () {\n        return detail.onEscape(container, item).map(function () {\n          return container;\n        });\n      });\n    };\n    var keyOnItem = function keyOnItem(f) {\n      return function (container, simulatedEvent) {\n        return closest$1(simulatedEvent.getSource(), '.' + detail.markers.item).bind(function (target) {\n          return container.getSystem().getByDom(target).toOptional().bind(function (item) {\n            return f(container, item).map(always);\n          });\n        });\n      };\n    };\n    var events = derive$3([run(focus(), function (sandbox, simulatedEvent) {\n      var item = simulatedEvent.event.item;\n      layeredState.lookupItem(getItemValue(item)).each(function () {\n        var menu = simulatedEvent.event.menu;\n        Highlighting.highlight(sandbox, menu);\n        var value = getItemValue(simulatedEvent.event.item);\n        layeredState.refresh(value).each(function (path) {\n          return closeOthers(sandbox, layeredState, path);\n        });\n      });\n    }), runOnExecute(function (component, simulatedEvent) {\n      var target = simulatedEvent.event.target;\n      component.getSystem().getByDom(target).each(function (item) {\n        var itemValue = getItemValue(item);\n        if (itemValue.indexOf('collapse-item') === 0) {\n          collapseLeft(component, item);\n        }\n        expandRight(component, item, ExpandHighlightDecision.HighlightSubmenu).fold(function () {\n          detail.onExecute(component, item);\n        }, noop);\n      });\n    }), runOnAttached(function (container, _simulatedEvent) {\n      setup(container).each(function (primary) {\n        Replacing.append(container, premade(primary));\n        detail.onOpenMenu(container, primary);\n        if (detail.highlightImmediately) {\n          setActiveMenu(container, primary);\n        }\n      });\n    })].concat(detail.navigateOnHover ? [run(hover(), function (sandbox, simulatedEvent) {\n      var item = simulatedEvent.event.item;\n      updateView(sandbox, item);\n      expandRight(sandbox, item, ExpandHighlightDecision.HighlightParent);\n      detail.onHover(sandbox, item);\n    })] : []));\n    var getActiveItem = function getActiveItem(container) {\n      return Highlighting.getHighlighted(container).bind(Highlighting.getHighlighted);\n    };\n    var collapseMenuApi = function collapseMenuApi(container) {\n      getActiveItem(container).each(function (currentItem) {\n        collapseLeft(container, currentItem);\n      });\n    };\n    var highlightPrimary = function highlightPrimary(container) {\n      layeredState.getPrimary().each(function (primary) {\n        setActiveMenu(container, primary);\n      });\n    };\n    var extractMenuFromContainer = function extractMenuFromContainer(container) {\n      return Optional.from(container.components()[0]).filter(function (comp) {\n        return get$b(comp.element, 'role') === 'menu';\n      });\n    };\n    var repositionMenus = function repositionMenus(container) {\n      var maybeActivePrimary = layeredState.getPrimary().bind(function (primary) {\n        return getActiveItem(container).bind(function (currentItem) {\n          var itemValue = getItemValue(currentItem);\n          var allMenus = values(layeredState.getMenus());\n          var preparedMenus = cat(map$2(allMenus, LayeredState.extractPreparedMenu));\n          return layeredState.getTriggeringPath(itemValue, function (v) {\n            return getItemByValue(container, preparedMenus, v);\n          });\n        }).map(function (triggeringPath) {\n          return {\n            primary: primary,\n            triggeringPath: triggeringPath\n          };\n        });\n      });\n      maybeActivePrimary.fold(function () {\n        extractMenuFromContainer(container).each(function (primaryMenu) {\n          detail.onRepositionMenu(container, primaryMenu, []);\n        });\n      }, function (_a) {\n        var primary = _a.primary,\n          triggeringPath = _a.triggeringPath;\n        detail.onRepositionMenu(container, primary, triggeringPath);\n      });\n    };\n    var apis = {\n      collapseMenu: collapseMenuApi,\n      highlightPrimary: highlightPrimary,\n      repositionMenus: repositionMenus\n    };\n    return {\n      uid: detail.uid,\n      dom: detail.dom,\n      markers: detail.markers,\n      behaviours: augment(detail.tmenuBehaviours, [Keying.config({\n        mode: 'special',\n        onRight: keyOnItem(onRight),\n        onLeft: keyOnItem(onLeft),\n        onEscape: keyOnItem(onEscape),\n        focusIn: function focusIn(container, _keyInfo) {\n          layeredState.getPrimary().each(function (primary) {\n            dispatch(container, primary.element, focusItem());\n          });\n        }\n      }), Highlighting.config({\n        highlightClass: detail.markers.selectedMenu,\n        itemClass: detail.markers.menu\n      }), Composing.config({\n        find: function find(container) {\n          return Highlighting.getHighlighted(container);\n        }\n      }), Replacing.config({})]),\n      eventOrder: detail.eventOrder,\n      apis: apis,\n      events: events\n    };\n  };\n  var collapseItem$1 = constant$1('collapse-item');\n  var tieredData = function tieredData(primary, menus, expansions) {\n    return {\n      primary: primary,\n      menus: menus,\n      expansions: expansions\n    };\n  };\n  var singleData = function singleData(name, menu) {\n    return {\n      primary: name,\n      menus: wrap(name, menu),\n      expansions: {}\n    };\n  };\n  var collapseItem = function collapseItem(text) {\n    return {\n      value: generate$4(collapseItem$1()),\n      meta: {\n        text: text\n      }\n    };\n  };\n  var tieredMenu = single({\n    name: 'TieredMenu',\n    configFields: [onStrictKeyboardHandler('onExecute'), onStrictKeyboardHandler('onEscape'), onStrictHandler('onOpenMenu'), onStrictHandler('onOpenSubmenu'), onHandler('onRepositionMenu'), onHandler('onCollapseMenu'), defaulted('highlightImmediately', true), requiredObjOf('data', [required$1('primary'), required$1('menus'), required$1('expansions')]), defaulted('fakeFocus', false), onHandler('onHighlight'), onHandler('onHover'), tieredMenuMarkers(), required$1('dom'), defaulted('navigateOnHover', true), defaulted('stayInDom', false), field$1('tmenuBehaviours', [Keying, Highlighting, Composing, Replacing]), defaulted('eventOrder', {})],\n    apis: {\n      collapseMenu: function collapseMenu(apis, tmenu) {\n        apis.collapseMenu(tmenu);\n      },\n      highlightPrimary: function highlightPrimary(apis, tmenu) {\n        apis.highlightPrimary(tmenu);\n      },\n      repositionMenus: function repositionMenus(apis, tmenu) {\n        apis.repositionMenus(tmenu);\n      }\n    },\n    factory: make$1,\n    extraApis: {\n      tieredData: tieredData,\n      singleData: singleData,\n      collapseItem: collapseItem\n    }\n  });\n  var findRoute = function findRoute(component, transConfig, transState, route) {\n    return get$c(transConfig.routes, route.start).bind(function (sConfig) {\n      return get$c(sConfig, route.destination);\n    });\n  };\n  var getTransition = function getTransition(comp, transConfig, transState) {\n    var route = getCurrentRoute(comp, transConfig);\n    return route.bind(function (r) {\n      return getTransitionOf(comp, transConfig, transState, r);\n    });\n  };\n  var getTransitionOf = function getTransitionOf(comp, transConfig, transState, route) {\n    return findRoute(comp, transConfig, transState, route).bind(function (r) {\n      return r.transition.map(function (t) {\n        return {\n          transition: t,\n          route: r\n        };\n      });\n    });\n  };\n  var disableTransition = function disableTransition(comp, transConfig, transState) {\n    getTransition(comp, transConfig, transState).each(function (routeTransition) {\n      var t = routeTransition.transition;\n      remove$3(comp.element, t.transitionClass);\n      remove$6(comp.element, transConfig.destinationAttr);\n    });\n  };\n  var getNewRoute = function getNewRoute(comp, transConfig, transState, destination) {\n    return {\n      start: get$b(comp.element, transConfig.stateAttr),\n      destination: destination\n    };\n  };\n  var getCurrentRoute = function getCurrentRoute(comp, transConfig, _transState) {\n    var el = comp.element;\n    return getOpt(el, transConfig.destinationAttr).map(function (destination) {\n      return {\n        start: get$b(comp.element, transConfig.stateAttr),\n        destination: destination\n      };\n    });\n  };\n  var jumpTo = function jumpTo(comp, transConfig, transState, destination) {\n    disableTransition(comp, transConfig, transState);\n    if (has$1(comp.element, transConfig.stateAttr) && get$b(comp.element, transConfig.stateAttr) !== destination) {\n      transConfig.onFinish(comp, destination);\n    }\n    set$8(comp.element, transConfig.stateAttr, destination);\n  };\n  var fasttrack = function fasttrack(comp, transConfig, _transState, _destination) {\n    if (has$1(comp.element, transConfig.destinationAttr)) {\n      getOpt(comp.element, transConfig.destinationAttr).each(function (destination) {\n        set$8(comp.element, transConfig.stateAttr, destination);\n      });\n      remove$6(comp.element, transConfig.destinationAttr);\n    }\n  };\n  var progressTo = function progressTo(comp, transConfig, transState, destination) {\n    fasttrack(comp, transConfig);\n    var route = getNewRoute(comp, transConfig, transState, destination);\n    getTransitionOf(comp, transConfig, transState, route).fold(function () {\n      jumpTo(comp, transConfig, transState, destination);\n    }, function (routeTransition) {\n      disableTransition(comp, transConfig, transState);\n      var t = routeTransition.transition;\n      add$1(comp.element, t.transitionClass);\n      set$8(comp.element, transConfig.destinationAttr, destination);\n    });\n  };\n  var getState = function getState(comp, transConfig, _transState) {\n    return getOpt(comp.element, transConfig.stateAttr);\n  };\n  var TransitionApis = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    findRoute: findRoute,\n    disableTransition: disableTransition,\n    getCurrentRoute: getCurrentRoute,\n    jumpTo: jumpTo,\n    progressTo: progressTo,\n    getState: getState\n  });\n  var events$1 = function events$1(transConfig, transState) {\n    return derive$3([run(transitionend(), function (component, simulatedEvent) {\n      var raw = simulatedEvent.event.raw;\n      getCurrentRoute(component, transConfig).each(function (route) {\n        findRoute(component, transConfig, transState, route).each(function (rInfo) {\n          rInfo.transition.each(function (rTransition) {\n            if (raw.propertyName === rTransition.property) {\n              jumpTo(component, transConfig, transState, route.destination);\n              transConfig.onTransition(component, route);\n            }\n          });\n        });\n      });\n    }), runOnAttached(function (comp, _se) {\n      jumpTo(comp, transConfig, transState, transConfig.initialState);\n    })]);\n  };\n  var ActiveTransitioning = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    events: events$1\n  });\n  var TransitionSchema = [defaulted('destinationAttr', 'data-transitioning-destination'), defaulted('stateAttr', 'data-transitioning-state'), required$1('initialState'), onHandler('onTransition'), onHandler('onFinish'), requiredOf('routes', setOf(Result.value, setOf(Result.value, objOfOnly([optionObjOfOnly('transition', [required$1('property'), required$1('transitionClass')])]))))];\n  var createRoutes = function createRoutes(routes) {\n    var r = {};\n    each(routes, function (v, k) {\n      var waypoints = k.split('<->');\n      r[waypoints[0]] = wrap(waypoints[1], v);\n      r[waypoints[1]] = wrap(waypoints[0], v);\n    });\n    return r;\n  };\n  var createBistate = function createBistate(first, second, transitions) {\n    return wrapAll([{\n      key: first,\n      value: wrap(second, transitions)\n    }, {\n      key: second,\n      value: wrap(first, transitions)\n    }]);\n  };\n  var createTristate = function createTristate(first, second, third, transitions) {\n    return wrapAll([{\n      key: first,\n      value: wrapAll([{\n        key: second,\n        value: transitions\n      }, {\n        key: third,\n        value: transitions\n      }])\n    }, {\n      key: second,\n      value: wrapAll([{\n        key: first,\n        value: transitions\n      }, {\n        key: third,\n        value: transitions\n      }])\n    }, {\n      key: third,\n      value: wrapAll([{\n        key: first,\n        value: transitions\n      }, {\n        key: second,\n        value: transitions\n      }])\n    }]);\n  };\n  var Transitioning = create$5({\n    fields: TransitionSchema,\n    name: 'transitioning',\n    active: ActiveTransitioning,\n    apis: TransitionApis,\n    extra: {\n      createRoutes: createRoutes,\n      createBistate: createBistate,\n      createTristate: createTristate\n    }\n  });\n  var scrollableStyle = resolve('scrollable');\n  var register$2 = function register$2(element) {\n    add$1(element, scrollableStyle);\n  };\n  var deregister = function deregister(element) {\n    remove$3(element, scrollableStyle);\n  };\n  var scrollable = scrollableStyle;\n  var getValue = function getValue(item) {\n    return get$c(item, 'format').getOr(item.title);\n  };\n  var convert = function convert(formats, memMenuThunk) {\n    var mainMenu = makeMenu('Styles', [].concat(map$2(formats.items, function (k) {\n      return makeItem(getValue(k), k.title, k.isSelected(), k.getPreview(), hasNonNullableKey(formats.expansions, getValue(k)));\n    })), memMenuThunk, false);\n    var submenus = map$1(formats.menus, function (menuItems, menuName) {\n      var items = map$2(menuItems, function (item) {\n        return makeItem(getValue(item), item.title, item.isSelected !== undefined ? item.isSelected() : false, item.getPreview !== undefined ? item.getPreview() : '', hasNonNullableKey(formats.expansions, getValue(item)));\n      });\n      return makeMenu(menuName, items, memMenuThunk, true);\n    });\n    var menus = deepMerge(submenus, wrap('styles', mainMenu));\n    var tmenu = tieredMenu.tieredData('styles', menus, formats.expansions);\n    return {\n      tmenu: tmenu\n    };\n  };\n  var makeItem = function makeItem(value, text, selected, preview, isMenu) {\n    return {\n      data: {\n        value: value,\n        text: text\n      },\n      type: 'item',\n      dom: {\n        tag: 'div',\n        classes: isMenu ? [resolve('styles-item-is-menu')] : []\n      },\n      toggling: {\n        toggleOnExecute: false,\n        toggleClass: resolve('format-matches'),\n        selected: selected\n      },\n      itemBehaviours: derive$2(isMenu ? [] : [format(value, function (comp, status) {\n        var toggle = status ? Toggling.on : Toggling.off;\n        toggle(comp);\n      })]),\n      components: [{\n        dom: {\n          tag: 'div',\n          attributes: {\n            style: preview\n          },\n          innerHtml: text\n        }\n      }]\n    };\n  };\n  var makeMenu = function makeMenu(value, items, memMenuThunk, collapsable) {\n    return {\n      value: value,\n      dom: {\n        tag: 'div'\n      },\n      components: [Button.sketch({\n        dom: {\n          tag: 'div',\n          classes: [resolve('styles-collapser')]\n        },\n        components: collapsable ? [{\n          dom: {\n            tag: 'span',\n            classes: [resolve('styles-collapse-icon')]\n          }\n        }, text(value)] : [text(value)],\n        action: function action(item) {\n          if (collapsable) {\n            var comp = memMenuThunk().get(item);\n            tieredMenu.collapseMenu(comp);\n          }\n        }\n      }), {\n        dom: {\n          tag: 'div',\n          classes: [resolve('styles-menu-items-container')]\n        },\n        components: [Menu.parts.items({})],\n        behaviours: derive$2([config('adhoc-scrollable-menu', [runOnAttached(function (component, _simulatedEvent) {\n          set$5(component.element, 'overflow-y', 'auto');\n          set$5(component.element, '-webkit-overflow-scrolling', 'touch');\n          register$2(component.element);\n        }), runOnDetached(function (component) {\n          remove$2(component.element, 'overflow-y');\n          remove$2(component.element, '-webkit-overflow-scrolling');\n          deregister(component.element);\n        })])])\n      }],\n      items: items,\n      menuBehaviours: derive$2([Transitioning.config({\n        initialState: 'after',\n        routes: Transitioning.createTristate('before', 'current', 'after', {\n          transition: {\n            property: 'transform',\n            transitionClass: 'transitioning'\n          }\n        })\n      })])\n    };\n  };\n  var sketch$1 = function sketch$1(settings) {\n    var dataset = convert(settings.formats, function () {\n      return memMenu;\n    });\n    var memMenu = record(tieredMenu.sketch({\n      dom: {\n        tag: 'div',\n        classes: [resolve('styles-menu')]\n      },\n      components: [],\n      fakeFocus: true,\n      stayInDom: true,\n      onExecute: function onExecute(_tmenu, item) {\n        var v = Representing.getValue(item);\n        settings.handle(item, v.value);\n        return Optional.none();\n      },\n      onEscape: function onEscape() {\n        return Optional.none();\n      },\n      onOpenMenu: function onOpenMenu(container, menu) {\n        var w = get$5(container.element);\n        set$4(menu.element, w);\n        Transitioning.jumpTo(menu, 'current');\n      },\n      onOpenSubmenu: function onOpenSubmenu(container, item, submenu) {\n        var w = get$5(container.element);\n        var menu = ancestor(item.element, '[role=\"menu\"]').getOrDie('hacky');\n        var menuComp = container.getSystem().getByDom(menu).getOrDie();\n        set$4(submenu.element, w);\n        Transitioning.progressTo(menuComp, 'before');\n        Transitioning.jumpTo(submenu, 'after');\n        Transitioning.progressTo(submenu, 'current');\n      },\n      onCollapseMenu: function onCollapseMenu(container, item, menu) {\n        var submenu = ancestor(item.element, '[role=\"menu\"]').getOrDie('hacky');\n        var submenuComp = container.getSystem().getByDom(submenu).getOrDie();\n        Transitioning.progressTo(submenuComp, 'after');\n        Transitioning.progressTo(menu, 'current');\n      },\n      navigateOnHover: false,\n      highlightImmediately: true,\n      data: dataset.tmenu,\n      markers: {\n        backgroundMenu: resolve('styles-background-menu'),\n        menu: resolve('styles-menu'),\n        selectedMenu: resolve('styles-selected-menu'),\n        item: resolve('styles-item'),\n        selectedItem: resolve('styles-selected-item')\n      }\n    }));\n    return memMenu.asSpec();\n  };\n  var getFromExpandingItem = function getFromExpandingItem(item) {\n    var newItem = deepMerge(exclude(item, ['items']), {\n      menu: true\n    });\n    var rest = expand(item.items);\n    var newMenus = deepMerge(rest.menus, wrap(item.title, rest.items));\n    var newExpansions = deepMerge(rest.expansions, wrap(item.title, item.title));\n    return {\n      item: newItem,\n      menus: newMenus,\n      expansions: newExpansions\n    };\n  };\n  var getFromItem = function getFromItem(item) {\n    return hasNonNullableKey(item, 'items') ? getFromExpandingItem(item) : {\n      item: item,\n      menus: {},\n      expansions: {}\n    };\n  };\n  var expand = function expand(items) {\n    return foldr(items, function (acc, item) {\n      var newData = getFromItem(item);\n      return {\n        menus: deepMerge(acc.menus, newData.menus),\n        items: [newData.item].concat(acc.items),\n        expansions: deepMerge(acc.expansions, newData.expansions)\n      };\n    }, {\n      menus: {},\n      expansions: {},\n      items: []\n    });\n  };\n  var register$1 = function register$1(editor) {\n    var isSelectedFor = function isSelectedFor(format) {\n      return function () {\n        return editor.formatter.match(format);\n      };\n    };\n    var getPreview = function getPreview(format) {\n      return function () {\n        return editor.formatter.getCssText(format);\n      };\n    };\n    var enrichSupported = function enrichSupported(item) {\n      return deepMerge(item, {\n        isSelected: isSelectedFor(item.format),\n        getPreview: getPreview(item.format)\n      });\n    };\n    var enrichMenu = function enrichMenu(item) {\n      return deepMerge(item, {\n        isSelected: never,\n        getPreview: constant$1('')\n      });\n    };\n    var enrichCustom = function enrichCustom(item) {\n      var formatName = generate$4(item.title);\n      var newItem = deepMerge(item, {\n        format: formatName,\n        isSelected: isSelectedFor(formatName),\n        getPreview: getPreview(formatName)\n      });\n      editor.formatter.register(formatName, newItem);\n      return newItem;\n    };\n    var doEnrich = function doEnrich(items) {\n      return map$2(items, function (item) {\n        if (hasNonNullableKey(item, 'items')) {\n          var newItems = doEnrich(item.items);\n          return deepMerge(enrichMenu(item), {\n            items: newItems\n          });\n        } else if (hasNonNullableKey(item, 'format')) {\n          return enrichSupported(item);\n        } else {\n          return enrichCustom(item);\n        }\n      });\n    };\n    return doEnrich(getStyleFormats(editor));\n  };\n  var prune = function prune(editor, formats) {\n    var doPrune = function doPrune(items) {\n      return bind$3(items, function (item) {\n        if (item.items !== undefined) {\n          var newItems = doPrune(item.items);\n          return newItems.length > 0 ? [item] : [];\n        } else {\n          var keep = hasNonNullableKey(item, 'format') ? editor.formatter.canApply(item.format) : true;\n          return keep ? [item] : [];\n        }\n      });\n    };\n    var prunedItems = doPrune(formats);\n    return expand(prunedItems);\n  };\n  var ui = function ui(editor, formats, onDone) {\n    var pruned = prune(editor, formats);\n    return sketch$1({\n      formats: pruned,\n      handle: function handle(item, value) {\n        editor.undoManager.transact(function () {\n          if (Toggling.isOn(item)) {\n            editor.formatter.remove(value);\n          } else {\n            editor.formatter.apply(value);\n          }\n        });\n        onDone();\n      }\n    });\n  };\n  var extract = function extract(rawToolbar) {\n    var toolbar = rawToolbar.replace(/\\|/g, ' ').trim();\n    return toolbar.length > 0 ? toolbar.split(/\\s+/) : [];\n  };\n  var identifyFromArray = function identifyFromArray(toolbar) {\n    return bind$3(toolbar, function (item) {\n      return isArray(item) ? identifyFromArray(item) : extract(item);\n    });\n  };\n  var identify = function identify(editor) {\n    var toolbar = getToolbar(editor);\n    return isArray(toolbar) ? identifyFromArray(toolbar) : extract(toolbar);\n  };\n  var setup$3 = function setup$3(realm, editor) {\n    var commandSketch = function commandSketch(name) {\n      return function () {\n        return forToolbarCommand(editor, name);\n      };\n    };\n    var stateCommandSketch = function stateCommandSketch(name) {\n      return function () {\n        return forToolbarStateCommand(editor, name);\n      };\n    };\n    var actionSketch = function actionSketch(name, query, action) {\n      return function () {\n        return forToolbarStateAction(editor, name, query, action);\n      };\n    };\n    var undo = commandSketch('undo');\n    var redo = commandSketch('redo');\n    var bold = stateCommandSketch('bold');\n    var italic = stateCommandSketch('italic');\n    var underline = stateCommandSketch('underline');\n    var removeformat = commandSketch('removeformat');\n    var link = function link() {\n      return sketch$2(realm, editor);\n    };\n    var unlink = actionSketch('unlink', 'link', function () {\n      editor.execCommand('unlink', null, false);\n    });\n    var image = function image() {\n      return sketch$5(editor);\n    };\n    var bullist = actionSketch('unordered-list', 'ul', function () {\n      editor.execCommand('InsertUnorderedList', null, false);\n    });\n    var numlist = actionSketch('ordered-list', 'ol', function () {\n      editor.execCommand('InsertOrderedList', null, false);\n    });\n    var fontsizeselect = function fontsizeselect() {\n      return sketch$6(realm, editor);\n    };\n    var forecolor = function forecolor() {\n      return sketch$8(realm, editor);\n    };\n    var styleFormats = register$1(editor);\n    var styleFormatsMenu = function styleFormatsMenu() {\n      return ui(editor, styleFormats, function () {\n        editor.fire('scrollIntoView');\n      });\n    };\n    var styleselect = function styleselect() {\n      return forToolbar('style-formats', function (button) {\n        editor.fire('toReading');\n        realm.dropup.appear(styleFormatsMenu, Toggling.on, button);\n      }, derive$2([Toggling.config({\n        toggleClass: resolve('toolbar-button-selected'),\n        toggleOnExecute: false,\n        aria: {\n          mode: 'pressed'\n        }\n      }), Receiving.config({\n        channels: wrapAll([receive(orientationChanged, Toggling.off), receive(dropupDismissed, Toggling.off)])\n      })]), editor);\n    };\n    var feature = function feature(prereq, sketch) {\n      return {\n        isSupported: function isSupported() {\n          var buttons = editor.ui.registry.getAll().buttons;\n          return prereq.forall(function (p) {\n            return hasNonNullableKey(buttons, p);\n          });\n        },\n        sketch: sketch\n      };\n    };\n    return {\n      undo: feature(Optional.none(), undo),\n      redo: feature(Optional.none(), redo),\n      bold: feature(Optional.none(), bold),\n      italic: feature(Optional.none(), italic),\n      underline: feature(Optional.none(), underline),\n      removeformat: feature(Optional.none(), removeformat),\n      link: feature(Optional.none(), link),\n      unlink: feature(Optional.none(), unlink),\n      image: feature(Optional.none(), image),\n      bullist: feature(Optional.some('bullist'), bullist),\n      numlist: feature(Optional.some('numlist'), numlist),\n      fontsizeselect: feature(Optional.none(), fontsizeselect),\n      forecolor: feature(Optional.none(), forecolor),\n      styleselect: feature(Optional.none(), styleselect)\n    };\n  };\n  var detect = function detect(editor, features) {\n    var itemNames = identify(editor);\n    var present = {};\n    return bind$3(itemNames, function (iName) {\n      var r = !hasNonNullableKey(present, iName) && hasNonNullableKey(features, iName) && features[iName].isSupported() ? [features[iName].sketch()] : [];\n      present[iName] = true;\n      return r;\n    });\n  };\n  var mkEvent = function mkEvent(target, x, y, stop, prevent, kill, raw) {\n    return {\n      target: target,\n      x: x,\n      y: y,\n      stop: stop,\n      prevent: prevent,\n      kill: kill,\n      raw: raw\n    };\n  };\n  var fromRawEvent = function fromRawEvent(rawEvent) {\n    var target = SugarElement.fromDom(getOriginalEventTarget(rawEvent).getOr(rawEvent.target));\n    var stop = function stop() {\n      return rawEvent.stopPropagation();\n    };\n    var prevent = function prevent() {\n      return rawEvent.preventDefault();\n    };\n    var kill = compose(prevent, stop);\n    return mkEvent(target, rawEvent.clientX, rawEvent.clientY, stop, prevent, kill, rawEvent);\n  };\n  var handle = function handle(filter, handler) {\n    return function (rawEvent) {\n      if (filter(rawEvent)) {\n        handler(fromRawEvent(rawEvent));\n      }\n    };\n  };\n  var binder = function binder(element, event, filter, handler, useCapture) {\n    var wrapped = handle(filter, handler);\n    element.dom.addEventListener(event, wrapped, useCapture);\n    return {\n      unbind: curry(unbind, element, event, wrapped, useCapture)\n    };\n  };\n  var bind$1 = function bind$1(element, event, filter, handler) {\n    return binder(element, event, filter, handler, false);\n  };\n  var capture$1 = function capture$1(element, event, filter, handler) {\n    return binder(element, event, filter, handler, true);\n  };\n  var unbind = function unbind(element, event, handler, useCapture) {\n    element.dom.removeEventListener(event, handler, useCapture);\n  };\n  var filter = always;\n  var bind = function bind(element, event, handler) {\n    return bind$1(element, event, filter, handler);\n  };\n  var capture = function capture(element, event, handler) {\n    return capture$1(element, event, filter, handler);\n  };\n  var global$2 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n  var INTERVAL = 50;\n  var INSURANCE = 1000 / INTERVAL;\n  var get$1 = function get$1(outerWindow) {\n    var isPortrait = outerWindow.matchMedia('(orientation: portrait)').matches;\n    return {\n      isPortrait: constant$1(isPortrait)\n    };\n  };\n  var getActualWidth = function getActualWidth(outerWindow) {\n    var isIos = detect$1().os.isiOS();\n    var isPortrait = get$1(outerWindow).isPortrait();\n    return isIos && !isPortrait ? outerWindow.screen.height : outerWindow.screen.width;\n  };\n  var onChange = function onChange(outerWindow, listeners) {\n    var win = SugarElement.fromDom(outerWindow);\n    var poller = null;\n    var change = function change() {\n      global$2.clearInterval(poller);\n      var orientation = get$1(outerWindow);\n      listeners.onChange(orientation);\n      onAdjustment(function () {\n        listeners.onReady(orientation);\n      });\n    };\n    var orientationHandle = bind(win, 'orientationchange', change);\n    var onAdjustment = function onAdjustment(f) {\n      global$2.clearInterval(poller);\n      var flag = outerWindow.innerHeight;\n      var insurance = 0;\n      poller = global$2.setInterval(function () {\n        if (flag !== outerWindow.innerHeight) {\n          global$2.clearInterval(poller);\n          f(Optional.some(outerWindow.innerHeight));\n        } else if (insurance > INSURANCE) {\n          global$2.clearInterval(poller);\n          f(Optional.none());\n        }\n        insurance++;\n      }, INTERVAL);\n    };\n    var destroy = function destroy() {\n      orientationHandle.unbind();\n    };\n    return {\n      onAdjustment: onAdjustment,\n      destroy: destroy\n    };\n  };\n  var setStart = function setStart(rng, situ) {\n    situ.fold(function (e) {\n      rng.setStartBefore(e.dom);\n    }, function (e, o) {\n      rng.setStart(e.dom, o);\n    }, function (e) {\n      rng.setStartAfter(e.dom);\n    });\n  };\n  var setFinish = function setFinish(rng, situ) {\n    situ.fold(function (e) {\n      rng.setEndBefore(e.dom);\n    }, function (e, o) {\n      rng.setEnd(e.dom, o);\n    }, function (e) {\n      rng.setEndAfter(e.dom);\n    });\n  };\n  var relativeToNative = function relativeToNative(win, startSitu, finishSitu) {\n    var range = win.document.createRange();\n    setStart(range, startSitu);\n    setFinish(range, finishSitu);\n    return range;\n  };\n  var exactToNative = function exactToNative(win, start, soffset, finish, foffset) {\n    var rng = win.document.createRange();\n    rng.setStart(start.dom, soffset);\n    rng.setEnd(finish.dom, foffset);\n    return rng;\n  };\n  var toRect$1 = function toRect$1(rect) {\n    return {\n      left: rect.left,\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      width: rect.width,\n      height: rect.height\n    };\n  };\n  var getFirstRect$1 = function getFirstRect$1(rng) {\n    var rects = rng.getClientRects();\n    var rect = rects.length > 0 ? rects[0] : rng.getBoundingClientRect();\n    return rect.width > 0 || rect.height > 0 ? Optional.some(rect).map(toRect$1) : Optional.none();\n  };\n  var adt$3 = Adt.generate([{\n    ltr: ['start', 'soffset', 'finish', 'foffset']\n  }, {\n    rtl: ['start', 'soffset', 'finish', 'foffset']\n  }]);\n  var fromRange = function fromRange(win, type, range) {\n    return type(SugarElement.fromDom(range.startContainer), range.startOffset, SugarElement.fromDom(range.endContainer), range.endOffset);\n  };\n  var getRanges = function getRanges(win, selection) {\n    return selection.match({\n      domRange: function domRange(rng) {\n        return {\n          ltr: constant$1(rng),\n          rtl: Optional.none\n        };\n      },\n      relative: function relative(startSitu, finishSitu) {\n        return {\n          ltr: cached(function () {\n            return relativeToNative(win, startSitu, finishSitu);\n          }),\n          rtl: cached(function () {\n            return Optional.some(relativeToNative(win, finishSitu, startSitu));\n          })\n        };\n      },\n      exact: function exact(start, soffset, finish, foffset) {\n        return {\n          ltr: cached(function () {\n            return exactToNative(win, start, soffset, finish, foffset);\n          }),\n          rtl: cached(function () {\n            return Optional.some(exactToNative(win, finish, foffset, start, soffset));\n          })\n        };\n      }\n    });\n  };\n  var doDiagnose = function doDiagnose(win, ranges) {\n    var rng = ranges.ltr();\n    if (rng.collapsed) {\n      var reversed = ranges.rtl().filter(function (rev) {\n        return rev.collapsed === false;\n      });\n      return reversed.map(function (rev) {\n        return adt$3.rtl(SugarElement.fromDom(rev.endContainer), rev.endOffset, SugarElement.fromDom(rev.startContainer), rev.startOffset);\n      }).getOrThunk(function () {\n        return fromRange(win, adt$3.ltr, rng);\n      });\n    } else {\n      return fromRange(win, adt$3.ltr, rng);\n    }\n  };\n  var diagnose = function diagnose(win, selection) {\n    var ranges = getRanges(win, selection);\n    return doDiagnose(win, ranges);\n  };\n  var asLtrRange = function asLtrRange(win, selection) {\n    var diagnosis = diagnose(win, selection);\n    return diagnosis.match({\n      ltr: function ltr(start, soffset, finish, foffset) {\n        var rng = win.document.createRange();\n        rng.setStart(start.dom, soffset);\n        rng.setEnd(finish.dom, foffset);\n        return rng;\n      },\n      rtl: function rtl(start, soffset, finish, foffset) {\n        var rng = win.document.createRange();\n        rng.setStart(finish.dom, foffset);\n        rng.setEnd(start.dom, soffset);\n        return rng;\n      }\n    });\n  };\n  adt$3.ltr;\n  adt$3.rtl;\n  var create$3 = function create$3(start, soffset, finish, foffset) {\n    return {\n      start: start,\n      soffset: soffset,\n      finish: finish,\n      foffset: foffset\n    };\n  };\n  var SimRange = {\n    create: create$3\n  };\n  var NodeValue = function NodeValue(is, name) {\n    var get = function get(element) {\n      if (!is(element)) {\n        throw new Error('Can only get ' + name + ' value of a ' + name + ' node');\n      }\n      return getOption(element).getOr('');\n    };\n    var getOption = function getOption(element) {\n      return is(element) ? Optional.from(element.dom.nodeValue) : Optional.none();\n    };\n    var set = function set(element, value) {\n      if (!is(element)) {\n        throw new Error('Can only set raw ' + name + ' value of a ' + name + ' node');\n      }\n      element.dom.nodeValue = value;\n    };\n    return {\n      get: get,\n      getOption: getOption,\n      set: set\n    };\n  };\n  var api = NodeValue(isText, 'text');\n  var getOption = function getOption(element) {\n    return api.getOption(element);\n  };\n  var getEnd = function getEnd(element) {\n    return name$1(element) === 'img' ? 1 : getOption(element).fold(function () {\n      return children(element).length;\n    }, function (v) {\n      return v.length;\n    });\n  };\n  var adt$2 = Adt.generate([{\n    before: ['element']\n  }, {\n    on: ['element', 'offset']\n  }, {\n    after: ['element']\n  }]);\n  var cata = function cata(subject, onBefore, onOn, onAfter) {\n    return subject.fold(onBefore, onOn, onAfter);\n  };\n  var getStart$1 = function getStart$1(situ) {\n    return situ.fold(identity, identity, identity);\n  };\n  var before = adt$2.before;\n  var on = adt$2.on;\n  var after$1 = adt$2.after;\n  var Situ = {\n    before: before,\n    on: on,\n    after: after$1,\n    cata: cata,\n    getStart: getStart$1\n  };\n  var adt$1 = Adt.generate([{\n    domRange: ['rng']\n  }, {\n    relative: ['startSitu', 'finishSitu']\n  }, {\n    exact: ['start', 'soffset', 'finish', 'foffset']\n  }]);\n  var exactFromRange = function exactFromRange(simRange) {\n    return adt$1.exact(simRange.start, simRange.soffset, simRange.finish, simRange.foffset);\n  };\n  var getStart = function getStart(selection) {\n    return selection.match({\n      domRange: function domRange(rng) {\n        return SugarElement.fromDom(rng.startContainer);\n      },\n      relative: function relative(startSitu, _finishSitu) {\n        return Situ.getStart(startSitu);\n      },\n      exact: function exact(start, _soffset, _finish, _foffset) {\n        return start;\n      }\n    });\n  };\n  var domRange = adt$1.domRange;\n  var relative = adt$1.relative;\n  var exact = adt$1.exact;\n  var getWin$1 = function getWin$1(selection) {\n    var start = getStart(selection);\n    return defaultView(start);\n  };\n  var range = SimRange.create;\n  var SimSelection = {\n    domRange: domRange,\n    relative: relative,\n    exact: exact,\n    exactFromRange: exactFromRange,\n    getWin: getWin$1,\n    range: range\n  };\n  var beforeSpecial = function beforeSpecial(element, offset) {\n    var name = name$1(element);\n    if ('input' === name) {\n      return Situ.after(element);\n    } else if (!contains$1(['br', 'img'], name)) {\n      return Situ.on(element, offset);\n    } else {\n      return offset === 0 ? Situ.before(element) : Situ.after(element);\n    }\n  };\n  var preprocessExact = function preprocessExact(start, soffset, finish, foffset) {\n    var startSitu = beforeSpecial(start, soffset);\n    var finishSitu = beforeSpecial(finish, foffset);\n    return SimSelection.relative(startSitu, finishSitu);\n  };\n  var makeRange = function makeRange(start, soffset, finish, foffset) {\n    var doc = owner$2(start);\n    var rng = doc.dom.createRange();\n    rng.setStart(start.dom, soffset);\n    rng.setEnd(finish.dom, foffset);\n    return rng;\n  };\n  var after = function after(start, soffset, finish, foffset) {\n    var r = makeRange(start, soffset, finish, foffset);\n    var same = eq(start, finish) && soffset === foffset;\n    return r.collapsed && !same;\n  };\n  var getNativeSelection = function getNativeSelection(win) {\n    return Optional.from(win.getSelection());\n  };\n  var doSetNativeRange = function doSetNativeRange(win, rng) {\n    getNativeSelection(win).each(function (selection) {\n      selection.removeAllRanges();\n      selection.addRange(rng);\n    });\n  };\n  var doSetRange = function doSetRange(win, start, soffset, finish, foffset) {\n    var rng = exactToNative(win, start, soffset, finish, foffset);\n    doSetNativeRange(win, rng);\n  };\n  var setLegacyRtlRange = function setLegacyRtlRange(win, selection, start, soffset, finish, foffset) {\n    selection.collapse(start.dom, soffset);\n    selection.extend(finish.dom, foffset);\n  };\n  var setRangeFromRelative = function setRangeFromRelative(win, relative) {\n    return diagnose(win, relative).match({\n      ltr: function ltr(start, soffset, finish, foffset) {\n        doSetRange(win, start, soffset, finish, foffset);\n      },\n      rtl: function rtl(start, soffset, finish, foffset) {\n        getNativeSelection(win).each(function (selection) {\n          if (selection.setBaseAndExtent) {\n            selection.setBaseAndExtent(start.dom, soffset, finish.dom, foffset);\n          } else if (selection.extend) {\n            try {\n              setLegacyRtlRange(win, selection, start, soffset, finish, foffset);\n            } catch (e) {\n              doSetRange(win, finish, foffset, start, soffset);\n            }\n          } else {\n            doSetRange(win, finish, foffset, start, soffset);\n          }\n        });\n      }\n    });\n  };\n  var setExact = function setExact(win, start, soffset, finish, foffset) {\n    var relative = preprocessExact(start, soffset, finish, foffset);\n    setRangeFromRelative(win, relative);\n  };\n  var readRange = function readRange(selection) {\n    if (selection.rangeCount > 0) {\n      var firstRng = selection.getRangeAt(0);\n      var lastRng = selection.getRangeAt(selection.rangeCount - 1);\n      return Optional.some(SimRange.create(SugarElement.fromDom(firstRng.startContainer), firstRng.startOffset, SugarElement.fromDom(lastRng.endContainer), lastRng.endOffset));\n    } else {\n      return Optional.none();\n    }\n  };\n  var doGetExact = function doGetExact(selection) {\n    if (selection.anchorNode === null || selection.focusNode === null) {\n      return readRange(selection);\n    } else {\n      var anchor = SugarElement.fromDom(selection.anchorNode);\n      var focus_1 = SugarElement.fromDom(selection.focusNode);\n      return after(anchor, selection.anchorOffset, focus_1, selection.focusOffset) ? Optional.some(SimRange.create(anchor, selection.anchorOffset, focus_1, selection.focusOffset)) : readRange(selection);\n    }\n  };\n  var getExact = function getExact(win) {\n    return getNativeSelection(win).filter(function (sel) {\n      return sel.rangeCount > 0;\n    }).bind(doGetExact);\n  };\n  var get = function get(win) {\n    return getExact(win).map(function (range) {\n      return SimSelection.exact(range.start, range.soffset, range.finish, range.foffset);\n    });\n  };\n  var getFirstRect = function getFirstRect(win, selection) {\n    var rng = asLtrRange(win, selection);\n    return getFirstRect$1(rng);\n  };\n  var clear = function clear(win) {\n    getNativeSelection(win).each(function (selection) {\n      return selection.removeAllRanges();\n    });\n  };\n  var getBodyFromFrame = function getBodyFromFrame(frame) {\n    return Optional.some(SugarElement.fromDom(frame.dom.contentWindow.document.body));\n  };\n  var getDocFromFrame = function getDocFromFrame(frame) {\n    return Optional.some(SugarElement.fromDom(frame.dom.contentWindow.document));\n  };\n  var getWinFromFrame = function getWinFromFrame(frame) {\n    return Optional.from(frame.dom.contentWindow);\n  };\n  var getSelectionFromFrame = function getSelectionFromFrame(frame) {\n    var optWin = getWinFromFrame(frame);\n    return optWin.bind(getExact);\n  };\n  var getFrame = function getFrame(editor) {\n    return editor.getFrame();\n  };\n  var getOrDerive = function getOrDerive(name, f) {\n    return function (editor) {\n      var g = editor[name].getOrThunk(function () {\n        var frame = getFrame(editor);\n        return function () {\n          return f(frame);\n        };\n      });\n      return g();\n    };\n  };\n  var getOrListen = function getOrListen(editor, doc, name, type) {\n    return editor[name].getOrThunk(function () {\n      return function (handler) {\n        return bind(doc, type, handler);\n      };\n    });\n  };\n  var getActiveApi = function getActiveApi(editor) {\n    var frame = getFrame(editor);\n    var tryFallbackBox = function tryFallbackBox(win) {\n      var isCollapsed = function isCollapsed(sel) {\n        return eq(sel.start, sel.finish) && sel.soffset === sel.foffset;\n      };\n      var toStartRect = function toStartRect(sel) {\n        var rect = sel.start.dom.getBoundingClientRect();\n        return rect.width > 0 || rect.height > 0 ? Optional.some(rect) : Optional.none();\n      };\n      return getExact(win).filter(isCollapsed).bind(toStartRect);\n    };\n    return getBodyFromFrame(frame).bind(function (body) {\n      return getDocFromFrame(frame).bind(function (doc) {\n        return getWinFromFrame(frame).map(function (win) {\n          var html = SugarElement.fromDom(doc.dom.documentElement);\n          var getCursorBox = editor.getCursorBox.getOrThunk(function () {\n            return function () {\n              return get(win).bind(function (sel) {\n                return getFirstRect(win, sel).orThunk(function () {\n                  return tryFallbackBox(win);\n                });\n              });\n            };\n          });\n          var setSelection = editor.setSelection.getOrThunk(function () {\n            return function (start, soffset, finish, foffset) {\n              setExact(win, start, soffset, finish, foffset);\n            };\n          });\n          var clearSelection = editor.clearSelection.getOrThunk(function () {\n            return function () {\n              clear(win);\n            };\n          });\n          return {\n            body: body,\n            doc: doc,\n            win: win,\n            html: html,\n            getSelection: curry(getSelectionFromFrame, frame),\n            setSelection: setSelection,\n            clearSelection: clearSelection,\n            frame: frame,\n            onKeyup: getOrListen(editor, doc, 'onKeyup', 'keyup'),\n            onNodeChanged: getOrListen(editor, doc, 'onNodeChanged', 'SelectionChange'),\n            onDomChanged: editor.onDomChanged,\n            onScrollToCursor: editor.onScrollToCursor,\n            onScrollToElement: editor.onScrollToElement,\n            onToReading: editor.onToReading,\n            onToEditing: editor.onToEditing,\n            onToolbarScrollStart: editor.onToolbarScrollStart,\n            onTouchContent: editor.onTouchContent,\n            onTapContent: editor.onTapContent,\n            onTouchToolstrip: editor.onTouchToolstrip,\n            getCursorBox: getCursorBox\n          };\n        });\n      });\n    });\n  };\n  var getWin = getOrDerive('getWin', getWinFromFrame);\n  var tag = function tag() {\n    var head = first$1('head').getOrDie();\n    var nu = function nu() {\n      var meta = SugarElement.fromTag('meta');\n      set$8(meta, 'name', 'viewport');\n      append$2(head, meta);\n      return meta;\n    };\n    var element = first$1('meta[name=\"viewport\"]').getOrThunk(nu);\n    var backup = get$b(element, 'content');\n    var maximize = function maximize() {\n      set$8(element, 'content', 'width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1.0');\n    };\n    var restore = function restore() {\n      if (backup !== undefined && backup !== null && backup.length > 0) {\n        set$8(element, 'content', backup);\n      } else {\n        set$8(element, 'content', 'user-scalable=yes');\n      }\n    };\n    return {\n      maximize: maximize,\n      restore: restore\n    };\n  };\n  var attr = 'data-ephox-mobile-fullscreen-style';\n  var siblingStyles = 'display:none!important;';\n  var ancestorPosition = 'position:absolute!important;';\n  var ancestorStyles = 'top:0!important;left:0!important;margin:0!important;padding:0!important;width:100%!important;height:100%!important;overflow:visible!important;';\n  var bgFallback = 'background-color:rgb(255,255,255)!important;';\n  var isAndroid = detect$1().os.isAndroid();\n  var matchColor = function matchColor(editorBody) {\n    var color = get$8(editorBody, 'background-color');\n    return color !== undefined && color !== '' ? 'background-color:' + color + '!important' : bgFallback;\n  };\n  var clobberStyles = function clobberStyles(container, editorBody) {\n    var gatherSiblings = function gatherSiblings(element) {\n      return siblings(element, '*');\n    };\n    var clobber = function clobber(clobberStyle) {\n      return function (element) {\n        var styles = get$b(element, 'style');\n        var backup = styles === undefined ? 'no-styles' : styles.trim();\n        if (backup === clobberStyle) {\n          return;\n        } else {\n          set$8(element, attr, backup);\n          set$8(element, 'style', clobberStyle);\n        }\n      };\n    };\n    var ancestors$1 = ancestors(container, '*');\n    var siblings$1 = bind$3(ancestors$1, gatherSiblings);\n    var bgColor = matchColor(editorBody);\n    each$1(siblings$1, clobber(siblingStyles));\n    each$1(ancestors$1, clobber(ancestorPosition + ancestorStyles + bgColor));\n    var containerStyles = isAndroid === true ? '' : ancestorPosition;\n    clobber(containerStyles + ancestorStyles + bgColor)(container);\n  };\n  var restoreStyles = function restoreStyles() {\n    var clobberedEls = all('[' + attr + ']');\n    each$1(clobberedEls, function (element) {\n      var restore = get$b(element, attr);\n      if (restore !== 'no-styles') {\n        set$8(element, 'style', restore);\n      } else {\n        remove$6(element, 'style');\n      }\n      remove$6(element, attr);\n    });\n  };\n  var DelayedFunction = function DelayedFunction(fun, delay) {\n    var ref = null;\n    var schedule = function schedule() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      ref = setTimeout(function () {\n        fun.apply(null, args);\n        ref = null;\n      }, delay);\n    };\n    var cancel = function cancel() {\n      if (ref !== null) {\n        clearTimeout(ref);\n        ref = null;\n      }\n    };\n    return {\n      cancel: cancel,\n      schedule: schedule\n    };\n  };\n  var SIGNIFICANT_MOVE = 5;\n  var LONGPRESS_DELAY = 400;\n  var getTouch = function getTouch(event) {\n    var raw = event.raw;\n    if (raw.touches === undefined || raw.touches.length !== 1) {\n      return Optional.none();\n    }\n    return Optional.some(raw.touches[0]);\n  };\n  var isFarEnough = function isFarEnough(touch, data) {\n    var distX = Math.abs(touch.clientX - data.x);\n    var distY = Math.abs(touch.clientY - data.y);\n    return distX > SIGNIFICANT_MOVE || distY > SIGNIFICANT_MOVE;\n  };\n  var monitor$1 = function monitor$1(settings) {\n    var startData = value();\n    var longpressFired = Cell(false);\n    var longpress$1 = DelayedFunction(function (event) {\n      settings.triggerEvent(longpress(), event);\n      longpressFired.set(true);\n    }, LONGPRESS_DELAY);\n    var handleTouchstart = function handleTouchstart(event) {\n      getTouch(event).each(function (touch) {\n        longpress$1.cancel();\n        var data = {\n          x: touch.clientX,\n          y: touch.clientY,\n          target: event.target\n        };\n        longpress$1.schedule(event);\n        longpressFired.set(false);\n        startData.set(data);\n      });\n      return Optional.none();\n    };\n    var handleTouchmove = function handleTouchmove(event) {\n      longpress$1.cancel();\n      getTouch(event).each(function (touch) {\n        startData.on(function (data) {\n          if (isFarEnough(touch, data)) {\n            startData.clear();\n          }\n        });\n      });\n      return Optional.none();\n    };\n    var handleTouchend = function handleTouchend(event) {\n      longpress$1.cancel();\n      var isSame = function isSame(data) {\n        return eq(data.target, event.target);\n      };\n      return startData.get().filter(isSame).map(function (_data) {\n        if (longpressFired.get()) {\n          event.prevent();\n          return false;\n        } else {\n          return settings.triggerEvent(tap(), event);\n        }\n      });\n    };\n    var handlers = wrapAll([{\n      key: touchstart(),\n      value: handleTouchstart\n    }, {\n      key: touchmove(),\n      value: handleTouchmove\n    }, {\n      key: touchend(),\n      value: handleTouchend\n    }]);\n    var fireIfReady = function fireIfReady(event, type) {\n      return get$c(handlers, type).bind(function (handler) {\n        return handler(event);\n      });\n    };\n    return {\n      fireIfReady: fireIfReady\n    };\n  };\n  var monitor = function monitor(editorApi) {\n    var tapEvent = monitor$1({\n      triggerEvent: function triggerEvent(type, evt) {\n        editorApi.onTapContent(evt);\n      }\n    });\n    var onTouchend = function onTouchend() {\n      return bind(editorApi.body, 'touchend', function (evt) {\n        tapEvent.fireIfReady(evt, 'touchend');\n      });\n    };\n    var onTouchmove = function onTouchmove() {\n      return bind(editorApi.body, 'touchmove', function (evt) {\n        tapEvent.fireIfReady(evt, 'touchmove');\n      });\n    };\n    var fireTouchstart = function fireTouchstart(evt) {\n      tapEvent.fireIfReady(evt, 'touchstart');\n    };\n    return {\n      fireTouchstart: fireTouchstart,\n      onTouchend: onTouchend,\n      onTouchmove: onTouchmove\n    };\n  };\n  var isAndroid6 = detect$1().os.version.major >= 6;\n  var initEvents$1 = function initEvents$1(editorApi, toolstrip, alloy) {\n    var tapping = monitor(editorApi);\n    var outerDoc = owner$2(toolstrip);\n    var isRanged = function isRanged(sel) {\n      return !eq(sel.start, sel.finish) || sel.soffset !== sel.foffset;\n    };\n    var hasRangeInUi = function hasRangeInUi() {\n      return active(outerDoc).filter(function (input) {\n        return name$1(input) === 'input';\n      }).exists(function (input) {\n        return input.dom.selectionStart !== input.dom.selectionEnd;\n      });\n    };\n    var updateMargin = function updateMargin() {\n      var rangeInContent = editorApi.doc.dom.hasFocus() && editorApi.getSelection().exists(isRanged);\n      alloy.getByDom(toolstrip).each((rangeInContent || hasRangeInUi()) === true ? Toggling.on : Toggling.off);\n    };\n    var listeners = [bind(editorApi.body, 'touchstart', function (evt) {\n      editorApi.onTouchContent();\n      tapping.fireTouchstart(evt);\n    }), tapping.onTouchmove(), tapping.onTouchend(), bind(toolstrip, 'touchstart', function (_evt) {\n      editorApi.onTouchToolstrip();\n    }), editorApi.onToReading(function () {\n      blur$1(editorApi.body);\n    }), editorApi.onToEditing(noop), editorApi.onScrollToCursor(function (tinyEvent) {\n      tinyEvent.preventDefault();\n      editorApi.getCursorBox().each(function (bounds) {\n        var cWin = editorApi.win;\n        var isOutside = bounds.top > cWin.innerHeight || bounds.bottom > cWin.innerHeight;\n        var cScrollBy = isOutside ? bounds.bottom - cWin.innerHeight + 50 : 0;\n        if (cScrollBy !== 0) {\n          cWin.scrollTo(cWin.pageXOffset, cWin.pageYOffset + cScrollBy);\n        }\n      });\n    })].concat(isAndroid6 === true ? [] : [bind(SugarElement.fromDom(editorApi.win), 'blur', function () {\n      alloy.getByDom(toolstrip).each(Toggling.off);\n    }), bind(outerDoc, 'select', updateMargin), bind(editorApi.doc, 'selectionchange', updateMargin)]);\n    var destroy = function destroy() {\n      each$1(listeners, function (l) {\n        l.unbind();\n      });\n    };\n    return {\n      destroy: destroy\n    };\n  };\n  var safeParse = function safeParse(element, attribute) {\n    var parsed = parseInt(get$b(element, attribute), 10);\n    return isNaN(parsed) ? 0 : parsed;\n  };\n  var COLLAPSED_WIDTH = 2;\n  var collapsedRect = function collapsedRect(rect) {\n    return _assign(_assign({}, rect), {\n      width: COLLAPSED_WIDTH\n    });\n  };\n  var toRect = function toRect(rawRect) {\n    return {\n      left: rawRect.left,\n      top: rawRect.top,\n      right: rawRect.right,\n      bottom: rawRect.bottom,\n      width: rawRect.width,\n      height: rawRect.height\n    };\n  };\n  var getRectsFromRange = function getRectsFromRange(range) {\n    if (!range.collapsed) {\n      return map$2(range.getClientRects(), toRect);\n    } else {\n      var start_1 = SugarElement.fromDom(range.startContainer);\n      return parent(start_1).bind(function (parent) {\n        var selection = SimSelection.exact(start_1, range.startOffset, parent, getEnd(parent));\n        var optRect = getFirstRect(range.startContainer.ownerDocument.defaultView, selection);\n        return optRect.map(collapsedRect).map(pure$2);\n      }).getOr([]);\n    }\n  };\n  var getRectangles = function getRectangles(cWin) {\n    var sel = cWin.getSelection();\n    return sel !== undefined && sel.rangeCount > 0 ? getRectsFromRange(sel.getRangeAt(0)) : [];\n  };\n  var autocompleteHack = function autocompleteHack() {\n    return function (f) {\n      global$2.setTimeout(function () {\n        f();\n      }, 0);\n    };\n  };\n  var resume$1 = function resume$1(cWin) {\n    cWin.focus();\n    var iBody = SugarElement.fromDom(cWin.document.body);\n    var inInput = active().exists(function (elem) {\n      return contains$1(['input', 'textarea'], name$1(elem));\n    });\n    var transaction = inInput ? autocompleteHack() : apply$1;\n    transaction(function () {\n      active().each(blur$1);\n      focus$3(iBody);\n    });\n  };\n  var EXTRA_SPACING = 50;\n  var data = 'data-' + resolve('last-outer-height');\n  var setLastHeight = function setLastHeight(cBody, value) {\n    set$8(cBody, data, value);\n  };\n  var getLastHeight = function getLastHeight(cBody) {\n    return safeParse(cBody, data);\n  };\n  var getBoundsFrom = function getBoundsFrom(rect) {\n    return {\n      top: rect.top,\n      bottom: rect.top + rect.height\n    };\n  };\n  var getBounds = function getBounds(cWin) {\n    var rects = getRectangles(cWin);\n    return rects.length > 0 ? Optional.some(rects[0]).map(getBoundsFrom) : Optional.none();\n  };\n  var findDelta = function findDelta(outerWindow, cBody) {\n    var last = getLastHeight(cBody);\n    var current = outerWindow.innerHeight;\n    return last > current ? Optional.some(last - current) : Optional.none();\n  };\n  var calculate = function calculate(cWin, bounds, delta) {\n    var isOutside = bounds.top > cWin.innerHeight || bounds.bottom > cWin.innerHeight;\n    return isOutside ? Math.min(delta, bounds.bottom - cWin.innerHeight + EXTRA_SPACING) : 0;\n  };\n  var setup$2 = function setup$2(outerWindow, cWin) {\n    var cBody = SugarElement.fromDom(cWin.document.body);\n    var toEditing = function toEditing() {\n      resume$1(cWin);\n    };\n    var onResize = bind(SugarElement.fromDom(outerWindow), 'resize', function () {\n      findDelta(outerWindow, cBody).each(function (delta) {\n        getBounds(cWin).each(function (bounds) {\n          var cScrollBy = calculate(cWin, bounds, delta);\n          if (cScrollBy !== 0) {\n            cWin.scrollTo(cWin.pageXOffset, cWin.pageYOffset + cScrollBy);\n          }\n        });\n      });\n      setLastHeight(cBody, outerWindow.innerHeight);\n    });\n    setLastHeight(cBody, outerWindow.innerHeight);\n    var destroy = function destroy() {\n      onResize.unbind();\n    };\n    return {\n      toEditing: toEditing,\n      destroy: destroy\n    };\n  };\n  var create$2 = function create$2(platform, mask) {\n    var meta = tag();\n    var androidApi = api$2();\n    var androidEvents = api$2();\n    var enter = function enter() {\n      mask.hide();\n      add$1(platform.container, resolve('fullscreen-maximized'));\n      add$1(platform.container, resolve('android-maximized'));\n      meta.maximize();\n      add$1(platform.body, resolve('android-scroll-reload'));\n      androidApi.set(setup$2(platform.win, getWin(platform.editor).getOrDie('no')));\n      getActiveApi(platform.editor).each(function (editorApi) {\n        clobberStyles(platform.container, editorApi.body);\n        androidEvents.set(initEvents$1(editorApi, platform.toolstrip, platform.alloy));\n      });\n    };\n    var exit = function exit() {\n      meta.restore();\n      mask.show();\n      remove$3(platform.container, resolve('fullscreen-maximized'));\n      remove$3(platform.container, resolve('android-maximized'));\n      restoreStyles();\n      remove$3(platform.body, resolve('android-scroll-reload'));\n      androidEvents.clear();\n      androidApi.clear();\n    };\n    return {\n      enter: enter,\n      exit: exit\n    };\n  };\n  var first = function first(fn, rate) {\n    var timer = null;\n    var cancel = function cancel() {\n      if (!isNull(timer)) {\n        clearTimeout(timer);\n        timer = null;\n      }\n    };\n    var throttle = function throttle() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      if (isNull(timer)) {\n        timer = setTimeout(function () {\n          timer = null;\n          fn.apply(null, args);\n        }, rate);\n      }\n    };\n    return {\n      cancel: cancel,\n      throttle: throttle\n    };\n  };\n  var last = function last(fn, rate) {\n    var timer = null;\n    var cancel = function cancel() {\n      if (!isNull(timer)) {\n        clearTimeout(timer);\n        timer = null;\n      }\n    };\n    var throttle = function throttle() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      cancel();\n      timer = setTimeout(function () {\n        timer = null;\n        fn.apply(null, args);\n      }, rate);\n    };\n    return {\n      cancel: cancel,\n      throttle: throttle\n    };\n  };\n  var sketch = function sketch(onView, _translate) {\n    var memIcon = record(Container.sketch({\n      dom: dom$1('<div aria-hidden=\"true\" class=\"${prefix}-mask-tap-icon\"></div>'),\n      containerBehaviours: derive$2([Toggling.config({\n        toggleClass: resolve('mask-tap-icon-selected'),\n        toggleOnExecute: false\n      })])\n    }));\n    var onViewThrottle = first(onView, 200);\n    return Container.sketch({\n      dom: dom$1('<div class=\"${prefix}-disabled-mask\"></div>'),\n      components: [Container.sketch({\n        dom: dom$1('<div class=\"${prefix}-content-container\"></div>'),\n        components: [Button.sketch({\n          dom: dom$1('<div class=\"${prefix}-content-tap-section\"></div>'),\n          components: [memIcon.asSpec()],\n          action: function action(_button) {\n            onViewThrottle.throttle();\n          },\n          buttonBehaviours: derive$2([Toggling.config({\n            toggleClass: resolve('mask-tap-icon-selected')\n          })])\n        })]\n      })]\n    });\n  };\n  var unbindNoop = constant$1({\n    unbind: noop\n  });\n  var MobileSchema = objOf([requiredObjOf('editor', [required$1('getFrame'), option('getBody'), option('getDoc'), option('getWin'), option('getSelection'), option('setSelection'), option('clearSelection'), option('cursorSaver'), option('onKeyup'), option('onNodeChanged'), option('getCursorBox'), required$1('onDomChanged'), defaulted('onTouchContent', noop), defaulted('onTapContent', noop), defaulted('onTouchToolstrip', noop), defaulted('onScrollToCursor', unbindNoop), defaulted('onScrollToElement', unbindNoop), defaulted('onToEditing', unbindNoop), defaulted('onToReading', unbindNoop), defaulted('onToolbarScrollStart', identity)]), required$1('socket'), required$1('toolstrip'), required$1('dropup'), required$1('toolbar'), required$1('container'), required$1('alloy'), customField('win', function (spec) {\n    return owner$2(spec.socket).dom.defaultView;\n  }), customField('body', function (spec) {\n    return SugarElement.fromDom(spec.socket.dom.ownerDocument.body);\n  }), defaulted('translate', identity), defaulted('setReadOnly', noop), defaulted('readOnlyOnInit', always)]);\n  var produce$1 = function produce$1(raw) {\n    var mobile = asRawOrDie$1('Getting AndroidWebapp schema', MobileSchema, raw);\n    set$5(mobile.toolstrip, 'width', '100%');\n    var onTap = function onTap() {\n      mobile.setReadOnly(mobile.readOnlyOnInit());\n      mode.enter();\n    };\n    var mask = build$1(sketch(onTap, mobile.translate));\n    mobile.alloy.add(mask);\n    var maskApi = {\n      show: function show() {\n        mobile.alloy.add(mask);\n      },\n      hide: function hide() {\n        mobile.alloy.remove(mask);\n      }\n    };\n    append$2(mobile.container, mask.element);\n    var mode = create$2(mobile, maskApi);\n    return {\n      setReadOnly: mobile.setReadOnly,\n      refreshStructure: noop,\n      enter: mode.enter,\n      exit: mode.exit,\n      destroy: noop\n    };\n  };\n  var schema$1 = constant$1([required$1('dom'), defaulted('shell', true), field$1('toolbarBehaviours', [Replacing])]);\n  var enhanceGroups = function enhanceGroups() {\n    return {\n      behaviours: derive$2([Replacing.config({})])\n    };\n  };\n  var parts$1 = constant$1([optional({\n    name: 'groups',\n    overrides: enhanceGroups\n  })]);\n  var factory$1 = function factory$1(detail, components, _spec, _externals) {\n    var setGroups = function setGroups(toolbar, groups) {\n      getGroupContainer(toolbar).fold(function () {\n        console.error('Toolbar was defined to not be a shell, but no groups container was specified in components');\n        throw new Error('Toolbar was defined to not be a shell, but no groups container was specified in components');\n      }, function (container) {\n        Replacing.set(container, groups);\n      });\n    };\n    var getGroupContainer = function getGroupContainer(component) {\n      return detail.shell ? Optional.some(component) : getPart(component, detail, 'groups');\n    };\n    var extra = detail.shell ? {\n      behaviours: [Replacing.config({})],\n      components: []\n    } : {\n      behaviours: [],\n      components: components\n    };\n    return {\n      uid: detail.uid,\n      dom: detail.dom,\n      components: extra.components,\n      behaviours: augment(detail.toolbarBehaviours, extra.behaviours),\n      apis: {\n        setGroups: setGroups\n      },\n      domModification: {\n        attributes: {\n          role: 'group'\n        }\n      }\n    };\n  };\n  var Toolbar = composite({\n    name: 'Toolbar',\n    configFields: schema$1(),\n    partFields: parts$1(),\n    factory: factory$1,\n    apis: {\n      setGroups: function setGroups(apis, toolbar, groups) {\n        apis.setGroups(toolbar, groups);\n      }\n    }\n  });\n  var schema = constant$1([required$1('items'), markers(['itemSelector']), field$1('tgroupBehaviours', [Keying])]);\n  var parts = constant$1([group({\n    name: 'items',\n    unit: 'item'\n  })]);\n  var factory = function factory(detail, components, _spec, _externals) {\n    return {\n      uid: detail.uid,\n      dom: detail.dom,\n      components: components,\n      behaviours: augment(detail.tgroupBehaviours, [Keying.config({\n        mode: 'flow',\n        selector: detail.markers.itemSelector\n      })]),\n      domModification: {\n        attributes: {\n          role: 'toolbar'\n        }\n      }\n    };\n  };\n  var ToolbarGroup = composite({\n    name: 'ToolbarGroup',\n    configFields: schema(),\n    partFields: parts(),\n    factory: factory\n  });\n  var dataHorizontal = 'data-' + resolve('horizontal-scroll');\n  var canScrollVertically = function canScrollVertically(container) {\n    container.dom.scrollTop = 1;\n    var result = container.dom.scrollTop !== 0;\n    container.dom.scrollTop = 0;\n    return result;\n  };\n  var canScrollHorizontally = function canScrollHorizontally(container) {\n    container.dom.scrollLeft = 1;\n    var result = container.dom.scrollLeft !== 0;\n    container.dom.scrollLeft = 0;\n    return result;\n  };\n  var hasVerticalScroll = function hasVerticalScroll(container) {\n    return container.dom.scrollTop > 0 || canScrollVertically(container);\n  };\n  var hasHorizontalScroll = function hasHorizontalScroll(container) {\n    return container.dom.scrollLeft > 0 || canScrollHorizontally(container);\n  };\n  var markAsHorizontal = function markAsHorizontal(container) {\n    set$8(container, dataHorizontal, 'true');\n  };\n  var hasScroll = function hasScroll(container) {\n    return get$b(container, dataHorizontal) === 'true' ? hasHorizontalScroll(container) : hasVerticalScroll(container);\n  };\n  var exclusive = function exclusive(scope, selector) {\n    return bind(scope, 'touchmove', function (event) {\n      closest$1(event.target, selector).filter(hasScroll).fold(function () {\n        event.prevent();\n      }, noop);\n    });\n  };\n  var ScrollingToolbar = function ScrollingToolbar() {\n    var makeGroup = function makeGroup(gSpec) {\n      var scrollClass = gSpec.scrollable === true ? '${prefix}-toolbar-scrollable-group' : '';\n      return {\n        dom: dom$1('<div aria-label=\"' + gSpec.label + '\" class=\"${prefix}-toolbar-group ' + scrollClass + '\"></div>'),\n        tgroupBehaviours: derive$2([config('adhoc-scrollable-toolbar', gSpec.scrollable === true ? [runOnInit(function (component, _simulatedEvent) {\n          set$5(component.element, 'overflow-x', 'auto');\n          markAsHorizontal(component.element);\n          register$2(component.element);\n        })] : [])]),\n        components: [Container.sketch({\n          components: [ToolbarGroup.parts.items({})]\n        })],\n        markers: {\n          itemSelector: '.' + resolve('toolbar-group-item')\n        },\n        items: gSpec.items\n      };\n    };\n    var toolbar = build$1(Toolbar.sketch({\n      dom: dom$1('<div class=\"${prefix}-toolbar\"></div>'),\n      components: [Toolbar.parts.groups({})],\n      toolbarBehaviours: derive$2([Toggling.config({\n        toggleClass: resolve('context-toolbar'),\n        toggleOnExecute: false,\n        aria: {\n          mode: 'none'\n        }\n      }), Keying.config({\n        mode: 'cyclic'\n      })]),\n      shell: true\n    }));\n    var wrapper = build$1(Container.sketch({\n      dom: {\n        classes: [resolve('toolstrip')]\n      },\n      components: [premade(toolbar)],\n      containerBehaviours: derive$2([Toggling.config({\n        toggleClass: resolve('android-selection-context-toolbar'),\n        toggleOnExecute: false\n      })])\n    }));\n    var resetGroups = function resetGroups() {\n      Toolbar.setGroups(toolbar, initGroups.get());\n      Toggling.off(toolbar);\n    };\n    var initGroups = Cell([]);\n    var setGroups = function setGroups(gs) {\n      initGroups.set(gs);\n      resetGroups();\n    };\n    var createGroups = function createGroups(gs) {\n      return map$2(gs, compose(ToolbarGroup.sketch, makeGroup));\n    };\n    var refresh = function refresh() {};\n    var setContextToolbar = function setContextToolbar(gs) {\n      Toggling.on(toolbar);\n      Toolbar.setGroups(toolbar, gs);\n    };\n    var restoreToolbar = function restoreToolbar() {\n      if (Toggling.isOn(toolbar)) {\n        resetGroups();\n      }\n    };\n    var focus = function focus() {\n      Keying.focusIn(toolbar);\n    };\n    return {\n      wrapper: wrapper,\n      toolbar: toolbar,\n      createGroups: createGroups,\n      setGroups: setGroups,\n      setContextToolbar: setContextToolbar,\n      restoreToolbar: restoreToolbar,\n      refresh: refresh,\n      focus: focus\n    };\n  };\n  var makeEditSwitch = function makeEditSwitch(webapp) {\n    return build$1(Button.sketch({\n      dom: dom$1('<div class=\"${prefix}-mask-edit-icon ${prefix}-icon\"></div>'),\n      action: function action() {\n        webapp.run(function (w) {\n          w.setReadOnly(false);\n        });\n      }\n    }));\n  };\n  var makeSocket = function makeSocket() {\n    return build$1(Container.sketch({\n      dom: dom$1('<div class=\"${prefix}-editor-socket\"></div>'),\n      components: [],\n      containerBehaviours: derive$2([Replacing.config({})])\n    }));\n  };\n  var showEdit = function showEdit(socket, switchToEdit) {\n    Replacing.append(socket, premade(switchToEdit));\n  };\n  var hideEdit = function hideEdit(socket, switchToEdit) {\n    Replacing.remove(socket, switchToEdit);\n  };\n  var updateMode = function updateMode(socket, switchToEdit, readOnly, root) {\n    var swap = readOnly === true ? Swapping.toAlpha : Swapping.toOmega;\n    swap(root);\n    var f = readOnly ? showEdit : hideEdit;\n    f(socket, switchToEdit);\n  };\n  var getAnimationRoot = function getAnimationRoot(component, slideConfig) {\n    return slideConfig.getAnimationRoot.fold(function () {\n      return component.element;\n    }, function (get) {\n      return get(component);\n    });\n  };\n  var getDimensionProperty = function getDimensionProperty(slideConfig) {\n    return slideConfig.dimension.property;\n  };\n  var getDimension = function getDimension(slideConfig, elem) {\n    return slideConfig.dimension.getDimension(elem);\n  };\n  var disableTransitions = function disableTransitions(component, slideConfig) {\n    var root = getAnimationRoot(component, slideConfig);\n    remove$1(root, [slideConfig.shrinkingClass, slideConfig.growingClass]);\n  };\n  var setShrunk = function setShrunk(component, slideConfig) {\n    remove$3(component.element, slideConfig.openClass);\n    add$1(component.element, slideConfig.closedClass);\n    set$5(component.element, getDimensionProperty(slideConfig), '0px');\n    reflow(component.element);\n  };\n  var setGrown = function setGrown(component, slideConfig) {\n    remove$3(component.element, slideConfig.closedClass);\n    add$1(component.element, slideConfig.openClass);\n    remove$2(component.element, getDimensionProperty(slideConfig));\n  };\n  var doImmediateShrink = function doImmediateShrink(component, slideConfig, slideState, _calculatedSize) {\n    slideState.setCollapsed();\n    set$5(component.element, getDimensionProperty(slideConfig), getDimension(slideConfig, component.element));\n    reflow(component.element);\n    disableTransitions(component, slideConfig);\n    setShrunk(component, slideConfig);\n    slideConfig.onStartShrink(component);\n    slideConfig.onShrunk(component);\n  };\n  var doStartShrink = function doStartShrink(component, slideConfig, slideState, calculatedSize) {\n    var size = calculatedSize.getOrThunk(function () {\n      return getDimension(slideConfig, component.element);\n    });\n    slideState.setCollapsed();\n    set$5(component.element, getDimensionProperty(slideConfig), size);\n    reflow(component.element);\n    var root = getAnimationRoot(component, slideConfig);\n    remove$3(root, slideConfig.growingClass);\n    add$1(root, slideConfig.shrinkingClass);\n    setShrunk(component, slideConfig);\n    slideConfig.onStartShrink(component);\n  };\n  var doStartSmartShrink = function doStartSmartShrink(component, slideConfig, slideState) {\n    var size = getDimension(slideConfig, component.element);\n    var shrinker = size === '0px' ? doImmediateShrink : doStartShrink;\n    shrinker(component, slideConfig, slideState, Optional.some(size));\n  };\n  var doStartGrow = function doStartGrow(component, slideConfig, slideState) {\n    var root = getAnimationRoot(component, slideConfig);\n    var wasShrinking = has(root, slideConfig.shrinkingClass);\n    var beforeSize = getDimension(slideConfig, component.element);\n    setGrown(component, slideConfig);\n    var fullSize = getDimension(slideConfig, component.element);\n    var startPartialGrow = function startPartialGrow() {\n      set$5(component.element, getDimensionProperty(slideConfig), beforeSize);\n      reflow(component.element);\n    };\n    var startCompleteGrow = function startCompleteGrow() {\n      setShrunk(component, slideConfig);\n    };\n    var setStartSize = wasShrinking ? startPartialGrow : startCompleteGrow;\n    setStartSize();\n    remove$3(root, slideConfig.shrinkingClass);\n    add$1(root, slideConfig.growingClass);\n    setGrown(component, slideConfig);\n    set$5(component.element, getDimensionProperty(slideConfig), fullSize);\n    slideState.setExpanded();\n    slideConfig.onStartGrow(component);\n  };\n  var refresh$1 = function refresh$1(component, slideConfig, slideState) {\n    if (slideState.isExpanded()) {\n      remove$2(component.element, getDimensionProperty(slideConfig));\n      var fullSize = getDimension(slideConfig, component.element);\n      set$5(component.element, getDimensionProperty(slideConfig), fullSize);\n    }\n  };\n  var grow = function grow(component, slideConfig, slideState) {\n    if (!slideState.isExpanded()) {\n      doStartGrow(component, slideConfig, slideState);\n    }\n  };\n  var shrink = function shrink(component, slideConfig, slideState) {\n    if (slideState.isExpanded()) {\n      doStartSmartShrink(component, slideConfig, slideState);\n    }\n  };\n  var immediateShrink = function immediateShrink(component, slideConfig, slideState) {\n    if (slideState.isExpanded()) {\n      doImmediateShrink(component, slideConfig, slideState);\n    }\n  };\n  var hasGrown = function hasGrown(component, slideConfig, slideState) {\n    return slideState.isExpanded();\n  };\n  var hasShrunk = function hasShrunk(component, slideConfig, slideState) {\n    return slideState.isCollapsed();\n  };\n  var isGrowing = function isGrowing(component, slideConfig, _slideState) {\n    var root = getAnimationRoot(component, slideConfig);\n    return has(root, slideConfig.growingClass) === true;\n  };\n  var isShrinking = function isShrinking(component, slideConfig, _slideState) {\n    var root = getAnimationRoot(component, slideConfig);\n    return has(root, slideConfig.shrinkingClass) === true;\n  };\n  var isTransitioning = function isTransitioning(component, slideConfig, slideState) {\n    return isGrowing(component, slideConfig) || isShrinking(component, slideConfig);\n  };\n  var toggleGrow = function toggleGrow(component, slideConfig, slideState) {\n    var f = slideState.isExpanded() ? doStartSmartShrink : doStartGrow;\n    f(component, slideConfig, slideState);\n  };\n  var SlidingApis = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    refresh: refresh$1,\n    grow: grow,\n    shrink: shrink,\n    immediateShrink: immediateShrink,\n    hasGrown: hasGrown,\n    hasShrunk: hasShrunk,\n    isGrowing: isGrowing,\n    isShrinking: isShrinking,\n    isTransitioning: isTransitioning,\n    toggleGrow: toggleGrow,\n    disableTransitions: disableTransitions\n  });\n  var exhibit = function exhibit(base, slideConfig, _slideState) {\n    var expanded = slideConfig.expanded;\n    return expanded ? nu$3({\n      classes: [slideConfig.openClass],\n      styles: {}\n    }) : nu$3({\n      classes: [slideConfig.closedClass],\n      styles: wrap(slideConfig.dimension.property, '0px')\n    });\n  };\n  var events = function events(slideConfig, slideState) {\n    return derive$3([runOnSource(transitionend(), function (component, simulatedEvent) {\n      var raw = simulatedEvent.event.raw;\n      if (raw.propertyName === slideConfig.dimension.property) {\n        disableTransitions(component, slideConfig);\n        if (slideState.isExpanded()) {\n          remove$2(component.element, slideConfig.dimension.property);\n        }\n        var notify = slideState.isExpanded() ? slideConfig.onGrown : slideConfig.onShrunk;\n        notify(component);\n      }\n    })]);\n  };\n  var ActiveSliding = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    exhibit: exhibit,\n    events: events\n  });\n  var SlidingSchema = [required$1('closedClass'), required$1('openClass'), required$1('shrinkingClass'), required$1('growingClass'), option('getAnimationRoot'), onHandler('onShrunk'), onHandler('onStartShrink'), onHandler('onGrown'), onHandler('onStartGrow'), defaulted('expanded', false), requiredOf('dimension', choose$1('property', {\n    width: [output('property', 'width'), output('getDimension', function (elem) {\n      return get$5(elem) + 'px';\n    })],\n    height: [output('property', 'height'), output('getDimension', function (elem) {\n      return get$7(elem) + 'px';\n    })]\n  }))];\n  var init$1 = function init$1(spec) {\n    var state = Cell(spec.expanded);\n    var readState = function readState() {\n      return 'expanded: ' + state.get();\n    };\n    return nu$2({\n      isExpanded: function isExpanded() {\n        return state.get() === true;\n      },\n      isCollapsed: function isCollapsed() {\n        return state.get() === false;\n      },\n      setCollapsed: curry(state.set, false),\n      setExpanded: curry(state.set, true),\n      readState: readState\n    });\n  };\n  var SlidingState = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    init: init$1\n  });\n  var Sliding = create$5({\n    fields: SlidingSchema,\n    name: 'sliding',\n    active: ActiveSliding,\n    apis: SlidingApis,\n    state: SlidingState\n  });\n  var build = function build(refresh, scrollIntoView) {\n    var dropup = build$1(Container.sketch({\n      dom: {\n        tag: 'div',\n        classes: [resolve('dropup')]\n      },\n      components: [],\n      containerBehaviours: derive$2([Replacing.config({}), Sliding.config({\n        closedClass: resolve('dropup-closed'),\n        openClass: resolve('dropup-open'),\n        shrinkingClass: resolve('dropup-shrinking'),\n        growingClass: resolve('dropup-growing'),\n        dimension: {\n          property: 'height'\n        },\n        onShrunk: function onShrunk(component) {\n          refresh();\n          scrollIntoView();\n          Replacing.set(component, []);\n        },\n        onGrown: function onGrown(_component) {\n          refresh();\n          scrollIntoView();\n        }\n      }), orientation(function (_component, _data) {\n        disappear(noop);\n      })])\n    }));\n    var appear = function appear(menu, update, component) {\n      if (Sliding.hasShrunk(dropup) === true && Sliding.isTransitioning(dropup) === false) {\n        window.requestAnimationFrame(function () {\n          update(component);\n          Replacing.set(dropup, [menu()]);\n          Sliding.grow(dropup);\n        });\n      }\n    };\n    var disappear = function disappear(onReadyToShrink) {\n      window.requestAnimationFrame(function () {\n        onReadyToShrink();\n        Sliding.shrink(dropup);\n      });\n    };\n    return {\n      appear: appear,\n      disappear: disappear,\n      component: dropup,\n      element: dropup.element\n    };\n  };\n  var closest = function closest(scope, selector, isRoot) {\n    return closest$1(scope, selector, isRoot).isSome();\n  };\n  var isDangerous = function isDangerous(event) {\n    var keyEv = event.raw;\n    return keyEv.which === BACKSPACE[0] && !contains$1(['input', 'textarea'], name$1(event.target)) && !closest(event.target, '[contenteditable=\"true\"]');\n  };\n  var isFirefox = function isFirefox() {\n    return detect$1().browser.isFirefox();\n  };\n  var bindFocus = function bindFocus(container, handler) {\n    if (isFirefox()) {\n      return capture(container, 'focus', handler);\n    } else {\n      return bind(container, 'focusin', handler);\n    }\n  };\n  var bindBlur = function bindBlur(container, handler) {\n    if (isFirefox()) {\n      return capture(container, 'blur', handler);\n    } else {\n      return bind(container, 'focusout', handler);\n    }\n  };\n  var setup$1 = function setup$1(container, rawSettings) {\n    var settings = _assign({\n      stopBackspace: true\n    }, rawSettings);\n    var pointerEvents = ['touchstart', 'touchmove', 'touchend', 'touchcancel', 'gesturestart', 'mousedown', 'mouseup', 'mouseover', 'mousemove', 'mouseout', 'click'];\n    var tapEvent = monitor$1(settings);\n    var simpleEvents = map$2(pointerEvents.concat(['selectstart', 'input', 'contextmenu', 'change', 'transitionend', 'transitioncancel', 'drag', 'dragstart', 'dragend', 'dragenter', 'dragleave', 'dragover', 'drop', 'keyup']), function (type) {\n      return bind(container, type, function (event) {\n        tapEvent.fireIfReady(event, type).each(function (tapStopped) {\n          if (tapStopped) {\n            event.kill();\n          }\n        });\n        var stopped = settings.triggerEvent(type, event);\n        if (stopped) {\n          event.kill();\n        }\n      });\n    });\n    var pasteTimeout = value();\n    var onPaste = bind(container, 'paste', function (event) {\n      tapEvent.fireIfReady(event, 'paste').each(function (tapStopped) {\n        if (tapStopped) {\n          event.kill();\n        }\n      });\n      var stopped = settings.triggerEvent('paste', event);\n      if (stopped) {\n        event.kill();\n      }\n      pasteTimeout.set(setTimeout(function () {\n        settings.triggerEvent(postPaste(), event);\n      }, 0));\n    });\n    var onKeydown = bind(container, 'keydown', function (event) {\n      var stopped = settings.triggerEvent('keydown', event);\n      if (stopped) {\n        event.kill();\n      } else if (settings.stopBackspace && isDangerous(event)) {\n        event.prevent();\n      }\n    });\n    var onFocusIn = bindFocus(container, function (event) {\n      var stopped = settings.triggerEvent('focusin', event);\n      if (stopped) {\n        event.kill();\n      }\n    });\n    var focusoutTimeout = value();\n    var onFocusOut = bindBlur(container, function (event) {\n      var stopped = settings.triggerEvent('focusout', event);\n      if (stopped) {\n        event.kill();\n      }\n      focusoutTimeout.set(setTimeout(function () {\n        settings.triggerEvent(postBlur(), event);\n      }, 0));\n    });\n    var unbind = function unbind() {\n      each$1(simpleEvents, function (e) {\n        e.unbind();\n      });\n      onKeydown.unbind();\n      onFocusIn.unbind();\n      onFocusOut.unbind();\n      onPaste.unbind();\n      pasteTimeout.on(clearTimeout);\n      focusoutTimeout.on(clearTimeout);\n    };\n    return {\n      unbind: unbind\n    };\n  };\n  var derive$1 = function derive$1(rawEvent, rawTarget) {\n    var source = get$c(rawEvent, 'target').getOr(rawTarget);\n    return Cell(source);\n  };\n  var fromSource = function fromSource(event, source) {\n    var stopper = Cell(false);\n    var cutter = Cell(false);\n    var stop = function stop() {\n      stopper.set(true);\n    };\n    var cut = function cut() {\n      cutter.set(true);\n    };\n    return {\n      stop: stop,\n      cut: cut,\n      isStopped: stopper.get,\n      isCut: cutter.get,\n      event: event,\n      setSource: source.set,\n      getSource: source.get\n    };\n  };\n  var fromExternal = function fromExternal(event) {\n    var stopper = Cell(false);\n    var stop = function stop() {\n      stopper.set(true);\n    };\n    return {\n      stop: stop,\n      cut: noop,\n      isStopped: stopper.get,\n      isCut: never,\n      event: event,\n      setSource: die('Cannot set source of a broadcasted event'),\n      getSource: die('Cannot get source of a broadcasted event')\n    };\n  };\n  var adt = Adt.generate([{\n    stopped: []\n  }, {\n    resume: ['element']\n  }, {\n    complete: []\n  }]);\n  var doTriggerHandler = function doTriggerHandler(lookup, eventType, rawEvent, target, source, logger) {\n    var handler = lookup(eventType, target);\n    var simulatedEvent = fromSource(rawEvent, source);\n    return handler.fold(function () {\n      logger.logEventNoHandlers(eventType, target);\n      return adt.complete();\n    }, function (handlerInfo) {\n      var descHandler = handlerInfo.descHandler;\n      var eventHandler = getCurried(descHandler);\n      eventHandler(simulatedEvent);\n      if (simulatedEvent.isStopped()) {\n        logger.logEventStopped(eventType, handlerInfo.element, descHandler.purpose);\n        return adt.stopped();\n      } else if (simulatedEvent.isCut()) {\n        logger.logEventCut(eventType, handlerInfo.element, descHandler.purpose);\n        return adt.complete();\n      } else {\n        return parent(handlerInfo.element).fold(function () {\n          logger.logNoParent(eventType, handlerInfo.element, descHandler.purpose);\n          return adt.complete();\n        }, function (parent) {\n          logger.logEventResponse(eventType, handlerInfo.element, descHandler.purpose);\n          return adt.resume(parent);\n        });\n      }\n    });\n  };\n  var doTriggerOnUntilStopped = function doTriggerOnUntilStopped(lookup, eventType, rawEvent, rawTarget, source, logger) {\n    return doTriggerHandler(lookup, eventType, rawEvent, rawTarget, source, logger).fold(always, function (parent) {\n      return doTriggerOnUntilStopped(lookup, eventType, rawEvent, parent, source, logger);\n    }, never);\n  };\n  var triggerHandler = function triggerHandler(lookup, eventType, rawEvent, target, logger) {\n    var source = derive$1(rawEvent, target);\n    return doTriggerHandler(lookup, eventType, rawEvent, target, source, logger);\n  };\n  var broadcast = function broadcast(listeners, rawEvent, _logger) {\n    var simulatedEvent = fromExternal(rawEvent);\n    each$1(listeners, function (listener) {\n      var descHandler = listener.descHandler;\n      var handler = getCurried(descHandler);\n      handler(simulatedEvent);\n    });\n    return simulatedEvent.isStopped();\n  };\n  var triggerUntilStopped = function triggerUntilStopped(lookup, eventType, rawEvent, logger) {\n    return triggerOnUntilStopped(lookup, eventType, rawEvent, rawEvent.target, logger);\n  };\n  var triggerOnUntilStopped = function triggerOnUntilStopped(lookup, eventType, rawEvent, rawTarget, logger) {\n    var source = derive$1(rawEvent, rawTarget);\n    return doTriggerOnUntilStopped(lookup, eventType, rawEvent, rawTarget, source, logger);\n  };\n  var eventHandler = function eventHandler(element, descHandler) {\n    return {\n      element: element,\n      descHandler: descHandler\n    };\n  };\n  var broadcastHandler = function broadcastHandler(id, handler) {\n    return {\n      id: id,\n      descHandler: handler\n    };\n  };\n  var EventRegistry = function EventRegistry() {\n    var registry = {};\n    var registerId = function registerId(extraArgs, id, events) {\n      each(events, function (v, k) {\n        var handlers = registry[k] !== undefined ? registry[k] : {};\n        handlers[id] = curryArgs(v, extraArgs);\n        registry[k] = handlers;\n      });\n    };\n    var findHandler = function findHandler(handlers, elem) {\n      return read(elem).bind(function (id) {\n        return get$c(handlers, id);\n      }).map(function (descHandler) {\n        return eventHandler(elem, descHandler);\n      });\n    };\n    var filterByType = function filterByType(type) {\n      return get$c(registry, type).map(function (handlers) {\n        return mapToArray(handlers, function (f, id) {\n          return broadcastHandler(id, f);\n        });\n      }).getOr([]);\n    };\n    var find = function find(isAboveRoot, type, target) {\n      return get$c(registry, type).bind(function (handlers) {\n        return closest$3(target, function (elem) {\n          return findHandler(handlers, elem);\n        }, isAboveRoot);\n      });\n    };\n    var unregisterId = function unregisterId(id) {\n      each(registry, function (handlersById, _eventName) {\n        if (has$2(handlersById, id)) {\n          delete handlersById[id];\n        }\n      });\n    };\n    return {\n      registerId: registerId,\n      unregisterId: unregisterId,\n      filterByType: filterByType,\n      find: find\n    };\n  };\n  var Registry = function Registry() {\n    var events = EventRegistry();\n    var components = {};\n    var readOrTag = function readOrTag(component) {\n      var elem = component.element;\n      return read(elem).getOrThunk(function () {\n        return write('uid-', component.element);\n      });\n    };\n    var failOnDuplicate = function failOnDuplicate(component, tagId) {\n      var conflict = components[tagId];\n      if (conflict === component) {\n        unregister(component);\n      } else {\n        throw new Error('The tagId \"' + tagId + '\" is already used by: ' + element(conflict.element) + '\\nCannot use it for: ' + element(component.element) + '\\n' + 'The conflicting element is' + (inBody(conflict.element) ? ' ' : ' not ') + 'already in the DOM');\n      }\n    };\n    var register = function register(component) {\n      var tagId = readOrTag(component);\n      if (hasNonNullableKey(components, tagId)) {\n        failOnDuplicate(component, tagId);\n      }\n      var extraArgs = [component];\n      events.registerId(extraArgs, tagId, component.events);\n      components[tagId] = component;\n    };\n    var unregister = function unregister(component) {\n      read(component.element).each(function (tagId) {\n        delete components[tagId];\n        events.unregisterId(tagId);\n      });\n    };\n    var filter = function filter(type) {\n      return events.filterByType(type);\n    };\n    var find = function find(isAboveRoot, type, target) {\n      return events.find(isAboveRoot, type, target);\n    };\n    var getById = function getById(id) {\n      return get$c(components, id);\n    };\n    return {\n      find: find,\n      filter: filter,\n      register: register,\n      unregister: unregister,\n      getById: getById\n    };\n  };\n  var takeover$1 = function takeover$1(root) {\n    var isAboveRoot = function isAboveRoot(el) {\n      return parent(root.element).fold(always, function (parent) {\n        return eq(el, parent);\n      });\n    };\n    var registry = Registry();\n    var lookup = function lookup(eventName, target) {\n      return registry.find(isAboveRoot, eventName, target);\n    };\n    var domEvents = setup$1(root.element, {\n      triggerEvent: function triggerEvent(eventName, event) {\n        return monitorEvent(eventName, event.target, function (logger) {\n          return triggerUntilStopped(lookup, eventName, event, logger);\n        });\n      }\n    });\n    var systemApi = {\n      debugInfo: constant$1('real'),\n      triggerEvent: function triggerEvent(eventName, target, data) {\n        monitorEvent(eventName, target, function (logger) {\n          return triggerOnUntilStopped(lookup, eventName, data, target, logger);\n        });\n      },\n      triggerFocus: function triggerFocus(target, originator) {\n        read(target).fold(function () {\n          focus$3(target);\n        }, function (_alloyId) {\n          monitorEvent(focus$4(), target, function (logger) {\n            triggerHandler(lookup, focus$4(), {\n              originator: originator,\n              kill: noop,\n              prevent: noop,\n              target: target\n            }, target, logger);\n            return false;\n          });\n        });\n      },\n      triggerEscape: function triggerEscape(comp, simulatedEvent) {\n        systemApi.triggerEvent('keydown', comp.element, simulatedEvent.event);\n      },\n      getByUid: function getByUid(uid) {\n        return _getByUid(uid);\n      },\n      getByDom: function getByDom(elem) {\n        return _getByDom(elem);\n      },\n      build: build$1,\n      addToGui: function addToGui(c) {\n        add(c);\n      },\n      removeFromGui: function removeFromGui(c) {\n        remove(c);\n      },\n      addToWorld: function addToWorld(c) {\n        _addToWorld(c);\n      },\n      removeFromWorld: function removeFromWorld(c) {\n        _removeFromWorld(c);\n      },\n      broadcast: function broadcast(message) {\n        broadcast$1(message);\n      },\n      broadcastOn: function broadcastOn(channels, message) {\n        _broadcastOn(channels, message);\n      },\n      broadcastEvent: function broadcastEvent(eventName, event) {\n        _broadcastEvent(eventName, event);\n      },\n      isConnected: always\n    };\n    var _addToWorld = function _addToWorld(component) {\n      component.connect(systemApi);\n      if (!isText(component.element)) {\n        registry.register(component);\n        each$1(component.components(), _addToWorld);\n        systemApi.triggerEvent(systemInit(), component.element, {\n          target: component.element\n        });\n      }\n    };\n    var _removeFromWorld = function _removeFromWorld(component) {\n      if (!isText(component.element)) {\n        each$1(component.components(), _removeFromWorld);\n        registry.unregister(component);\n      }\n      component.disconnect();\n    };\n    var add = function add(component) {\n      attach(root, component);\n    };\n    var remove = function remove(component) {\n      detach(component);\n    };\n    var destroy = function destroy() {\n      domEvents.unbind();\n      remove$7(root.element);\n    };\n    var broadcastData = function broadcastData(data) {\n      var receivers = registry.filter(receive$1());\n      each$1(receivers, function (receiver) {\n        var descHandler = receiver.descHandler;\n        var handler = getCurried(descHandler);\n        handler(data);\n      });\n    };\n    var broadcast$1 = function broadcast$1(message) {\n      broadcastData({\n        universal: true,\n        data: message\n      });\n    };\n    var _broadcastOn = function _broadcastOn(channels, message) {\n      broadcastData({\n        universal: false,\n        channels: channels,\n        data: message\n      });\n    };\n    var _broadcastEvent = function _broadcastEvent(eventName, event) {\n      var listeners = registry.filter(eventName);\n      return broadcast(listeners, event);\n    };\n    var _getByUid = function _getByUid(uid) {\n      return registry.getById(uid).fold(function () {\n        return Result.error(new Error('Could not find component with uid: \"' + uid + '\" in system.'));\n      }, Result.value);\n    };\n    var _getByDom = function _getByDom(elem) {\n      var uid = read(elem).getOr('not found');\n      return _getByUid(uid);\n    };\n    _addToWorld(root);\n    return {\n      root: root,\n      element: root.element,\n      destroy: destroy,\n      add: add,\n      remove: remove,\n      getByUid: _getByUid,\n      getByDom: _getByDom,\n      addToWorld: _addToWorld,\n      removeFromWorld: _removeFromWorld,\n      broadcast: broadcast$1,\n      broadcastOn: _broadcastOn,\n      broadcastEvent: _broadcastEvent\n    };\n  };\n  var READ_ONLY_MODE_CLASS = resolve('readonly-mode');\n  var EDIT_MODE_CLASS = resolve('edit-mode');\n  function OuterContainer(spec) {\n    var root = build$1(Container.sketch({\n      dom: {\n        classes: [resolve('outer-container')].concat(spec.classes)\n      },\n      containerBehaviours: derive$2([Swapping.config({\n        alpha: READ_ONLY_MODE_CLASS,\n        omega: EDIT_MODE_CLASS\n      })])\n    }));\n    return takeover$1(root);\n  }\n  function AndroidRealm(scrollIntoView) {\n    var alloy = OuterContainer({\n      classes: [resolve('android-container')]\n    });\n    var toolbar = ScrollingToolbar();\n    var webapp = api$2();\n    var switchToEdit = makeEditSwitch(webapp);\n    var socket = makeSocket();\n    var dropup = build(noop, scrollIntoView);\n    alloy.add(toolbar.wrapper);\n    alloy.add(socket);\n    alloy.add(dropup.component);\n    var setToolbarGroups = function setToolbarGroups(rawGroups) {\n      var groups = toolbar.createGroups(rawGroups);\n      toolbar.setGroups(groups);\n    };\n    var setContextToolbar = function setContextToolbar(rawGroups) {\n      var groups = toolbar.createGroups(rawGroups);\n      toolbar.setContextToolbar(groups);\n    };\n    var focusToolbar = function focusToolbar() {\n      toolbar.focus();\n    };\n    var restoreToolbar = function restoreToolbar() {\n      toolbar.restoreToolbar();\n    };\n    var init = function init(spec) {\n      webapp.set(produce$1(spec));\n    };\n    var exit = function exit() {\n      webapp.run(function (w) {\n        w.exit();\n        Replacing.remove(socket, switchToEdit);\n      });\n    };\n    var updateMode$1 = function updateMode$1(readOnly) {\n      updateMode(socket, switchToEdit, readOnly, alloy.root);\n    };\n    return {\n      system: alloy,\n      element: alloy.element,\n      init: init,\n      exit: exit,\n      setToolbarGroups: setToolbarGroups,\n      setContextToolbar: setContextToolbar,\n      focusToolbar: focusToolbar,\n      restoreToolbar: restoreToolbar,\n      updateMode: updateMode$1,\n      socket: socket,\n      dropup: dropup\n    };\n  }\n  var input = function input(parent, operation) {\n    var input = SugarElement.fromTag('input');\n    setAll(input, {\n      opacity: '0',\n      position: 'absolute',\n      top: '-1000px',\n      left: '-1000px'\n    });\n    append$2(parent, input);\n    focus$3(input);\n    operation(input);\n    remove$7(input);\n  };\n  var refresh = function refresh(winScope) {\n    var sel = winScope.getSelection();\n    if (sel.rangeCount > 0) {\n      var br = sel.getRangeAt(0);\n      var r = winScope.document.createRange();\n      r.setStart(br.startContainer, br.startOffset);\n      r.setEnd(br.endContainer, br.endOffset);\n      sel.removeAllRanges();\n      sel.addRange(r);\n    }\n  };\n  var resume = function resume(cWin, frame) {\n    active().each(function (active) {\n      if (!eq(active, frame)) {\n        blur$1(active);\n      }\n    });\n    cWin.focus();\n    focus$3(SugarElement.fromDom(cWin.document.body));\n    refresh(cWin);\n  };\n  var stubborn = function stubborn(outerBody, cWin, page, frame) {\n    var toEditing = function toEditing() {\n      resume(cWin, frame);\n    };\n    var toReading = function toReading() {\n      input(outerBody, blur$1);\n    };\n    var captureInput = bind(page, 'keydown', function (evt) {\n      if (!contains$1(['input', 'textarea'], name$1(evt.target))) {\n        toEditing();\n      }\n    });\n    var onToolbarTouch = noop;\n    var destroy = function destroy() {\n      captureInput.unbind();\n    };\n    return {\n      toReading: toReading,\n      toEditing: toEditing,\n      onToolbarTouch: onToolbarTouch,\n      destroy: destroy\n    };\n  };\n  var initEvents = function initEvents(editorApi, iosApi, toolstrip, socket, _dropup) {\n    var saveSelectionFirst = function saveSelectionFirst() {\n      iosApi.run(function (api) {\n        api.highlightSelection();\n      });\n    };\n    var refreshIosSelection = function refreshIosSelection() {\n      iosApi.run(function (api) {\n        api.refreshSelection();\n      });\n    };\n    var scrollToY = function scrollToY(yTop, height) {\n      var y = yTop - socket.dom.scrollTop;\n      iosApi.run(function (api) {\n        api.scrollIntoView(y, y + height);\n      });\n    };\n    var scrollToElement = function scrollToElement(_target) {\n      scrollToY(iosApi, socket);\n    };\n    var scrollToCursor = function scrollToCursor() {\n      editorApi.getCursorBox().each(function (box) {\n        scrollToY(box.top, box.height);\n      });\n    };\n    var clearSelection = function clearSelection() {\n      iosApi.run(function (api) {\n        api.clearSelection();\n      });\n    };\n    var clearAndRefresh = function clearAndRefresh() {\n      clearSelection();\n      refreshThrottle.throttle();\n    };\n    var refreshView = function refreshView() {\n      scrollToCursor();\n      iosApi.run(function (api) {\n        api.syncHeight();\n      });\n    };\n    var reposition = function reposition() {\n      var toolbarHeight = get$7(toolstrip);\n      iosApi.run(function (api) {\n        api.setViewportOffset(toolbarHeight);\n      });\n      refreshIosSelection();\n      refreshView();\n    };\n    var toEditing = function toEditing() {\n      iosApi.run(function (api) {\n        api.toEditing();\n      });\n    };\n    var toReading = function toReading() {\n      iosApi.run(function (api) {\n        api.toReading();\n      });\n    };\n    var onToolbarTouch = function onToolbarTouch(event) {\n      iosApi.run(function (api) {\n        api.onToolbarTouch(event);\n      });\n    };\n    var tapping = monitor(editorApi);\n    var refreshThrottle = last(refreshView, 300);\n    var listeners = [editorApi.onKeyup(clearAndRefresh), editorApi.onNodeChanged(refreshIosSelection), editorApi.onDomChanged(refreshThrottle.throttle), editorApi.onDomChanged(refreshIosSelection), editorApi.onScrollToCursor(function (tinyEvent) {\n      tinyEvent.preventDefault();\n      refreshThrottle.throttle();\n    }), editorApi.onScrollToElement(function (event) {\n      scrollToElement(event.element);\n    }), editorApi.onToEditing(toEditing), editorApi.onToReading(toReading), bind(editorApi.doc, 'touchend', function (touchEvent) {\n      if (eq(editorApi.html, touchEvent.target) || eq(editorApi.body, touchEvent.target)) ;\n    }), bind(toolstrip, 'transitionend', function (transitionEvent) {\n      if (transitionEvent.raw.propertyName === 'height') {\n        reposition();\n      }\n    }), capture(toolstrip, 'touchstart', function (touchEvent) {\n      saveSelectionFirst();\n      onToolbarTouch(touchEvent);\n      editorApi.onTouchToolstrip();\n    }), bind(editorApi.body, 'touchstart', function (evt) {\n      clearSelection();\n      editorApi.onTouchContent();\n      tapping.fireTouchstart(evt);\n    }), tapping.onTouchmove(), tapping.onTouchend(), bind(editorApi.body, 'click', function (event) {\n      event.kill();\n    }), bind(toolstrip, 'touchmove', function () {\n      editorApi.onToolbarScrollStart();\n    })];\n    var destroy = function destroy() {\n      each$1(listeners, function (l) {\n        l.unbind();\n      });\n    };\n    return {\n      destroy: destroy\n    };\n  };\n  function FakeSelection(win, frame) {\n    var doc = win.document;\n    var container = SugarElement.fromTag('div');\n    add$1(container, resolve('unfocused-selections'));\n    append$2(SugarElement.fromDom(doc.documentElement), container);\n    var onTouch = bind(container, 'touchstart', function (event) {\n      event.prevent();\n      resume(win, frame);\n      clear();\n    });\n    var make = function make(rectangle) {\n      var span = SugarElement.fromTag('span');\n      add(span, [resolve('layer-editor'), resolve('unfocused-selection')]);\n      setAll(span, {\n        left: rectangle.left + 'px',\n        top: rectangle.top + 'px',\n        width: rectangle.width + 'px',\n        height: rectangle.height + 'px'\n      });\n      return span;\n    };\n    var update = function update() {\n      clear();\n      var rectangles = getRectangles(win);\n      var spans = map$2(rectangles, make);\n      append$1(container, spans);\n    };\n    var clear = function clear() {\n      empty(container);\n    };\n    var destroy = function destroy() {\n      onTouch.unbind();\n      remove$7(container);\n    };\n    var isActive = function isActive() {\n      return children(container).length > 0;\n    };\n    return {\n      update: update,\n      isActive: isActive,\n      destroy: destroy,\n      clear: clear\n    };\n  }\n  var nu$1 = function nu$1(baseFn) {\n    var data = Optional.none();\n    var callbacks = [];\n    var map = function map(f) {\n      return nu$1(function (nCallback) {\n        get(function (data) {\n          nCallback(f(data));\n        });\n      });\n    };\n    var get = function get(nCallback) {\n      if (isReady()) {\n        call(nCallback);\n      } else {\n        callbacks.push(nCallback);\n      }\n    };\n    var set = function set(x) {\n      if (!isReady()) {\n        data = Optional.some(x);\n        run(callbacks);\n        callbacks = [];\n      }\n    };\n    var isReady = function isReady() {\n      return data.isSome();\n    };\n    var run = function run(cbs) {\n      each$1(cbs, call);\n    };\n    var call = function call(cb) {\n      data.each(function (x) {\n        setTimeout(function () {\n          cb(x);\n        }, 0);\n      });\n    };\n    baseFn(set);\n    return {\n      get: get,\n      map: map,\n      isReady: isReady\n    };\n  };\n  var pure$1 = function pure$1(a) {\n    return nu$1(function (callback) {\n      callback(a);\n    });\n  };\n  var LazyValue = {\n    nu: nu$1,\n    pure: pure$1\n  };\n  var errorReporter = function errorReporter(err) {\n    setTimeout(function () {\n      throw err;\n    }, 0);\n  };\n  var make = function make(run) {\n    var get = function get(callback) {\n      run().then(callback, errorReporter);\n    };\n    var map = function map(fab) {\n      return make(function () {\n        return run().then(fab);\n      });\n    };\n    var bind = function bind(aFutureB) {\n      return make(function () {\n        return run().then(function (v) {\n          return aFutureB(v).toPromise();\n        });\n      });\n    };\n    var anonBind = function anonBind(futureB) {\n      return make(function () {\n        return run().then(function () {\n          return futureB.toPromise();\n        });\n      });\n    };\n    var toLazy = function toLazy() {\n      return LazyValue.nu(get);\n    };\n    var toCached = function toCached() {\n      var cache = null;\n      return make(function () {\n        if (cache === null) {\n          cache = run();\n        }\n        return cache;\n      });\n    };\n    var toPromise = run;\n    return {\n      map: map,\n      bind: bind,\n      anonBind: anonBind,\n      toLazy: toLazy,\n      toCached: toCached,\n      toPromise: toPromise,\n      get: get\n    };\n  };\n  var nu = function nu(baseFn) {\n    return make(function () {\n      return new Promise$1(baseFn);\n    });\n  };\n  var pure = function pure(a) {\n    return make(function () {\n      return Promise$1.resolve(a);\n    });\n  };\n  var Future = {\n    nu: nu,\n    pure: pure\n  };\n  var adjust = function adjust(value, destination, amount) {\n    if (Math.abs(value - destination) <= amount) {\n      return Optional.none();\n    } else if (value < destination) {\n      return Optional.some(value + amount);\n    } else {\n      return Optional.some(value - amount);\n    }\n  };\n  var create$1 = function create$1() {\n    var interval = null;\n    var animate = function animate(getCurrent, destination, amount, increment, doFinish, rate) {\n      var finished = false;\n      var finish = function finish(v) {\n        finished = true;\n        doFinish(v);\n      };\n      global$2.clearInterval(interval);\n      var abort = function abort(v) {\n        global$2.clearInterval(interval);\n        finish(v);\n      };\n      interval = global$2.setInterval(function () {\n        var value = getCurrent();\n        adjust(value, destination, amount).fold(function () {\n          global$2.clearInterval(interval);\n          finish(destination);\n        }, function (s) {\n          increment(s, abort);\n          if (!finished) {\n            var newValue = getCurrent();\n            if (newValue !== s || Math.abs(newValue - destination) > Math.abs(value - destination)) {\n              global$2.clearInterval(interval);\n              finish(destination);\n            }\n          }\n        });\n      }, rate);\n    };\n    return {\n      animate: animate\n    };\n  };\n  var findDevice = function findDevice(deviceWidth, deviceHeight) {\n    var devices = [{\n      width: 320,\n      height: 480,\n      keyboard: {\n        portrait: 300,\n        landscape: 240\n      }\n    }, {\n      width: 320,\n      height: 568,\n      keyboard: {\n        portrait: 300,\n        landscape: 240\n      }\n    }, {\n      width: 375,\n      height: 667,\n      keyboard: {\n        portrait: 305,\n        landscape: 240\n      }\n    }, {\n      width: 414,\n      height: 736,\n      keyboard: {\n        portrait: 320,\n        landscape: 240\n      }\n    }, {\n      width: 768,\n      height: 1024,\n      keyboard: {\n        portrait: 320,\n        landscape: 400\n      }\n    }, {\n      width: 1024,\n      height: 1366,\n      keyboard: {\n        portrait: 380,\n        landscape: 460\n      }\n    }];\n    return findMap(devices, function (device) {\n      return someIf(deviceWidth <= device.width && deviceHeight <= device.height, device.keyboard);\n    }).getOr({\n      portrait: deviceHeight / 5,\n      landscape: deviceWidth / 4\n    });\n  };\n  var softKeyboardLimits = function softKeyboardLimits(outerWindow) {\n    return findDevice(outerWindow.screen.width, outerWindow.screen.height);\n  };\n  var accountableKeyboardHeight = function accountableKeyboardHeight(outerWindow) {\n    var portrait = get$1(outerWindow).isPortrait();\n    var limits = softKeyboardLimits(outerWindow);\n    var keyboard = portrait ? limits.portrait : limits.landscape;\n    var visualScreenHeight = portrait ? outerWindow.screen.height : outerWindow.screen.width;\n    return visualScreenHeight - outerWindow.innerHeight > keyboard ? 0 : keyboard;\n  };\n  var getGreenzone = function getGreenzone(socket, dropup) {\n    var outerWindow = owner$2(socket).dom.defaultView;\n    var viewportHeight = get$7(socket) + get$7(dropup);\n    var acc = accountableKeyboardHeight(outerWindow);\n    return viewportHeight - acc;\n  };\n  var updatePadding = function updatePadding(contentBody, socket, dropup) {\n    var greenzoneHeight = getGreenzone(socket, dropup);\n    var deltaHeight = get$7(socket) + get$7(dropup) - greenzoneHeight;\n    set$5(contentBody, 'padding-bottom', deltaHeight + 'px');\n  };\n  var fixture = Adt.generate([{\n    fixed: ['element', 'property', 'offsetY']\n  }, {\n    scroller: ['element', 'offsetY']\n  }]);\n  var yFixedData = 'data-' + resolve('position-y-fixed');\n  var yFixedProperty = 'data-' + resolve('y-property');\n  var yScrollingData = 'data-' + resolve('scrolling');\n  var windowSizeData = 'data-' + resolve('last-window-height');\n  var getYFixedData = function getYFixedData(element) {\n    return safeParse(element, yFixedData);\n  };\n  var getYFixedProperty = function getYFixedProperty(element) {\n    return get$b(element, yFixedProperty);\n  };\n  var getLastWindowSize = function getLastWindowSize(element) {\n    return safeParse(element, windowSizeData);\n  };\n  var classifyFixed = function classifyFixed(element, offsetY) {\n    var prop = getYFixedProperty(element);\n    return fixture.fixed(element, prop, offsetY);\n  };\n  var classifyScrolling = function classifyScrolling(element, offsetY) {\n    return fixture.scroller(element, offsetY);\n  };\n  var classify = function classify(element) {\n    var offsetY = getYFixedData(element);\n    var classifier = get$b(element, yScrollingData) === 'true' ? classifyScrolling : classifyFixed;\n    return classifier(element, offsetY);\n  };\n  var findFixtures = function findFixtures(container) {\n    var candidates = descendants(container, '[' + yFixedData + ']');\n    return map$2(candidates, classify);\n  };\n  var takeoverToolbar = function takeoverToolbar(toolbar) {\n    var oldToolbarStyle = get$b(toolbar, 'style');\n    setAll(toolbar, {\n      position: 'absolute',\n      top: '0px'\n    });\n    set$8(toolbar, yFixedData, '0px');\n    set$8(toolbar, yFixedProperty, 'top');\n    var restore = function restore() {\n      set$8(toolbar, 'style', oldToolbarStyle || '');\n      remove$6(toolbar, yFixedData);\n      remove$6(toolbar, yFixedProperty);\n    };\n    return {\n      restore: restore\n    };\n  };\n  var takeoverViewport = function takeoverViewport(toolbarHeight, height, viewport) {\n    var oldViewportStyle = get$b(viewport, 'style');\n    register$2(viewport);\n    setAll(viewport, {\n      position: 'absolute',\n      height: height + 'px',\n      width: '100%',\n      top: toolbarHeight + 'px'\n    });\n    set$8(viewport, yFixedData, toolbarHeight + 'px');\n    set$8(viewport, yScrollingData, 'true');\n    set$8(viewport, yFixedProperty, 'top');\n    var restore = function restore() {\n      deregister(viewport);\n      set$8(viewport, 'style', oldViewportStyle || '');\n      remove$6(viewport, yFixedData);\n      remove$6(viewport, yScrollingData);\n      remove$6(viewport, yFixedProperty);\n    };\n    return {\n      restore: restore\n    };\n  };\n  var takeoverDropup = function takeoverDropup(dropup) {\n    var oldDropupStyle = get$b(dropup, 'style');\n    setAll(dropup, {\n      position: 'absolute',\n      bottom: '0px'\n    });\n    set$8(dropup, yFixedData, '0px');\n    set$8(dropup, yFixedProperty, 'bottom');\n    var restore = function restore() {\n      set$8(dropup, 'style', oldDropupStyle || '');\n      remove$6(dropup, yFixedData);\n      remove$6(dropup, yFixedProperty);\n    };\n    return {\n      restore: restore\n    };\n  };\n  var deriveViewportHeight = function deriveViewportHeight(viewport, toolbarHeight, dropupHeight) {\n    var outerWindow = owner$2(viewport).dom.defaultView;\n    var winH = outerWindow.innerHeight;\n    set$8(viewport, windowSizeData, winH + 'px');\n    return winH - toolbarHeight - dropupHeight;\n  };\n  var takeover = function takeover(viewport, contentBody, toolbar, dropup) {\n    var outerWindow = owner$2(viewport).dom.defaultView;\n    var toolbarSetup = takeoverToolbar(toolbar);\n    var toolbarHeight = get$7(toolbar);\n    var dropupHeight = get$7(dropup);\n    var viewportHeight = deriveViewportHeight(viewport, toolbarHeight, dropupHeight);\n    var viewportSetup = takeoverViewport(toolbarHeight, viewportHeight, viewport);\n    var dropupSetup = takeoverDropup(dropup);\n    var isActive = true;\n    var restore = function restore() {\n      isActive = false;\n      toolbarSetup.restore();\n      viewportSetup.restore();\n      dropupSetup.restore();\n    };\n    var isExpanding = function isExpanding() {\n      var currentWinHeight = outerWindow.innerHeight;\n      var lastWinHeight = getLastWindowSize(viewport);\n      return currentWinHeight > lastWinHeight;\n    };\n    var refresh = function refresh() {\n      if (isActive) {\n        var newToolbarHeight = get$7(toolbar);\n        var dropupHeight_1 = get$7(dropup);\n        var newHeight = deriveViewportHeight(viewport, newToolbarHeight, dropupHeight_1);\n        set$8(viewport, yFixedData, newToolbarHeight + 'px');\n        set$5(viewport, 'height', newHeight + 'px');\n        updatePadding(contentBody, viewport, dropup);\n      }\n    };\n    var setViewportOffset = function setViewportOffset(newYOffset) {\n      var offsetPx = newYOffset + 'px';\n      set$8(viewport, yFixedData, offsetPx);\n      refresh();\n    };\n    updatePadding(contentBody, viewport, dropup);\n    return {\n      setViewportOffset: setViewportOffset,\n      isExpanding: isExpanding,\n      isShrinking: not(isExpanding),\n      refresh: refresh,\n      restore: restore\n    };\n  };\n  var animator = create$1();\n  var ANIMATION_STEP = 15;\n  var NUM_TOP_ANIMATION_FRAMES = 10;\n  var ANIMATION_RATE = 10;\n  var lastScroll = 'data-' + resolve('last-scroll-top');\n  var getTop = function getTop(element) {\n    var raw = getRaw(element, 'top').getOr('0');\n    return parseInt(raw, 10);\n  };\n  var getScrollTop = function getScrollTop(element) {\n    return parseInt(element.dom.scrollTop, 10);\n  };\n  var moveScrollAndTop = function moveScrollAndTop(element, destination, finalTop) {\n    return Future.nu(function (callback) {\n      var getCurrent = curry(getScrollTop, element);\n      var update = function update(newScroll) {\n        element.dom.scrollTop = newScroll;\n        set$5(element, 'top', getTop(element) + ANIMATION_STEP + 'px');\n      };\n      var finish = function finish() {\n        element.dom.scrollTop = destination;\n        set$5(element, 'top', finalTop + 'px');\n        callback(destination);\n      };\n      animator.animate(getCurrent, destination, ANIMATION_STEP, update, finish, ANIMATION_RATE);\n    });\n  };\n  var moveOnlyScroll = function moveOnlyScroll(element, destination) {\n    return Future.nu(function (callback) {\n      var getCurrent = curry(getScrollTop, element);\n      set$8(element, lastScroll, getCurrent());\n      var update = function update(newScroll, abort) {\n        var previous = safeParse(element, lastScroll);\n        if (previous !== element.dom.scrollTop) {\n          abort(element.dom.scrollTop);\n        } else {\n          element.dom.scrollTop = newScroll;\n          set$8(element, lastScroll, newScroll);\n        }\n      };\n      var finish = function finish() {\n        element.dom.scrollTop = destination;\n        set$8(element, lastScroll, destination);\n        callback(destination);\n      };\n      var distance = Math.abs(destination - getCurrent());\n      var step = Math.ceil(distance / NUM_TOP_ANIMATION_FRAMES);\n      animator.animate(getCurrent, destination, step, update, finish, ANIMATION_RATE);\n    });\n  };\n  var moveOnlyTop = function moveOnlyTop(element, destination) {\n    return Future.nu(function (callback) {\n      var getCurrent = curry(getTop, element);\n      var update = function update(newTop) {\n        set$5(element, 'top', newTop + 'px');\n      };\n      var finish = function finish() {\n        update(destination);\n        callback(destination);\n      };\n      var distance = Math.abs(destination - getCurrent());\n      var step = Math.ceil(distance / NUM_TOP_ANIMATION_FRAMES);\n      animator.animate(getCurrent, destination, step, update, finish, ANIMATION_RATE);\n    });\n  };\n  var updateTop = function updateTop(element, amount) {\n    var newTop = amount + getYFixedData(element) + 'px';\n    set$5(element, 'top', newTop);\n  };\n  var moveWindowScroll = function moveWindowScroll(toolbar, viewport, destY) {\n    var outerWindow = owner$2(toolbar).dom.defaultView;\n    return Future.nu(function (callback) {\n      updateTop(toolbar, destY);\n      updateTop(viewport, destY);\n      outerWindow.scrollTo(0, destY);\n      callback(destY);\n    });\n  };\n  function BackgroundActivity(doAction) {\n    var action = Cell(LazyValue.pure({}));\n    var start = function start(value) {\n      var future = LazyValue.nu(function (callback) {\n        return doAction(value).get(callback);\n      });\n      action.set(future);\n    };\n    var idle = function idle(g) {\n      action.get().get(function () {\n        g();\n      });\n    };\n    return {\n      start: start,\n      idle: idle\n    };\n  }\n  var scrollIntoView = function scrollIntoView(cWin, socket, dropup, top, bottom) {\n    var greenzone = getGreenzone(socket, dropup);\n    var refreshCursor = curry(refresh, cWin);\n    if (top > greenzone || bottom > greenzone) {\n      moveOnlyScroll(socket, socket.dom.scrollTop - greenzone + bottom).get(refreshCursor);\n    } else if (top < 0) {\n      moveOnlyScroll(socket, socket.dom.scrollTop + top).get(refreshCursor);\n    } else ;\n  };\n  var par$1 = function par$1(asyncValues, nu) {\n    return nu(function (callback) {\n      var r = [];\n      var count = 0;\n      var cb = function cb(i) {\n        return function (value) {\n          r[i] = value;\n          count++;\n          if (count >= asyncValues.length) {\n            callback(r);\n          }\n        };\n      };\n      if (asyncValues.length === 0) {\n        callback([]);\n      } else {\n        each$1(asyncValues, function (asyncValue, i) {\n          asyncValue.get(cb(i));\n        });\n      }\n    });\n  };\n  var par = function par(futures) {\n    return par$1(futures, Future.nu);\n  };\n  var updateFixed = function updateFixed(element, property, winY, offsetY) {\n    var destination = winY + offsetY;\n    set$5(element, property, destination + 'px');\n    return Future.pure(offsetY);\n  };\n  var updateScrollingFixed = function updateScrollingFixed(element, winY, offsetY) {\n    var destTop = winY + offsetY;\n    var oldProp = getRaw(element, 'top').getOr(offsetY);\n    var delta = destTop - parseInt(oldProp, 10);\n    var destScroll = element.dom.scrollTop + delta;\n    return moveScrollAndTop(element, destScroll, destTop);\n  };\n  var updateFixture = function updateFixture(fixture, winY) {\n    return fixture.fold(function (element, property, offsetY) {\n      return updateFixed(element, property, winY, offsetY);\n    }, function (element, offsetY) {\n      return updateScrollingFixed(element, winY, offsetY);\n    });\n  };\n  var updatePositions = function updatePositions(container, winY) {\n    var fixtures = findFixtures(container);\n    var updates = map$2(fixtures, function (fixture) {\n      return updateFixture(fixture, winY);\n    });\n    return par(updates);\n  };\n  var VIEW_MARGIN = 5;\n  var register = function register(toolstrip, socket, container, outerWindow, structure, cWin) {\n    var scroller = BackgroundActivity(function (y) {\n      return moveWindowScroll(toolstrip, socket, y);\n    });\n    var scrollBounds = function scrollBounds() {\n      var rects = getRectangles(cWin);\n      return Optional.from(rects[0]).bind(function (rect) {\n        var viewTop = rect.top - socket.dom.scrollTop;\n        var outside = viewTop > outerWindow.innerHeight + VIEW_MARGIN || viewTop < -VIEW_MARGIN;\n        return outside ? Optional.some({\n          top: viewTop,\n          bottom: viewTop + rect.height\n        }) : Optional.none();\n      });\n    };\n    var scrollThrottle = last(function () {\n      scroller.idle(function () {\n        updatePositions(container, outerWindow.pageYOffset).get(function () {\n          var extraScroll = scrollBounds();\n          extraScroll.each(function (extra) {\n            socket.dom.scrollTop = socket.dom.scrollTop + extra.top;\n          });\n          scroller.start(0);\n          structure.refresh();\n        });\n      });\n    }, 1000);\n    var onScroll = bind(SugarElement.fromDom(outerWindow), 'scroll', function () {\n      if (outerWindow.pageYOffset < 0) {\n        return;\n      }\n      scrollThrottle.throttle();\n    });\n    updatePositions(container, outerWindow.pageYOffset).get(identity);\n    return {\n      unbind: onScroll.unbind\n    };\n  };\n  var setup = function setup(bag) {\n    var cWin = bag.cWin;\n    var ceBody = bag.ceBody;\n    var socket = bag.socket;\n    var toolstrip = bag.toolstrip;\n    var contentElement = bag.contentElement;\n    var keyboardType = bag.keyboardType;\n    var outerWindow = bag.outerWindow;\n    var dropup = bag.dropup;\n    var outerBody = bag.outerBody;\n    var structure = takeover(socket, ceBody, toolstrip, dropup);\n    var keyboardModel = keyboardType(outerBody, cWin, body(), contentElement);\n    var toEditing = function toEditing() {\n      keyboardModel.toEditing();\n      clearSelection();\n    };\n    var toReading = function toReading() {\n      keyboardModel.toReading();\n    };\n    var onToolbarTouch = function onToolbarTouch(_event) {\n      keyboardModel.onToolbarTouch();\n    };\n    var onOrientation = onChange(outerWindow, {\n      onChange: noop,\n      onReady: structure.refresh\n    });\n    onOrientation.onAdjustment(function () {\n      structure.refresh();\n    });\n    var onResize = bind(SugarElement.fromDom(outerWindow), 'resize', function () {\n      if (structure.isExpanding()) {\n        structure.refresh();\n      }\n    });\n    var onScroll = register(toolstrip, socket, outerBody, outerWindow, structure, cWin);\n    var unfocusedSelection = FakeSelection(cWin, contentElement);\n    var refreshSelection = function refreshSelection() {\n      if (unfocusedSelection.isActive()) {\n        unfocusedSelection.update();\n      }\n    };\n    var highlightSelection = function highlightSelection() {\n      unfocusedSelection.update();\n    };\n    var clearSelection = function clearSelection() {\n      unfocusedSelection.clear();\n    };\n    var scrollIntoView$1 = function scrollIntoView$1(top, bottom) {\n      scrollIntoView(cWin, socket, dropup, top, bottom);\n    };\n    var syncHeight = function syncHeight() {\n      set$5(contentElement, 'height', contentElement.dom.contentWindow.document.body.scrollHeight + 'px');\n    };\n    var setViewportOffset = function setViewportOffset(newYOffset) {\n      structure.setViewportOffset(newYOffset);\n      moveOnlyTop(socket, newYOffset).get(identity);\n    };\n    var destroy = function destroy() {\n      structure.restore();\n      onOrientation.destroy();\n      onScroll.unbind();\n      onResize.unbind();\n      keyboardModel.destroy();\n      unfocusedSelection.destroy();\n      input(body(), blur$1);\n    };\n    return {\n      toEditing: toEditing,\n      toReading: toReading,\n      onToolbarTouch: onToolbarTouch,\n      refreshSelection: refreshSelection,\n      clearSelection: clearSelection,\n      highlightSelection: highlightSelection,\n      scrollIntoView: scrollIntoView$1,\n      updateToolbarPadding: noop,\n      setViewportOffset: setViewportOffset,\n      syncHeight: syncHeight,\n      refreshStructure: structure.refresh,\n      destroy: destroy\n    };\n  };\n  var create = function create(platform, mask) {\n    var meta = tag();\n    var priorState = value();\n    var scrollEvents = value();\n    var iosApi = api$2();\n    var iosEvents = api$2();\n    var enter = function enter() {\n      mask.hide();\n      var doc = SugarElement.fromDom(document);\n      getActiveApi(platform.editor).each(function (editorApi) {\n        priorState.set({\n          socketHeight: getRaw(platform.socket, 'height'),\n          iframeHeight: getRaw(editorApi.frame, 'height'),\n          outerScroll: document.body.scrollTop\n        });\n        scrollEvents.set({\n          exclusives: exclusive(doc, '.' + scrollable)\n        });\n        add$1(platform.container, resolve('fullscreen-maximized'));\n        clobberStyles(platform.container, editorApi.body);\n        meta.maximize();\n        set$5(platform.socket, 'overflow', 'scroll');\n        set$5(platform.socket, '-webkit-overflow-scrolling', 'touch');\n        focus$3(editorApi.body);\n        iosApi.set(setup({\n          cWin: editorApi.win,\n          ceBody: editorApi.body,\n          socket: platform.socket,\n          toolstrip: platform.toolstrip,\n          dropup: platform.dropup.element,\n          contentElement: editorApi.frame,\n          outerBody: platform.body,\n          outerWindow: platform.win,\n          keyboardType: stubborn\n        }));\n        iosApi.run(function (api) {\n          api.syncHeight();\n        });\n        iosEvents.set(initEvents(editorApi, iosApi, platform.toolstrip, platform.socket, platform.dropup));\n      });\n    };\n    var exit = function exit() {\n      meta.restore();\n      iosEvents.clear();\n      iosApi.clear();\n      mask.show();\n      priorState.on(function (s) {\n        s.socketHeight.each(function (h) {\n          set$5(platform.socket, 'height', h);\n        });\n        s.iframeHeight.each(function (h) {\n          set$5(platform.editor.getFrame(), 'height', h);\n        });\n        document.body.scrollTop = s.scrollTop;\n      });\n      priorState.clear();\n      scrollEvents.on(function (s) {\n        s.exclusives.unbind();\n      });\n      scrollEvents.clear();\n      remove$3(platform.container, resolve('fullscreen-maximized'));\n      restoreStyles();\n      deregister(platform.toolbar);\n      remove$2(platform.socket, 'overflow');\n      remove$2(platform.socket, '-webkit-overflow-scrolling');\n      blur$1(platform.editor.getFrame());\n      getActiveApi(platform.editor).each(function (editorApi) {\n        editorApi.clearSelection();\n      });\n    };\n    var refreshStructure = function refreshStructure() {\n      iosApi.run(function (api) {\n        api.refreshStructure();\n      });\n    };\n    return {\n      enter: enter,\n      refreshStructure: refreshStructure,\n      exit: exit\n    };\n  };\n  var produce = function produce(raw) {\n    var mobile = asRawOrDie$1('Getting IosWebapp schema', MobileSchema, raw);\n    set$5(mobile.toolstrip, 'width', '100%');\n    set$5(mobile.container, 'position', 'relative');\n    var onView = function onView() {\n      mobile.setReadOnly(mobile.readOnlyOnInit());\n      mode.enter();\n    };\n    var mask = build$1(sketch(onView, mobile.translate));\n    mobile.alloy.add(mask);\n    var maskApi = {\n      show: function show() {\n        mobile.alloy.add(mask);\n      },\n      hide: function hide() {\n        mobile.alloy.remove(mask);\n      }\n    };\n    var mode = create(mobile, maskApi);\n    return {\n      setReadOnly: mobile.setReadOnly,\n      refreshStructure: mode.refreshStructure,\n      enter: mode.enter,\n      exit: mode.exit,\n      destroy: noop\n    };\n  };\n  function IosRealm(scrollIntoView) {\n    var alloy = OuterContainer({\n      classes: [resolve('ios-container')]\n    });\n    var toolbar = ScrollingToolbar();\n    var webapp = api$2();\n    var switchToEdit = makeEditSwitch(webapp);\n    var socket = makeSocket();\n    var dropup = build(function () {\n      webapp.run(function (w) {\n        w.refreshStructure();\n      });\n    }, scrollIntoView);\n    alloy.add(toolbar.wrapper);\n    alloy.add(socket);\n    alloy.add(dropup.component);\n    var setToolbarGroups = function setToolbarGroups(rawGroups) {\n      var groups = toolbar.createGroups(rawGroups);\n      toolbar.setGroups(groups);\n    };\n    var setContextToolbar = function setContextToolbar(rawGroups) {\n      var groups = toolbar.createGroups(rawGroups);\n      toolbar.setContextToolbar(groups);\n    };\n    var focusToolbar = function focusToolbar() {\n      toolbar.focus();\n    };\n    var restoreToolbar = function restoreToolbar() {\n      toolbar.restoreToolbar();\n    };\n    var init = function init(spec) {\n      webapp.set(produce(spec));\n    };\n    var exit = function exit() {\n      webapp.run(function (w) {\n        Replacing.remove(socket, switchToEdit);\n        w.exit();\n      });\n    };\n    var updateMode$1 = function updateMode$1(readOnly) {\n      updateMode(socket, switchToEdit, readOnly, alloy.root);\n    };\n    return {\n      system: alloy,\n      element: alloy.element,\n      init: init,\n      exit: exit,\n      setToolbarGroups: setToolbarGroups,\n      setContextToolbar: setContextToolbar,\n      focusToolbar: focusToolbar,\n      restoreToolbar: restoreToolbar,\n      updateMode: updateMode$1,\n      socket: socket,\n      dropup: dropup\n    };\n  }\n  var global$1 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n  var derive = function derive(editor) {\n    var base = Optional.from(getSkinUrl(editor)).getOrThunk(function () {\n      return global$1.baseURL + '/skins/ui/oxide';\n    });\n    return {\n      content: base + '/content.mobile.min.css',\n      ui: base + '/skin.mobile.min.css'\n    };\n  };\n  var fireChange = function fireChange(realm, command, state) {\n    realm.system.broadcastOn([formatChanged], {\n      command: command,\n      state: state\n    });\n  };\n  var init = function init(realm, editor) {\n    var allFormats = keys(editor.formatter.get());\n    each$1(allFormats, function (command) {\n      editor.formatter.formatChanged(command, function (state) {\n        fireChange(realm, command, state);\n      });\n    });\n    each$1(['ul', 'ol'], function (command) {\n      editor.selection.selectorChanged(command, function (state, _data) {\n        fireChange(realm, command, state);\n      });\n    });\n  };\n  var fireSkinLoaded = function fireSkinLoaded(editor) {\n    return function () {\n      var done = function done() {\n        editor._skinLoaded = true;\n        editor.fire('SkinLoaded');\n      };\n      if (editor.initialized) {\n        done();\n      } else {\n        editor.on('init', done);\n      }\n    };\n  };\n  var READING = 'toReading';\n  var EDITING = 'toEditing';\n  var renderMobileTheme = function renderMobileTheme(editor) {\n    var renderUI = function renderUI() {\n      var targetNode = editor.getElement();\n      var cssUrls = derive(editor);\n      if (isSkinDisabled(editor) === false) {\n        var styleSheetLoader_1 = global$5.DOM.styleSheetLoader;\n        editor.contentCSS.push(cssUrls.content);\n        styleSheetLoader_1.load(cssUrls.ui, fireSkinLoaded(editor));\n        editor.on('remove', function () {\n          return styleSheetLoader_1.unload(cssUrls.ui);\n        });\n      } else {\n        fireSkinLoaded(editor)();\n      }\n      var doScrollIntoView = function doScrollIntoView() {\n        editor.fire('ScrollIntoView');\n      };\n      var realm = detect$1().os.isAndroid() ? AndroidRealm(doScrollIntoView) : IosRealm(doScrollIntoView);\n      var original = SugarElement.fromDom(targetNode);\n      attachSystemAfter(original, realm.system);\n      var findFocusIn = function findFocusIn(elem) {\n        return search(elem).bind(function (focused) {\n          return realm.system.getByDom(focused).toOptional();\n        });\n      };\n      var outerWindow = targetNode.ownerDocument.defaultView;\n      var orientation = onChange(outerWindow, {\n        onChange: function onChange() {\n          var alloy = realm.system;\n          alloy.broadcastOn([orientationChanged], {\n            width: getActualWidth(outerWindow)\n          });\n        },\n        onReady: noop\n      });\n      var _setReadOnly = function setReadOnly(dynamicGroup, readOnlyGroups, mainGroups, ro) {\n        if (ro === false) {\n          editor.selection.collapse();\n        }\n        var toolbars = configureToolbar(dynamicGroup, readOnlyGroups, mainGroups);\n        realm.setToolbarGroups(ro === true ? toolbars.readOnly : toolbars.main);\n        editor.setMode(ro === true ? 'readonly' : 'design');\n        editor.fire(ro === true ? READING : EDITING);\n        realm.updateMode(ro);\n      };\n      var configureToolbar = function configureToolbar(dynamicGroup, readOnlyGroups, mainGroups) {\n        var dynamic = dynamicGroup.get();\n        var toolbars = {\n          readOnly: dynamic.backToMask.concat(readOnlyGroups.get()),\n          main: dynamic.backToMask.concat(mainGroups.get())\n        };\n        return toolbars;\n      };\n      var bindHandler = function bindHandler(label, handler) {\n        editor.on(label, handler);\n        return {\n          unbind: function unbind() {\n            editor.off(label);\n          }\n        };\n      };\n      editor.on('init', function () {\n        realm.init({\n          editor: {\n            getFrame: function getFrame() {\n              return SugarElement.fromDom(editor.contentAreaContainer.querySelector('iframe'));\n            },\n            onDomChanged: function onDomChanged() {\n              return {\n                unbind: noop\n              };\n            },\n            onToReading: function onToReading(handler) {\n              return bindHandler(READING, handler);\n            },\n            onToEditing: function onToEditing(handler) {\n              return bindHandler(EDITING, handler);\n            },\n            onScrollToCursor: function onScrollToCursor(handler) {\n              editor.on('ScrollIntoView', function (tinyEvent) {\n                handler(tinyEvent);\n              });\n              var unbind = function unbind() {\n                editor.off('ScrollIntoView');\n                orientation.destroy();\n              };\n              return {\n                unbind: unbind\n              };\n            },\n            onTouchToolstrip: function onTouchToolstrip() {\n              hideDropup();\n            },\n            onTouchContent: function onTouchContent() {\n              var toolbar = SugarElement.fromDom(editor.editorContainer.querySelector('.' + resolve('toolbar')));\n              findFocusIn(toolbar).each(emitExecute);\n              realm.restoreToolbar();\n              hideDropup();\n            },\n            onTapContent: function onTapContent(evt) {\n              var target = evt.target;\n              if (name$1(target) === 'img') {\n                editor.selection.select(target.dom);\n                evt.kill();\n              } else if (name$1(target) === 'a') {\n                var component = realm.system.getByDom(SugarElement.fromDom(editor.editorContainer));\n                component.each(function (container) {\n                  if (Swapping.isAlpha(container)) {\n                    openLink(target.dom);\n                  }\n                });\n              }\n            }\n          },\n          container: SugarElement.fromDom(editor.editorContainer),\n          socket: SugarElement.fromDom(editor.contentAreaContainer),\n          toolstrip: SugarElement.fromDom(editor.editorContainer.querySelector('.' + resolve('toolstrip'))),\n          toolbar: SugarElement.fromDom(editor.editorContainer.querySelector('.' + resolve('toolbar'))),\n          dropup: realm.dropup,\n          alloy: realm.system,\n          translate: noop,\n          setReadOnly: function setReadOnly(ro) {\n            _setReadOnly(dynamicGroup, readOnlyGroups, mainGroups, ro);\n          },\n          readOnlyOnInit: function readOnlyOnInit() {\n            return _readOnlyOnInit();\n          }\n        });\n        var hideDropup = function hideDropup() {\n          realm.dropup.disappear(function () {\n            realm.system.broadcastOn([dropupDismissed], {});\n          });\n        };\n        var backToMaskGroup = {\n          label: 'The first group',\n          scrollable: false,\n          items: [forToolbar('back', function () {\n            editor.selection.collapse();\n            realm.exit();\n          }, {}, editor)]\n        };\n        var backToReadOnlyGroup = {\n          label: 'Back to read only',\n          scrollable: false,\n          items: [forToolbar('readonly-back', function () {\n            _setReadOnly(dynamicGroup, readOnlyGroups, mainGroups, true);\n          }, {}, editor)]\n        };\n        var readOnlyGroup = {\n          label: 'The read only mode group',\n          scrollable: true,\n          items: []\n        };\n        var features = setup$3(realm, editor);\n        var items = detect(editor, features);\n        var actionGroup = {\n          label: 'the action group',\n          scrollable: true,\n          items: items\n        };\n        var extraGroup = {\n          label: 'The extra group',\n          scrollable: false,\n          items: []\n        };\n        var mainGroups = Cell([actionGroup, extraGroup]);\n        var readOnlyGroups = Cell([readOnlyGroup, extraGroup]);\n        var dynamicGroup = Cell({\n          backToMask: [backToMaskGroup],\n          backToReadOnly: [backToReadOnlyGroup]\n        });\n        init(realm, editor);\n      });\n      editor.on('remove', function () {\n        realm.exit();\n      });\n      editor.on('detach', function () {\n        detachSystem(realm.system);\n        realm.system.destroy();\n      });\n      return {\n        iframeContainer: realm.socket.element.dom,\n        editorContainer: realm.element.dom\n      };\n    };\n    return {\n      getNotificationManagerImpl: function getNotificationManagerImpl() {\n        return {\n          open: constant$1({\n            progressBar: {\n              value: noop\n            },\n            close: noop,\n            text: noop,\n            getEl: constant$1(null),\n            moveTo: noop,\n            moveRel: noop,\n            settings: {}\n          }),\n          close: noop,\n          reposition: noop,\n          getArgs: constant$1({})\n        };\n      },\n      renderUI: renderUI\n    };\n  };\n  function Theme() {\n    global$4.add('mobile', renderMobileTheme);\n  }\n  Theme();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/themes/mobile/theme.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/themes/mobile/theme.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;