/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/advlist/index.js":
/*!*******************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/advlist/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"advlist\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/advlist')\n//   ES2015:\n//     import 'tinymce/plugins/advlist'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/advlist/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2Fkdmxpc3QvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLG1CQUFPLENBQUMsNkZBQWEsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvY29yZS9wbHVnaW5zL2N1c3RvbS90aW55bWNlL3BsdWdpbnMvYWR2bGlzdC9pbmRleC5qcz80OThmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEV4cG9ydHMgdGhlIFwiYWR2bGlzdFwiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy9hZHZsaXN0JylcclxuLy8gICBFUzIwMTU6XHJcbi8vICAgICBpbXBvcnQgJ3RpbnltY2UvcGx1Z2lucy9hZHZsaXN0J1xyXG5yZXF1aXJlKCcuL3BsdWdpbi5qcycpOyJdLCJuYW1lcyI6WyJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/advlist/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/advlist/plugin.js":
/*!********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/advlist/plugin.js ***!
  \********************************************************************************/
/***/ (() => {

eval("/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.7 (2022-12-06)\r\n */\n(function () {\n  'use strict';\n\n  var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n  var applyListFormat = function applyListFormat(editor, listName, styleValue) {\n    var cmd = listName === 'UL' ? 'InsertUnorderedList' : 'InsertOrderedList';\n    editor.execCommand(cmd, false, styleValue === false ? null : {\n      'list-style-type': styleValue\n    });\n  };\n  var register$1 = function register$1(editor) {\n    editor.addCommand('ApplyUnorderedListStyle', function (ui, value) {\n      applyListFormat(editor, 'UL', value['list-style-type']);\n    });\n    editor.addCommand('ApplyOrderedListStyle', function (ui, value) {\n      applyListFormat(editor, 'OL', value['list-style-type']);\n    });\n  };\n  var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n  var getNumberStyles = function getNumberStyles(editor) {\n    var styles = editor.getParam('advlist_number_styles', 'default,lower-alpha,lower-greek,lower-roman,upper-alpha,upper-roman');\n    return styles ? styles.split(/[ ,]/) : [];\n  };\n  var getBulletStyles = function getBulletStyles(editor) {\n    var styles = editor.getParam('advlist_bullet_styles', 'default,circle,square');\n    return styles ? styles.split(/[ ,]/) : [];\n  };\n  var noop = function noop() {};\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n  var identity = function identity(x) {\n    return x;\n  };\n  var never = constant(false);\n  var always = constant(true);\n  var none = function none() {\n    return NONE;\n  };\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n  var some = function some(a) {\n    var constant_a = constant(a);\n    var self = function self() {\n      return me;\n    };\n    var bind = function bind(f) {\n      return f(a);\n    };\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var isChildOfBody = function isChildOfBody(editor, elm) {\n    return editor.$.contains(editor.getBody(), elm);\n  };\n  var isTableCellNode = function isTableCellNode(node) {\n    return node && /^(TH|TD)$/.test(node.nodeName);\n  };\n  var isListNode = function isListNode(editor) {\n    return function (node) {\n      return node && /^(OL|UL|DL)$/.test(node.nodeName) && isChildOfBody(editor, node);\n    };\n  };\n  var getSelectedStyleType = function getSelectedStyleType(editor) {\n    var listElm = editor.dom.getParent(editor.selection.getNode(), 'ol,ul');\n    var style = editor.dom.getStyle(listElm, 'listStyleType');\n    return Optional.from(style);\n  };\n  var findIndex = function findIndex(list, predicate) {\n    for (var index = 0; index < list.length; index++) {\n      var element = list[index];\n      if (predicate(element)) {\n        return index;\n      }\n    }\n    return -1;\n  };\n  var styleValueToText = function styleValueToText(styleValue) {\n    return styleValue.replace(/\\-/g, ' ').replace(/\\b\\w/g, function (chr) {\n      return chr.toUpperCase();\n    });\n  };\n  var isWithinList = function isWithinList(editor, e, nodeName) {\n    var tableCellIndex = findIndex(e.parents, isTableCellNode);\n    var parents = tableCellIndex !== -1 ? e.parents.slice(0, tableCellIndex) : e.parents;\n    var lists = global.grep(parents, isListNode(editor));\n    return lists.length > 0 && lists[0].nodeName === nodeName;\n  };\n  var makeSetupHandler = function makeSetupHandler(editor, nodeName) {\n    return function (api) {\n      var nodeChangeHandler = function nodeChangeHandler(e) {\n        api.setActive(isWithinList(editor, e, nodeName));\n      };\n      editor.on('NodeChange', nodeChangeHandler);\n      return function () {\n        return editor.off('NodeChange', nodeChangeHandler);\n      };\n    };\n  };\n  var addSplitButton = function addSplitButton(editor, id, tooltip, cmd, nodeName, styles) {\n    editor.ui.registry.addSplitButton(id, {\n      tooltip: tooltip,\n      icon: nodeName === 'OL' ? 'ordered-list' : 'unordered-list',\n      presets: 'listpreview',\n      columns: 3,\n      fetch: function fetch(callback) {\n        var items = global.map(styles, function (styleValue) {\n          var iconStyle = nodeName === 'OL' ? 'num' : 'bull';\n          var iconName = styleValue === 'disc' || styleValue === 'decimal' ? 'default' : styleValue;\n          var itemValue = styleValue === 'default' ? '' : styleValue;\n          var displayText = styleValueToText(styleValue);\n          return {\n            type: 'choiceitem',\n            value: itemValue,\n            icon: 'list-' + iconStyle + '-' + iconName,\n            text: displayText\n          };\n        });\n        callback(items);\n      },\n      onAction: function onAction() {\n        return editor.execCommand(cmd);\n      },\n      onItemAction: function onItemAction(_splitButtonApi, value) {\n        applyListFormat(editor, nodeName, value);\n      },\n      select: function select(value) {\n        var listStyleType = getSelectedStyleType(editor);\n        return listStyleType.map(function (listStyle) {\n          return value === listStyle;\n        }).getOr(false);\n      },\n      onSetup: makeSetupHandler(editor, nodeName)\n    });\n  };\n  var addButton = function addButton(editor, id, tooltip, cmd, nodeName, _styles) {\n    editor.ui.registry.addToggleButton(id, {\n      active: false,\n      tooltip: tooltip,\n      icon: nodeName === 'OL' ? 'ordered-list' : 'unordered-list',\n      onSetup: makeSetupHandler(editor, nodeName),\n      onAction: function onAction() {\n        return editor.execCommand(cmd);\n      }\n    });\n  };\n  var addControl = function addControl(editor, id, tooltip, cmd, nodeName, styles) {\n    if (styles.length > 1) {\n      addSplitButton(editor, id, tooltip, cmd, nodeName, styles);\n    } else {\n      addButton(editor, id, tooltip, cmd, nodeName);\n    }\n  };\n  var register = function register(editor) {\n    addControl(editor, 'numlist', 'Numbered list', 'InsertOrderedList', 'OL', getNumberStyles(editor));\n    addControl(editor, 'bullist', 'Bullet list', 'InsertUnorderedList', 'UL', getBulletStyles(editor));\n  };\n  function Plugin() {\n    global$1.add('advlist', function (editor) {\n      if (editor.hasPlugin('lists')) {\n        register(editor);\n        register$1(editor);\n      } else {\n        console.error('Please use the Lists plugin together with the Advanced List plugin.');\n      }\n    });\n  }\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/advlist/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/advlist/index.js");
/******/ 	
/******/ })()
;