/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/textpattern/plugin.min.js":
/*!****************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/textpattern/plugin.min.js ***!
  \****************************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.7 (2022-12-06)\r\n */\n!function () {\n  \"use strict\";\n\n  var t = tinymce.util.Tools.resolve(\"tinymce.PluginManager\"),\n    _u = function u() {\n      return (_u = Object.assign || function (t) {\n        for (var n, r = 1, e = arguments.length; r < e; r++) for (var o in n = arguments[r]) Object.prototype.hasOwnProperty.call(n, o) && (t[o] = n[o]);\n        return t;\n      }).apply(this, arguments);\n    };\n  function a(t, n, r) {\n    if (r || 2 === arguments.length) for (var e, o = 0, a = n.length; o < a; o++) !e && o in n || ((e = e || Array.prototype.slice.call(n, 0, o))[o] = n[o]);\n    return t.concat(e || Array.prototype.slice.call(n));\n  }\n  function n(e) {\n    return function (t) {\n      return r = _typeof(n = t), (null === n ? \"null\" : \"object\" == r && (Array.prototype.isPrototypeOf(n) || n.constructor && \"Array\" === n.constructor.name) ? \"array\" : \"object\" == r && (String.prototype.isPrototypeOf(n) || n.constructor && \"String\" === n.constructor.name) ? \"string\" : r) === e;\n      var n, r;\n    };\n  }\n  function e() {}\n  function i(t) {\n    return function () {\n      return t;\n    };\n  }\n  function o(t) {\n    return t;\n  }\n  function r() {\n    return m;\n  }\n  var f = n(\"string\"),\n    c = n(\"object\"),\n    s = n(\"array\"),\n    l = i(!1),\n    d = i(!0),\n    m = {\n      fold: function fold(t, n) {\n        return t();\n      },\n      isSome: l,\n      isNone: d,\n      getOr: o,\n      getOrThunk: g,\n      getOrDie: function getOrDie(t) {\n        throw new Error(t || \"error: getOrDie called on none.\");\n      },\n      getOrNull: i(null),\n      getOrUndefined: i(void 0),\n      or: o,\n      orThunk: g,\n      map: r,\n      each: e,\n      bind: r,\n      exists: l,\n      forall: d,\n      filter: function filter() {\n        return m;\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: i(\"none()\")\n    };\n  function g(t) {\n    return t();\n  }\n  function p(t, n) {\n    return -1 < E.call(t, n);\n  }\n  function h(t, n) {\n    for (var r = t.length, e = new Array(r), o = 0; o < r; o++) {\n      var a = t[o];\n      e[o] = n(a, o);\n    }\n    return e;\n  }\n  function v(t, n) {\n    for (var r = 0, e = t.length; r < e; r++) n(t[r], r);\n  }\n  function y(t, n) {\n    for (var r = [], e = 0, o = t.length; e < o; e++) {\n      var a = t[e];\n      n(a, e) && r.push(a);\n    }\n    return r;\n  }\n  function b(t, e, o) {\n    return function (t) {\n      for (var n, r = t.length - 1; 0 <= r; r--) n = t[r], o = e(o, n, r);\n    }(t), o;\n  }\n  function k(t, n) {\n    for (var r = 0, e = t.length; r < e; ++r) if (!0 !== n(t[r], r)) return;\n    return 1;\n  }\n  var O = function O(r) {\n      function t() {\n        return o;\n      }\n      function n(t) {\n        return t(r);\n      }\n      var e = i(r),\n        o = {\n          fold: function fold(t, n) {\n            return n(r);\n          },\n          isSome: d,\n          isNone: l,\n          getOr: e,\n          getOrThunk: e,\n          getOrDie: e,\n          getOrNull: e,\n          getOrUndefined: e,\n          or: t,\n          orThunk: t,\n          map: function map(t) {\n            return O(t(r));\n          },\n          each: function each(t) {\n            t(r);\n          },\n          bind: n,\n          exists: n,\n          forall: n,\n          filter: function filter(t) {\n            return t(r) ? o : m;\n          },\n          toArray: function toArray() {\n            return [r];\n          },\n          toString: function toString() {\n            return \"some(\" + r + \")\";\n          }\n        };\n      return o;\n    },\n    w = {\n      some: O,\n      none: r,\n      from: function from(t) {\n        return null == t ? m : O(t);\n      }\n    },\n    C = Array.prototype.slice,\n    E = Array.prototype.indexOf,\n    x = Object.keys,\n    R = Object.hasOwnProperty;\n  function T(t) {\n    var n = [],\n      r = [];\n    return v(t, function (t) {\n      t.fold(function (t) {\n        n.push(t);\n      }, function (t) {\n        r.push(t);\n      });\n    }), {\n      errors: n,\n      values: r\n    };\n  }\n  function P(t) {\n    return \"inline-command\" === t.type || \"inline-format\" === t.type;\n  }\n  function N(t) {\n    return \"block-command\" === t.type || \"block-format\" === t.type;\n  }\n  function S(o) {\n    function a(t) {\n      return ut.error({\n        message: t,\n        pattern: o\n      });\n    }\n    function t(t, n, r) {\n      if (void 0 === o.format) return void 0 !== o.cmd ? f(o.cmd) ? ut.value(r(o.cmd, o.value)) : a(t + \" pattern has non-string `cmd` parameter\") : a(t + \" pattern is missing both `format` and `cmd` parameters\");\n      var e = void 0;\n      if (s(o.format)) {\n        if (!k(o.format, f)) return a(t + \" pattern has non-string items in the `format` array\");\n        e = o.format;\n      } else {\n        if (!f(o.format)) return a(t + \" pattern has non-string `format` parameter\");\n        e = [o.format];\n      }\n      return ut.value(n(e));\n    }\n    if (!c(o)) return a(\"Raw pattern is not an object\");\n    if (!f(o.start)) return a(\"Raw pattern is missing `start` parameter\");\n    if (void 0 === o.end) return void 0 !== o.replacement ? f(o.replacement) ? 0 === o.start.length ? a(\"Replacement pattern has empty `start` parameter\") : ut.value({\n      type: \"inline-command\",\n      start: \"\",\n      end: o.start,\n      cmd: \"mceInsertContent\",\n      value: o.replacement\n    }) : a(\"Replacement pattern has non-string `replacement` parameter\") : 0 === o.start.length ? a(\"Block pattern has empty `start` parameter\") : t(\"Block\", function (t) {\n      return {\n        type: \"block-format\",\n        start: o.start,\n        format: t[0]\n      };\n    }, function (t, n) {\n      return {\n        type: \"block-command\",\n        start: o.start,\n        cmd: t,\n        value: n\n      };\n    });\n    if (!f(o.end)) return a(\"Inline pattern has non-string `end` parameter\");\n    if (0 === o.start.length && 0 === o.end.length) return a(\"Inline pattern has empty `start` and `end` parameters\");\n    var r = o.start,\n      e = o.end;\n    return 0 === e.length && (e = r, r = \"\"), t(\"Inline\", function (t) {\n      return {\n        type: \"inline-format\",\n        start: r,\n        end: e,\n        format: t\n      };\n    }, function (t, n) {\n      return {\n        type: \"inline-command\",\n        start: r,\n        end: e,\n        cmd: t,\n        value: n\n      };\n    });\n  }\n  function M(t) {\n    return \"block-command\" === t.type ? {\n      start: t.start,\n      cmd: t.cmd,\n      value: t.value\n    } : \"block-format\" === t.type ? {\n      start: t.start,\n      format: t.format\n    } : \"inline-command\" === t.type ? \"mceInsertContent\" === t.cmd && \"\" === t.start ? {\n      start: t.end,\n      replacement: t.value\n    } : {\n      start: t.start,\n      end: t.end,\n      cmd: t.cmd,\n      value: t.value\n    } : \"inline-format\" === t.type ? {\n      start: t.start,\n      end: t.end,\n      format: 1 === t.format.length ? t.format[0] : t.format\n    } : void 0;\n  }\n  function A(t) {\n    return {\n      inlinePatterns: y(t, P),\n      blockPatterns: (n = y(t, N), r = function r(t, n) {\n        return t.start.length === n.start.length ? 0 : t.start.length > n.start.length ? -1 : 1;\n      }, (e = C.call(n, 0)).sort(r), e)\n    };\n    var n, r, e;\n  }\n  function B() {\n    for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];\n    var r = ft.console;\n    r && (r.error || r.log).apply(r, t);\n  }\n  function D(t) {\n    var n = t.getParam(\"forced_root_block\", \"p\");\n    return !1 === n ? \"\" : !0 === n ? \"p\" : n;\n  }\n  function I(t, n) {\n    return {\n      container: t,\n      offset: n\n    };\n  }\n  function j(t) {\n    return t.nodeType === Node.TEXT_NODE;\n  }\n  function _(t, n, r, e) {\n    void 0 === e && (e = !0);\n    var o = n.startContainer.parentNode,\n      a = n.endContainer.parentNode;\n    n.deleteContents(), e && !r(n.startContainer) && (j(n.startContainer) && 0 === n.startContainer.data.length && t.remove(n.startContainer), j(n.endContainer) && 0 === n.endContainer.data.length && t.remove(n.endContainer), pt(t, o, r), o !== a && pt(t, a, r));\n  }\n  function U(t, n) {\n    var r,\n      e = n.get(t);\n    return s(e) && (0 < (r = e).length ? w.some(r[0]) : w.none()).exists(function (t) {\n      return R.call(t, \"block\");\n    });\n  }\n  function L(t) {\n    return 0 === t.start.length;\n  }\n  function V(t, n) {\n    var r = w.from(t.dom.getParent(n.startContainer, t.dom.isBlock));\n    return \"\" === D(t) ? r.orThunk(function () {\n      return w.some(t.getBody());\n    }) : r;\n  }\n  function W(n) {\n    return function (t) {\n      return n === t ? -1 : 0;\n    };\n  }\n  function q(t, n, r) {\n    if (j(t) && 0 <= n) return w.some(I(t, n));\n    var e = gt(ht);\n    return w.from(e.backwards(t, n, W(t), r)).map(function (t) {\n      return I(t.container, t.container.data.length);\n    });\n  }\n  function F(t, n, r) {\n    if (j(n) && (r < 0 || r > n.data.length)) return [];\n    for (var e = [r], o = n; o !== t && o.parentNode;) {\n      for (var a = o.parentNode, i = 0; i < a.childNodes.length; i++) if (a.childNodes[i] === o) {\n        e.push(i);\n        break;\n      }\n      o = a;\n    }\n    return o === t ? e.reverse() : [];\n  }\n  function G(t, n, r, e, o) {\n    return {\n      start: F(t, n, r),\n      end: F(t, e, o)\n    };\n  }\n  function H(t, n) {\n    var r = n.slice(),\n      e = r.pop(),\n      o = r,\n      a = function a(t, n) {\n        return t.bind(function (t) {\n          return w.from(t.childNodes[n]);\n        });\n      },\n      i = w.some(t);\n    return v(o, function (t, n) {\n      i = a(i, t);\n    }), i.bind(function (t) {\n      return j(t) && (e < 0 || e > t.data.length) ? w.none() : w.some({\n        node: t,\n        offset: e\n      });\n    });\n  }\n  function J(n, r) {\n    return H(n, r.start).bind(function (t) {\n      var o = t.node,\n        a = t.offset;\n      return H(n, r.end).map(function (t) {\n        var n = t.node,\n          r = t.offset,\n          e = document.createRange();\n        return e.setStart(o, a), e.setEnd(n, r), e;\n      });\n    });\n  }\n  function K(e, o, n) {\n    !function (t, n) {\n      if (j(t) && t.length <= 0) return w.some(I(t, 0));\n      var r = gt(ht);\n      return w.from(r.forwards(t, 0, W(t), n)).map(function (t) {\n        return I(t.container, 0);\n      });\n    }(o, o).each(function (t) {\n      var r = t.container;\n      yt(r, n.start.length, o).each(function (t) {\n        var n = e.createRng();\n        n.setStart(r, 0), n.setEnd(t.container, t.offset), _(e, n, function (t) {\n          return t === o;\n        });\n      });\n    });\n  }\n  function X(e, a) {\n    var i = e.dom,\n      t = e.selection.getRng();\n    return V(e, t).filter(function (t) {\n      var n = D(e),\n        r = \"\" === n && i.is(t, \"body\") || i.is(t, n);\n      return null !== t && r;\n    }).bind(function (n) {\n      var r,\n        e = n.textContent,\n        t = a,\n        o = (r = e).replace(\"\\xa0\", \" \");\n      return function (t, n, r) {\n        for (var e = 0, o = t.length; e < o; e++) {\n          var a = t[e];\n          if (n(a, e)) return w.some(a);\n          if (r(a, e)) break;\n        }\n        return w.none();\n      }(t, function (t) {\n        return 0 === r.indexOf(t.start) || 0 === o.indexOf(t.start);\n      }, l).map(function (t) {\n        return dt.trim(e).length === t.start.length ? [] : [{\n          pattern: t,\n          range: G(i.getRoot(), n, 0, n, 0)\n        }];\n      });\n    }).getOr([]);\n  }\n  function z(t, n) {\n    return t.create(\"span\", {\n      \"data-mce-type\": \"bookmark\",\n      id: n\n    });\n  }\n  function Q(t, n) {\n    var r = t.createRng();\n    return r.setStartAfter(n.start), r.setEndBefore(n.end), r;\n  }\n  function Y(t, n, r) {\n    var e = J(t.getRoot(), r).getOrDie(\"Unable to resolve path range\"),\n      o = e.startContainer,\n      a = e.endContainer,\n      i = 0 === e.endOffset ? a : a.splitText(e.endOffset),\n      u = 0 === e.startOffset ? o : o.splitText(e.startOffset);\n    return {\n      prefix: n,\n      end: i.parentNode.insertBefore(z(t, n + \"-end\"), i),\n      start: u.parentNode.insertBefore(z(t, n + \"-start\"), u)\n    };\n  }\n  function Z(t, n, r) {\n    pt(t, t.get(n.prefix + \"-end\"), r), pt(t, t.get(n.prefix + \"-start\"), r);\n  }\n  function $(n, t, r) {\n    n.selection.setRng(r), \"inline-format\" === t.type ? v(t.format, function (t) {\n      n.formatter.apply(t);\n    }) : n.execCommand(t.cmd, !1, t.value);\n  }\n  function tt(r, e, o) {\n    var a = r.selection.getRng();\n    return !1 === a.collapsed ? [] : V(r, a).bind(function (t) {\n      var n = a.startOffset - (o ? 1 : 0);\n      return Ot(r, e, a.startContainer, n, t);\n    }).fold(function () {\n      return [];\n    }, function (t) {\n      return t.matches;\n    });\n  }\n  function nt(p, t) {\n    var h, n, o, r, e, a, i;\n    0 !== t.length && (h = p.dom, n = p.selection.getBookmark(), o = h, r = t, e = new Date().getTime(), a = \"mce_textpattern_\" + Math.floor(1e9 * Math.random()) + ++bt + String(e), i = b(r, function (t, n) {\n      var r = Y(o, a + \"_end\" + t.length, n.endRng);\n      return t.concat([_u(_u({}, n), {\n        endMarker: r\n      })]);\n    }, []), v(b(i, function (t, n) {\n      var r = i.length - t.length - 1,\n        e = L(n.pattern) ? n.endMarker : Y(o, a + \"_start\" + r, n.startRng);\n      return t.concat([_u(_u({}, n), {\n        startMarker: e\n      })]);\n    }, []), function (t) {\n      function n(t) {\n        return t === g;\n      }\n      var r,\n        e,\n        o,\n        a,\n        i,\n        u,\n        f,\n        c,\n        s,\n        l,\n        d,\n        m,\n        g = h.getParent(t.startMarker.start, h.isBlock);\n      L(t.pattern) ? (e = t.pattern, o = t.endMarker, a = n, i = Q((r = p).dom, o), _(r.dom, i, a), $(r, e, i)) : (u = p, f = t.pattern, c = t.startMarker, s = t.endMarker, l = n, d = u.dom, m = Q(d, s), _(d, Q(d, c), l), _(d, m, l), $(u, f, Q(d, {\n        prefix: c.prefix,\n        start: c.end,\n        end: s.start\n      }))), Z(h, t.endMarker, n), Z(h, t.startMarker, n);\n    }), p.selection.moveToBookmark(n));\n  }\n  function rt(t, n) {\n    var r = tt(t, n.inlinePatterns, !0);\n    0 < r.length && t.undoManager.transact(function () {\n      nt(t, r);\n    });\n  }\n  function et(t, n, r) {\n    for (var e = 0; e < t.length; e++) if (r(t[e], n)) return 1;\n  }\n  function ot(n, r) {\n    var e = [\",\", \".\", \";\", \":\", \"!\", \"?\"],\n      o = [32];\n    n.on(\"keydown\", function (t) {\n      13 !== t.keyCode || lt.modifierPressed(t) || !function (o, t) {\n        if (o.selection.isCollapsed()) {\n          var a = tt(o, t.inlinePatterns, !1),\n            u = X(o, t.blockPatterns);\n          return (0 < u.length || 0 < a.length) && (o.undoManager.add(), o.undoManager.extra(function () {\n            o.execCommand(\"mceInsertNewLine\");\n          }, function () {\n            var i, t, n;\n            o.insertContent(\"\\uFEFF\"), nt(o, a), i = o, 0 !== (t = u).length && (n = i.selection.getBookmark(), v(t, function (t) {\n              return e = (n = i).dom, o = (r = t).pattern, a = J(e.getRoot(), r.range).getOrDie(\"Unable to resolve path range\"), V(n, a).each(function (t) {\n                \"block-format\" === o.type ? U(o.format, n.formatter) && n.undoManager.transact(function () {\n                  K(n.dom, t, o), n.formatter.apply(o.format);\n                }) : \"block-command\" === o.type && n.undoManager.transact(function () {\n                  K(n.dom, t, o), n.execCommand(o.cmd, !1, o.value);\n                });\n              }), 1;\n              var n, r, e, o, a;\n            }), i.selection.moveToBookmark(n));\n            var r = o.selection.getRng(),\n              e = q(r.startContainer, r.startOffset, o.dom.getRoot());\n            o.execCommand(\"mceInsertNewLine\"), e.each(function (t) {\n              var n = t.container;\n              \"\\uFEFF\" === n.data.charAt(t.offset - 1) && (n.deleteData(t.offset - 1, 1), pt(o.dom, n.parentNode, function (t) {\n                return t === o.dom.getRoot();\n              }));\n            });\n          }), 1);\n        }\n      }(n, r.get()) || t.preventDefault();\n    }, !0), n.on(\"keyup\", function (t) {\n      et(o, t, function (t, n) {\n        return t === n.keyCode && !1 === lt.modifierPressed(n);\n      }) && rt(n, r.get());\n    }), n.on(\"keypress\", function (t) {\n      et(e, t, function (t, n) {\n        return t.charCodeAt(0) === n.charCode;\n      }) && st.setEditorTimeout(n, function () {\n        rt(n, r.get());\n      });\n    });\n  }\n  !function (i) {\n    if (!s(i)) throw new Error(\"cases must be an array\");\n    if (0 === i.length) throw new Error(\"there must be at least one case\");\n    var u = [],\n      r = {};\n    v(i, function (t, e) {\n      var n = x(t);\n      if (1 !== n.length) throw new Error(\"one and only one name per case\");\n      var o = n[0],\n        a = t[o];\n      if (void 0 !== r[o]) throw new Error(\"duplicate key detected:\" + o);\n      if (\"cata\" === o) throw new Error(\"cannot have a case named cata (sorry)\");\n      if (!s(a)) throw new Error(\"case arguments must be an array\");\n      u.push(o), r[o] = function () {\n        for (var r = [], t = 0; t < arguments.length; t++) r[t] = arguments[t];\n        var n = r.length;\n        if (n !== a.length) throw new Error(\"Wrong number of arguments to case \" + o + \". Expected \" + a.length + \" (\" + a + \"), got \" + n);\n        return {\n          fold: function fold() {\n            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];\n            if (t.length !== i.length) throw new Error(\"Wrong number of arguments to fold. Expected \" + i.length + \", got \" + t.length);\n            return t[e].apply(null, r);\n          },\n          match: function match(t) {\n            var n = x(t);\n            if (u.length !== n.length) throw new Error(\"Wrong number of arguments to match. Expected: \" + u.join(\",\") + \"\\nActual: \" + n.join(\",\"));\n            if (!k(u, function (t) {\n              return p(n, t);\n            })) throw new Error(\"Not all branches were specified when using match. Specified: \" + n.join(\", \") + \"\\nRequired: \" + u.join(\", \"));\n            return t[o].apply(null, r);\n          },\n          log: function log(t) {\n            console.log(t, {\n              constructors: u,\n              constructor: o,\n              params: r\n            });\n          }\n        };\n      };\n    });\n  }([{\n    bothErrors: [\"error1\", \"error2\"]\n  }, {\n    firstError: [\"error1\", \"value2\"]\n  }, {\n    secondError: [\"value1\", \"error2\"]\n  }, {\n    bothValues: [\"value1\", \"value2\"]\n  }]);\n  var at = function at(r) {\n      return {\n        isValue: d,\n        isError: l,\n        getOr: i(r),\n        getOrThunk: i(r),\n        getOrDie: i(r),\n        or: function or(t) {\n          return at(r);\n        },\n        orThunk: function orThunk(t) {\n          return at(r);\n        },\n        fold: function fold(t, n) {\n          return n(r);\n        },\n        map: function map(t) {\n          return at(t(r));\n        },\n        mapError: function mapError(t) {\n          return at(r);\n        },\n        each: function each(t) {\n          t(r);\n        },\n        bind: function bind(t) {\n          return t(r);\n        },\n        exists: function exists(t) {\n          return t(r);\n        },\n        forall: function forall(t) {\n          return t(r);\n        },\n        toOptional: function toOptional() {\n          return w.some(r);\n        }\n      };\n    },\n    it = function it(r) {\n      return {\n        isValue: l,\n        isError: d,\n        getOr: o,\n        getOrThunk: function getOrThunk(t) {\n          return t();\n        },\n        getOrDie: function getOrDie() {\n          return t = String(r), function () {\n            throw new Error(t);\n          }();\n          var t;\n        },\n        or: o,\n        orThunk: function orThunk(t) {\n          return t();\n        },\n        fold: function fold(t, n) {\n          return t(r);\n        },\n        map: function map(t) {\n          return it(r);\n        },\n        mapError: function mapError(t) {\n          return it(t(r));\n        },\n        each: e,\n        bind: function bind(t) {\n          return it(r);\n        },\n        exists: l,\n        forall: d,\n        toOptional: w.none\n      };\n    },\n    ut = {\n      value: at,\n      error: it,\n      fromOption: function fromOption(t, n) {\n        return t.fold(function () {\n          return it(n);\n        }, at);\n      }\n    },\n    ft = \"undefined\" != typeof window ? window : Function(\"return this;\")(),\n    ct = [{\n      start: \"*\",\n      end: \"*\",\n      format: \"italic\"\n    }, {\n      start: \"**\",\n      end: \"**\",\n      format: \"bold\"\n    }, {\n      start: \"#\",\n      format: \"h1\"\n    }, {\n      start: \"##\",\n      format: \"h2\"\n    }, {\n      start: \"###\",\n      format: \"h3\"\n    }, {\n      start: \"####\",\n      format: \"h4\"\n    }, {\n      start: \"#####\",\n      format: \"h5\"\n    }, {\n      start: \"######\",\n      format: \"h6\"\n    }, {\n      start: \"1. \",\n      cmd: \"InsertOrderedList\"\n    }, {\n      start: \"* \",\n      cmd: \"InsertUnorderedList\"\n    }, {\n      start: \"- \",\n      cmd: \"InsertUnorderedList\"\n    }],\n    st = tinymce.util.Tools.resolve(\"tinymce.util.Delay\"),\n    lt = tinymce.util.Tools.resolve(\"tinymce.util.VK\"),\n    dt = tinymce.util.Tools.resolve(\"tinymce.util.Tools\"),\n    mt = tinymce.util.Tools.resolve(\"tinymce.dom.DOMUtils\"),\n    gt = tinymce.util.Tools.resolve(\"tinymce.dom.TextSeeker\"),\n    pt = function pt(t, n, r) {\n      var e;\n      n && t.isEmpty(n) && !r(n) && (e = n.parentNode, t.remove(n), pt(t, e, r));\n    },\n    ht = mt.DOM,\n    vt = function vt(t, r, e) {\n      if (!j(t)) return w.none();\n      var n = t.textContent;\n      if (0 <= r && r <= n.length) return w.some(I(t, r));\n      var o = gt(ht);\n      return w.from(o.backwards(t, r, W(t), e)).bind(function (t) {\n        var n = t.container.data;\n        return vt(t.container, r + n.length, e);\n      });\n    },\n    yt = function yt(t, n, r) {\n      if (!j(t)) return w.none();\n      var e = t.textContent;\n      if (n <= e.length) return w.some(I(t, n));\n      var o = gt(ht);\n      return w.from(o.forwards(t, n, W(t), r)).bind(function (t) {\n        return yt(t.container, n - e.length, r);\n      });\n    },\n    bt = 0,\n    kt = function kt(e, o, a, t) {\n      var i,\n        n,\n        r,\n        u,\n        f,\n        c,\n        s,\n        l = o.start;\n      return n = t.container, r = t.offset, i = l, u = function u(t, n) {\n        var r = t.data.substring(0, n),\n          e = r.lastIndexOf(i.charAt(i.length - 1)),\n          o = r.lastIndexOf(i);\n        return -1 !== o ? o + i.length : -1 !== e ? e + 1 : -1;\n      }, f = a, s = gt(e, (c = e, function (t) {\n        return c.isBlock(t) || p([\"BR\", \"IMG\", \"HR\", \"INPUT\"], t.nodeName) || \"false\" === c.getContentEditable(t);\n      })), w.from(s.backwards(n, r, u, f)).bind(function (r) {\n        if (r.offset >= l.length) {\n          var t = e.createRng();\n          return t.setStart(r.container, r.offset - l.length), t.setEnd(r.container, r.offset), w.some(t);\n        }\n        var n = r.offset - l.length;\n        return vt(r.container, n, a).map(function (t) {\n          var n = e.createRng();\n          return n.setStart(t.container, t.offset), n.setEnd(r.container, r.offset), n;\n        }).filter(function (t) {\n          return t.toString() === l;\n        }).orThunk(function () {\n          return kt(e, o, a, I(r.container, 0));\n        });\n      });\n    },\n    Ot = function Ot(l, d, m, g, p) {\n      var h = l.dom;\n      return q(m, g, h.getRoot()).bind(function (t) {\n        var n = h.createRng();\n        n.setStart(p, 0), n.setEnd(m, g);\n        for (var r, e = n.toString(), o = 0; o < d.length; o++) {\n          var a,\n            i,\n            u = d[o],\n            f = u.end;\n          i = r = void 0;\n          if (a = (r = e).length - f.length, \"\" === (i = f) || r.length >= i.length && r.substr(a, a + i.length) === i) {\n            var c = d.slice();\n            c.splice(o, 1);\n            var s = function (a, i, u) {\n              var f = a.dom,\n                c = f.getRoot(),\n                s = u.pattern,\n                l = u.position.container,\n                d = u.position.offset;\n              return vt(l, d - u.pattern.end.length, i).bind(function (t) {\n                var r = G(c, t.container, t.offset, l, d);\n                if (L(s)) return w.some({\n                  matches: [{\n                    pattern: s,\n                    startRng: r,\n                    endRng: r\n                  }],\n                  position: t\n                });\n                var n = Ot(a, u.remainingPatterns, t.container, t.offset, i),\n                  e = n.getOr({\n                    matches: [],\n                    position: t\n                  }),\n                  o = e.position;\n                return function (t, r, n, e, o, a) {\n                  if (void 0 === a && (a = !1), 0 !== r.start.length || a) return q(n, e, o).bind(function (n) {\n                    return kt(t, r, o, n).bind(function (t) {\n                      if (a) {\n                        if (t.endContainer === n.container && t.endOffset === n.offset) return w.none();\n                        if (0 === n.offset && t.endContainer.textContent.length === t.endOffset) return w.none();\n                      }\n                      return w.some(t);\n                    });\n                  });\n                  var i = t.createRng();\n                  return i.setStart(n, e), i.setEnd(n, e), w.some(i);\n                }(f, s, o.container, o.offset, i, n.isNone()).map(function (t) {\n                  var n = G(c, t.startContainer, t.startOffset, t.endContainer, t.endOffset);\n                  return {\n                    matches: e.matches.concat([{\n                      pattern: s,\n                      startRng: n,\n                      endRng: r\n                    }]),\n                    position: I(t.startContainer, t.startOffset)\n                  };\n                });\n              });\n            }(l, p, {\n              pattern: u,\n              remainingPatterns: c,\n              position: t\n            });\n            if (s.isSome()) return s;\n          }\n        }\n        return w.none();\n      });\n    };\n  t.add(\"textpattern\", function (r) {\n    var t,\n      n,\n      e,\n      o = (t = function () {\n        var t = r.getParam(\"textpattern_patterns\", ct, \"array\");\n        if (!s(t)) return B(\"The setting textpattern_patterns should be an array\"), {\n          inlinePatterns: [],\n          blockPatterns: []\n        };\n        var n = T(h(t, S));\n        return v(n.errors, function (t) {\n          return B(t.message, t.pattern), 0;\n        }), A(n.values);\n      }(), n = t, {\n        get: function get() {\n          return n;\n        },\n        set: function set(t) {\n          n = t;\n        }\n      });\n    return ot(r, o), e = o, {\n      setPatterns: function setPatterns(t) {\n        var n = T(h(t, S));\n        if (0 < n.errors.length) {\n          var r = n.errors[0];\n          throw new Error(r.message + \":\\n\" + JSON.stringify(r.pattern, null, 2));\n        }\n        e.set(A(n.values));\n      },\n      getPatterns: function getPatterns() {\n        return a(a([], h(e.get().inlinePatterns, M), !0), h(e.get().blockPatterns, M), !0);\n      }\n    };\n  });\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/textpattern/plugin.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/textpattern/plugin.min.js"]();
/******/ 	
/******/ })()
;