/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/fullscreen/index.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/fullscreen/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"fullscreen\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/fullscreen')\n//   ES2015:\n//     import 'tinymce/plugins/fullscreen'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/fullscreen/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2Z1bGxzY3JlZW4vaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLG1CQUFPLENBQUMsZ0dBQWEsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvY29yZS9wbHVnaW5zL2N1c3RvbS90aW55bWNlL3BsdWdpbnMvZnVsbHNjcmVlbi9pbmRleC5qcz84ZTA2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEV4cG9ydHMgdGhlIFwiZnVsbHNjcmVlblwiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy9mdWxsc2NyZWVuJylcclxuLy8gICBFUzIwMTU6XHJcbi8vICAgICBpbXBvcnQgJ3RpbnltY2UvcGx1Z2lucy9mdWxsc2NyZWVuJ1xyXG5yZXF1aXJlKCcuL3BsdWdpbi5qcycpOyJdLCJuYW1lcyI6WyJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/fullscreen/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/fullscreen/plugin.js":
/*!***********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/fullscreen/plugin.js ***!
  \***********************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.7 (2022-12-06)\r\n */\n(function () {\n  'use strict';\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n    var get = function get() {\n      return value;\n    };\n    var set = function set(v) {\n      value = v;\n    };\n    return {\n      get: get,\n      set: set\n    };\n  };\n  var global$3 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n  var get$5 = function get$5(fullscreenState) {\n    return {\n      isFullscreen: function isFullscreen() {\n        return fullscreenState.get() !== null;\n      }\n    };\n  };\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n  var isType$1 = function isType$1(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n  var isString = isType$1('string');\n  var isArray = isType$1('array');\n  var isBoolean = isSimpleType('boolean');\n  var isNullable = function isNullable(a) {\n    return a === null || a === undefined;\n  };\n  var isNonNullable = function isNonNullable(a) {\n    return !isNullable(a);\n  };\n  var isFunction = isSimpleType('function');\n  var isNumber = isSimpleType('number');\n  var noop = function noop() {};\n  var compose = function compose(fa, fb) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return fa(fb.apply(null, args));\n    };\n  };\n  var compose1 = function compose1(fbc, fab) {\n    return function (a) {\n      return fbc(fab(a));\n    };\n  };\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n  var identity = function identity(x) {\n    return x;\n  };\n  function curry(fn) {\n    var initialArgs = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      initialArgs[_i - 1] = arguments[_i];\n    }\n    return function () {\n      var restArgs = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        restArgs[_i] = arguments[_i];\n      }\n      var all = initialArgs.concat(restArgs);\n      return fn.apply(null, all);\n    };\n  }\n  var never = constant(false);\n  var always = constant(true);\n  var none = function none() {\n    return NONE;\n  };\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n  var some = function some(a) {\n    var constant_a = constant(a);\n    var self = function self() {\n      return me;\n    };\n    var bind = function bind(f) {\n      return f(a);\n    };\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n    };\n    return _assign.apply(this, arguments);\n  };\n  var singleton = function singleton(doRevoke) {\n    var subject = Cell(Optional.none());\n    var revoke = function revoke() {\n      return subject.get().each(doRevoke);\n    };\n    var clear = function clear() {\n      revoke();\n      subject.set(Optional.none());\n    };\n    var isSet = function isSet() {\n      return subject.get().isSome();\n    };\n    var get = function get() {\n      return subject.get();\n    };\n    var set = function set(s) {\n      revoke();\n      subject.set(Optional.some(s));\n    };\n    return {\n      clear: clear,\n      isSet: isSet,\n      get: get,\n      set: set\n    };\n  };\n  var unbindable = function unbindable() {\n    return singleton(function (s) {\n      return s.unbind();\n    });\n  };\n  var value = function value() {\n    var subject = singleton(noop);\n    var on = function on(f) {\n      return subject.get().each(f);\n    };\n    return _assign(_assign({}, subject), {\n      on: on\n    });\n  };\n  var nativePush = Array.prototype.push;\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n    return r;\n  };\n  var each$1 = function each$1(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n  var filter$1 = function filter$1(xs, pred) {\n    var r = [];\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      if (pred(x, i)) {\n        r.push(x);\n      }\n    }\n    return r;\n  };\n  var findUntil = function findUntil(xs, pred, until) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      if (pred(x, i)) {\n        return Optional.some(x);\n      } else if (until(x, i)) {\n        break;\n      }\n    }\n    return Optional.none();\n  };\n  var find$1 = function find$1(xs, pred) {\n    return findUntil(xs, pred, never);\n  };\n  var flatten = function flatten(xs) {\n    var r = [];\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      if (!isArray(xs[i])) {\n        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n      }\n      nativePush.apply(r, xs[i]);\n    }\n    return r;\n  };\n  var bind$3 = function bind$3(xs, f) {\n    return flatten(map(xs, f));\n  };\n  var get$4 = function get$4(xs, i) {\n    return i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();\n  };\n  var head = function head(xs) {\n    return get$4(xs, 0);\n  };\n  var findMap = function findMap(arr, f) {\n    for (var i = 0; i < arr.length; i++) {\n      var r = f(arr[i], i);\n      if (r.isSome()) {\n        return r;\n      }\n    }\n    return Optional.none();\n  };\n  var keys = Object.keys;\n  var each = function each(obj, f) {\n    var props = keys(obj);\n    for (var k = 0, len = props.length; k < len; k++) {\n      var i = props[k];\n      var x = obj[i];\n      f(x, i);\n    }\n  };\n  var contains = function contains(str, substr) {\n    return str.indexOf(substr) !== -1;\n  };\n  var isSupported$1 = function isSupported$1(dom) {\n    return dom.style !== undefined && isFunction(dom.style.getPropertyValue);\n  };\n  var fromHtml = function fromHtml(html, scope) {\n    var doc = scope || document;\n    var div = doc.createElement('div');\n    div.innerHTML = html;\n    if (!div.hasChildNodes() || div.childNodes.length > 1) {\n      console.error('HTML does not have a single root node', html);\n      throw new Error('HTML must have a single root node');\n    }\n    return fromDom(div.childNodes[0]);\n  };\n  var fromTag = function fromTag(tag, scope) {\n    var doc = scope || document;\n    var node = doc.createElement(tag);\n    return fromDom(node);\n  };\n  var fromText = function fromText(text, scope) {\n    var doc = scope || document;\n    var node = doc.createTextNode(text);\n    return fromDom(node);\n  };\n  var fromDom = function fromDom(node) {\n    if (node === null || node === undefined) {\n      throw new Error('Node cannot be null or undefined');\n    }\n    return {\n      dom: node\n    };\n  };\n  var fromPoint = function fromPoint(docElm, x, y) {\n    return Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n  };\n  var SugarElement = {\n    fromHtml: fromHtml,\n    fromTag: fromTag,\n    fromText: fromText,\n    fromDom: fromDom,\n    fromPoint: fromPoint\n  };\n  typeof window !== 'undefined' ? window : Function('return this;')();\n  var DOCUMENT = 9;\n  var DOCUMENT_FRAGMENT = 11;\n  var ELEMENT = 1;\n  var TEXT = 3;\n  var type = function type(element) {\n    return element.dom.nodeType;\n  };\n  var isType = function isType(t) {\n    return function (element) {\n      return type(element) === t;\n    };\n  };\n  var isElement = isType(ELEMENT);\n  var isText = isType(TEXT);\n  var isDocument = isType(DOCUMENT);\n  var isDocumentFragment = isType(DOCUMENT_FRAGMENT);\n  var cached = function cached(f) {\n    var called = false;\n    var r;\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      if (!called) {\n        called = true;\n        r = f.apply(null, args);\n      }\n      return r;\n    };\n  };\n  var DeviceType = function DeviceType(os, browser, userAgent, mediaMatch) {\n    var isiPad = os.isiOS() && /ipad/i.test(userAgent) === true;\n    var isiPhone = os.isiOS() && !isiPad;\n    var isMobile = os.isiOS() || os.isAndroid();\n    var isTouch = isMobile || mediaMatch('(pointer:coarse)');\n    var isTablet = isiPad || !isiPhone && isMobile && mediaMatch('(min-device-width:768px)');\n    var isPhone = isiPhone || isMobile && !isTablet;\n    var iOSwebview = browser.isSafari() && os.isiOS() && /safari/i.test(userAgent) === false;\n    var isDesktop = !isPhone && !isTablet && !iOSwebview;\n    return {\n      isiPad: constant(isiPad),\n      isiPhone: constant(isiPhone),\n      isTablet: constant(isTablet),\n      isPhone: constant(isPhone),\n      isTouch: constant(isTouch),\n      isAndroid: os.isAndroid,\n      isiOS: os.isiOS,\n      isWebView: constant(iOSwebview),\n      isDesktop: constant(isDesktop)\n    };\n  };\n  var firstMatch = function firstMatch(regexes, s) {\n    for (var i = 0; i < regexes.length; i++) {\n      var x = regexes[i];\n      if (x.test(s)) {\n        return x;\n      }\n    }\n    return undefined;\n  };\n  var find = function find(regexes, agent) {\n    var r = firstMatch(regexes, agent);\n    if (!r) {\n      return {\n        major: 0,\n        minor: 0\n      };\n    }\n    var group = function group(i) {\n      return Number(agent.replace(r, '$' + i));\n    };\n    return nu$2(group(1), group(2));\n  };\n  var detect$3 = function detect$3(versionRegexes, agent) {\n    var cleanedAgent = String(agent).toLowerCase();\n    if (versionRegexes.length === 0) {\n      return unknown$2();\n    }\n    return find(versionRegexes, cleanedAgent);\n  };\n  var unknown$2 = function unknown$2() {\n    return nu$2(0, 0);\n  };\n  var nu$2 = function nu$2(major, minor) {\n    return {\n      major: major,\n      minor: minor\n    };\n  };\n  var Version = {\n    nu: nu$2,\n    detect: detect$3,\n    unknown: unknown$2\n  };\n  var detectBrowser$1 = function detectBrowser$1(browsers, userAgentData) {\n    return findMap(userAgentData.brands, function (uaBrand) {\n      var lcBrand = uaBrand.brand.toLowerCase();\n      return find$1(browsers, function (browser) {\n        var _a;\n        return lcBrand === ((_a = browser.brand) === null || _a === void 0 ? void 0 : _a.toLowerCase());\n      }).map(function (info) {\n        return {\n          current: info.name,\n          version: Version.nu(parseInt(uaBrand.version, 10), 0)\n        };\n      });\n    });\n  };\n  var detect$2 = function detect$2(candidates, userAgent) {\n    var agent = String(userAgent).toLowerCase();\n    return find$1(candidates, function (candidate) {\n      return candidate.search(agent);\n    });\n  };\n  var detectBrowser = function detectBrowser(browsers, userAgent) {\n    return detect$2(browsers, userAgent).map(function (browser) {\n      var version = Version.detect(browser.versionRegexes, userAgent);\n      return {\n        current: browser.name,\n        version: version\n      };\n    });\n  };\n  var detectOs = function detectOs(oses, userAgent) {\n    return detect$2(oses, userAgent).map(function (os) {\n      var version = Version.detect(os.versionRegexes, userAgent);\n      return {\n        current: os.name,\n        version: version\n      };\n    });\n  };\n  var normalVersionRegex = /.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/;\n  var checkContains = function checkContains(target) {\n    return function (uastring) {\n      return contains(uastring, target);\n    };\n  };\n  var browsers = [{\n    name: 'Edge',\n    versionRegexes: [/.*?edge\\/ ?([0-9]+)\\.([0-9]+)$/],\n    search: function search(uastring) {\n      return contains(uastring, 'edge/') && contains(uastring, 'chrome') && contains(uastring, 'safari') && contains(uastring, 'applewebkit');\n    }\n  }, {\n    name: 'Chrome',\n    brand: 'Chromium',\n    versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/, normalVersionRegex],\n    search: function search(uastring) {\n      return contains(uastring, 'chrome') && !contains(uastring, 'chromeframe');\n    }\n  }, {\n    name: 'IE',\n    versionRegexes: [/.*?msie\\ ?([0-9]+)\\.([0-9]+).*/, /.*?rv:([0-9]+)\\.([0-9]+).*/],\n    search: function search(uastring) {\n      return contains(uastring, 'msie') || contains(uastring, 'trident');\n    }\n  }, {\n    name: 'Opera',\n    versionRegexes: [normalVersionRegex, /.*?opera\\/([0-9]+)\\.([0-9]+).*/],\n    search: checkContains('opera')\n  }, {\n    name: 'Firefox',\n    versionRegexes: [/.*?firefox\\/\\ ?([0-9]+)\\.([0-9]+).*/],\n    search: checkContains('firefox')\n  }, {\n    name: 'Safari',\n    versionRegexes: [normalVersionRegex, /.*?cpu os ([0-9]+)_([0-9]+).*/],\n    search: function search(uastring) {\n      return (contains(uastring, 'safari') || contains(uastring, 'mobile/')) && contains(uastring, 'applewebkit');\n    }\n  }];\n  var oses = [{\n    name: 'Windows',\n    search: checkContains('win'),\n    versionRegexes: [/.*?windows\\ nt\\ ?([0-9]+)\\.([0-9]+).*/]\n  }, {\n    name: 'iOS',\n    search: function search(uastring) {\n      return contains(uastring, 'iphone') || contains(uastring, 'ipad');\n    },\n    versionRegexes: [/.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/, /.*cpu os ([0-9]+)_([0-9]+).*/, /.*cpu iphone os ([0-9]+)_([0-9]+).*/]\n  }, {\n    name: 'Android',\n    search: checkContains('android'),\n    versionRegexes: [/.*?android\\ ?([0-9]+)\\.([0-9]+).*/]\n  }, {\n    name: 'OSX',\n    search: checkContains('mac os x'),\n    versionRegexes: [/.*?mac\\ os\\ x\\ ?([0-9]+)_([0-9]+).*/]\n  }, {\n    name: 'Linux',\n    search: checkContains('linux'),\n    versionRegexes: []\n  }, {\n    name: 'Solaris',\n    search: checkContains('sunos'),\n    versionRegexes: []\n  }, {\n    name: 'FreeBSD',\n    search: checkContains('freebsd'),\n    versionRegexes: []\n  }, {\n    name: 'ChromeOS',\n    search: checkContains('cros'),\n    versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/]\n  }];\n  var PlatformInfo = {\n    browsers: constant(browsers),\n    oses: constant(oses)\n  };\n  var edge = 'Edge';\n  var chrome = 'Chrome';\n  var ie = 'IE';\n  var opera = 'Opera';\n  var firefox = 'Firefox';\n  var safari = 'Safari';\n  var unknown$1 = function unknown$1() {\n    return nu$1({\n      current: undefined,\n      version: Version.unknown()\n    });\n  };\n  var nu$1 = function nu$1(info) {\n    var current = info.current;\n    var version = info.version;\n    var isBrowser = function isBrowser(name) {\n      return function () {\n        return current === name;\n      };\n    };\n    return {\n      current: current,\n      version: version,\n      isEdge: isBrowser(edge),\n      isChrome: isBrowser(chrome),\n      isIE: isBrowser(ie),\n      isOpera: isBrowser(opera),\n      isFirefox: isBrowser(firefox),\n      isSafari: isBrowser(safari)\n    };\n  };\n  var Browser = {\n    unknown: unknown$1,\n    nu: nu$1,\n    edge: constant(edge),\n    chrome: constant(chrome),\n    ie: constant(ie),\n    opera: constant(opera),\n    firefox: constant(firefox),\n    safari: constant(safari)\n  };\n  var windows = 'Windows';\n  var ios = 'iOS';\n  var android = 'Android';\n  var linux = 'Linux';\n  var osx = 'OSX';\n  var solaris = 'Solaris';\n  var freebsd = 'FreeBSD';\n  var chromeos = 'ChromeOS';\n  var unknown = function unknown() {\n    return nu({\n      current: undefined,\n      version: Version.unknown()\n    });\n  };\n  var nu = function nu(info) {\n    var current = info.current;\n    var version = info.version;\n    var isOS = function isOS(name) {\n      return function () {\n        return current === name;\n      };\n    };\n    return {\n      current: current,\n      version: version,\n      isWindows: isOS(windows),\n      isiOS: isOS(ios),\n      isAndroid: isOS(android),\n      isOSX: isOS(osx),\n      isLinux: isOS(linux),\n      isSolaris: isOS(solaris),\n      isFreeBSD: isOS(freebsd),\n      isChromeOS: isOS(chromeos)\n    };\n  };\n  var OperatingSystem = {\n    unknown: unknown,\n    nu: nu,\n    windows: constant(windows),\n    ios: constant(ios),\n    android: constant(android),\n    linux: constant(linux),\n    osx: constant(osx),\n    solaris: constant(solaris),\n    freebsd: constant(freebsd),\n    chromeos: constant(chromeos)\n  };\n  var detect$1 = function detect$1(userAgent, userAgentDataOpt, mediaMatch) {\n    var browsers = PlatformInfo.browsers();\n    var oses = PlatformInfo.oses();\n    var browser = userAgentDataOpt.bind(function (userAgentData) {\n      return detectBrowser$1(browsers, userAgentData);\n    }).orThunk(function () {\n      return detectBrowser(browsers, userAgent);\n    }).fold(Browser.unknown, Browser.nu);\n    var os = detectOs(oses, userAgent).fold(OperatingSystem.unknown, OperatingSystem.nu);\n    var deviceType = DeviceType(os, browser, userAgent, mediaMatch);\n    return {\n      browser: browser,\n      os: os,\n      deviceType: deviceType\n    };\n  };\n  var PlatformDetection = {\n    detect: detect$1\n  };\n  var mediaMatch = function mediaMatch(query) {\n    return window.matchMedia(query).matches;\n  };\n  var platform = cached(function () {\n    return PlatformDetection.detect(navigator.userAgent, Optional.from(navigator.userAgentData), mediaMatch);\n  });\n  var detect = function detect() {\n    return platform();\n  };\n  var is = function is(element, selector) {\n    var dom = element.dom;\n    if (dom.nodeType !== ELEMENT) {\n      return false;\n    } else {\n      var elem = dom;\n      if (elem.matches !== undefined) {\n        return elem.matches(selector);\n      } else if (elem.msMatchesSelector !== undefined) {\n        return elem.msMatchesSelector(selector);\n      } else if (elem.webkitMatchesSelector !== undefined) {\n        return elem.webkitMatchesSelector(selector);\n      } else if (elem.mozMatchesSelector !== undefined) {\n        return elem.mozMatchesSelector(selector);\n      } else {\n        throw new Error('Browser lacks native selectors');\n      }\n    }\n  };\n  var bypassSelector = function bypassSelector(dom) {\n    return dom.nodeType !== ELEMENT && dom.nodeType !== DOCUMENT && dom.nodeType !== DOCUMENT_FRAGMENT || dom.childElementCount === 0;\n  };\n  var all$1 = function all$1(selector, scope) {\n    var base = scope === undefined ? document : scope.dom;\n    return bypassSelector(base) ? [] : map(base.querySelectorAll(selector), SugarElement.fromDom);\n  };\n  var eq = function eq(e1, e2) {\n    return e1.dom === e2.dom;\n  };\n  var owner = function owner(element) {\n    return SugarElement.fromDom(element.dom.ownerDocument);\n  };\n  var documentOrOwner = function documentOrOwner(dos) {\n    return isDocument(dos) ? dos : owner(dos);\n  };\n  var parent = function parent(element) {\n    return Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n  };\n  var parents = function parents(element, isRoot) {\n    var stop = isFunction(isRoot) ? isRoot : never;\n    var dom = element.dom;\n    var ret = [];\n    while (dom.parentNode !== null && dom.parentNode !== undefined) {\n      var rawParent = dom.parentNode;\n      var p = SugarElement.fromDom(rawParent);\n      ret.push(p);\n      if (stop(p) === true) {\n        break;\n      } else {\n        dom = rawParent;\n      }\n    }\n    return ret;\n  };\n  var siblings$2 = function siblings$2(element) {\n    var filterSelf = function filterSelf(elements) {\n      return filter$1(elements, function (x) {\n        return !eq(element, x);\n      });\n    };\n    return parent(element).map(children).map(filterSelf).getOr([]);\n  };\n  var children = function children(element) {\n    return map(element.dom.childNodes, SugarElement.fromDom);\n  };\n  var isShadowRoot = function isShadowRoot(dos) {\n    return isDocumentFragment(dos) && isNonNullable(dos.dom.host);\n  };\n  var supported = isFunction(Element.prototype.attachShadow) && isFunction(Node.prototype.getRootNode);\n  var isSupported = constant(supported);\n  var getRootNode = supported ? function (e) {\n    return SugarElement.fromDom(e.dom.getRootNode());\n  } : documentOrOwner;\n  var getShadowRoot = function getShadowRoot(e) {\n    var r = getRootNode(e);\n    return isShadowRoot(r) ? Optional.some(r) : Optional.none();\n  };\n  var getShadowHost = function getShadowHost(e) {\n    return SugarElement.fromDom(e.dom.host);\n  };\n  var getOriginalEventTarget = function getOriginalEventTarget(event) {\n    if (isSupported() && isNonNullable(event.target)) {\n      var el = SugarElement.fromDom(event.target);\n      if (isElement(el) && isOpenShadowHost(el)) {\n        if (event.composed && event.composedPath) {\n          var composedPath = event.composedPath();\n          if (composedPath) {\n            return head(composedPath);\n          }\n        }\n      }\n    }\n    return Optional.from(event.target);\n  };\n  var isOpenShadowHost = function isOpenShadowHost(element) {\n    return isNonNullable(element.dom.shadowRoot);\n  };\n  var inBody = function inBody(element) {\n    var dom = isText(element) ? element.dom.parentNode : element.dom;\n    if (dom === undefined || dom === null || dom.ownerDocument === null) {\n      return false;\n    }\n    var doc = dom.ownerDocument;\n    return getShadowRoot(SugarElement.fromDom(dom)).fold(function () {\n      return doc.body.contains(dom);\n    }, compose1(inBody, getShadowHost));\n  };\n  var getBody = function getBody(doc) {\n    var b = doc.dom.body;\n    if (b === null || b === undefined) {\n      throw new Error('Body is not available yet');\n    }\n    return SugarElement.fromDom(b);\n  };\n  var rawSet = function rawSet(dom, key, value) {\n    if (isString(value) || isBoolean(value) || isNumber(value)) {\n      dom.setAttribute(key, value + '');\n    } else {\n      console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n      throw new Error('Attribute value was not simple');\n    }\n  };\n  var set = function set(element, key, value) {\n    rawSet(element.dom, key, value);\n  };\n  var get$3 = function get$3(element, key) {\n    var v = element.dom.getAttribute(key);\n    return v === null ? undefined : v;\n  };\n  var remove = function remove(element, key) {\n    element.dom.removeAttribute(key);\n  };\n  var internalSet = function internalSet(dom, property, value) {\n    if (!isString(value)) {\n      console.error('Invalid call to CSS.set. Property ', property, ':: Value ', value, ':: Element ', dom);\n      throw new Error('CSS value must be a string: ' + value);\n    }\n    if (isSupported$1(dom)) {\n      dom.style.setProperty(property, value);\n    }\n  };\n  var setAll = function setAll(element, css) {\n    var dom = element.dom;\n    each(css, function (v, k) {\n      internalSet(dom, k, v);\n    });\n  };\n  var get$2 = function get$2(element, property) {\n    var dom = element.dom;\n    var styles = window.getComputedStyle(dom);\n    var r = styles.getPropertyValue(property);\n    return r === '' && !inBody(element) ? getUnsafeProperty(dom, property) : r;\n  };\n  var getUnsafeProperty = function getUnsafeProperty(dom, property) {\n    return isSupported$1(dom) ? dom.style.getPropertyValue(property) : '';\n  };\n  var mkEvent = function mkEvent(target, x, y, stop, prevent, kill, raw) {\n    return {\n      target: target,\n      x: x,\n      y: y,\n      stop: stop,\n      prevent: prevent,\n      kill: kill,\n      raw: raw\n    };\n  };\n  var fromRawEvent = function fromRawEvent(rawEvent) {\n    var target = SugarElement.fromDom(getOriginalEventTarget(rawEvent).getOr(rawEvent.target));\n    var stop = function stop() {\n      return rawEvent.stopPropagation();\n    };\n    var prevent = function prevent() {\n      return rawEvent.preventDefault();\n    };\n    var kill = compose(prevent, stop);\n    return mkEvent(target, rawEvent.clientX, rawEvent.clientY, stop, prevent, kill, rawEvent);\n  };\n  var handle = function handle(filter, handler) {\n    return function (rawEvent) {\n      if (filter(rawEvent)) {\n        handler(fromRawEvent(rawEvent));\n      }\n    };\n  };\n  var binder = function binder(element, event, filter, handler, useCapture) {\n    var wrapped = handle(filter, handler);\n    element.dom.addEventListener(event, wrapped, useCapture);\n    return {\n      unbind: curry(unbind, element, event, wrapped, useCapture)\n    };\n  };\n  var bind$2 = function bind$2(element, event, filter, handler) {\n    return binder(element, event, filter, handler, false);\n  };\n  var unbind = function unbind(element, event, handler, useCapture) {\n    element.dom.removeEventListener(event, handler, useCapture);\n  };\n  var filter = always;\n  var bind$1 = function bind$1(element, event, handler) {\n    return bind$2(element, event, filter, handler);\n  };\n  var r = function r(left, top) {\n    var translate = function translate(x, y) {\n      return r(left + x, top + y);\n    };\n    return {\n      left: left,\n      top: top,\n      translate: translate\n    };\n  };\n  var SugarPosition = r;\n  var get$1 = function get$1(_DOC) {\n    var doc = _DOC !== undefined ? _DOC.dom : document;\n    var x = doc.body.scrollLeft || doc.documentElement.scrollLeft;\n    var y = doc.body.scrollTop || doc.documentElement.scrollTop;\n    return SugarPosition(x, y);\n  };\n  var get = function get(_win) {\n    var win = _win === undefined ? window : _win;\n    if (detect().browser.isFirefox()) {\n      return Optional.none();\n    } else {\n      return Optional.from(win['visualViewport']);\n    }\n  };\n  var bounds = function bounds(x, y, width, height) {\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      right: x + width,\n      bottom: y + height\n    };\n  };\n  var getBounds = function getBounds(_win) {\n    var win = _win === undefined ? window : _win;\n    var doc = win.document;\n    var scroll = get$1(SugarElement.fromDom(doc));\n    return get(win).fold(function () {\n      var html = win.document.documentElement;\n      var width = html.clientWidth;\n      var height = html.clientHeight;\n      return bounds(scroll.left, scroll.top, width, height);\n    }, function (visualViewport) {\n      return bounds(Math.max(visualViewport.pageLeft, scroll.left), Math.max(visualViewport.pageTop, scroll.top), visualViewport.width, visualViewport.height);\n    });\n  };\n  var bind = function bind(name, callback, _win) {\n    return get(_win).map(function (visualViewport) {\n      var handler = function handler(e) {\n        return callback(fromRawEvent(e));\n      };\n      visualViewport.addEventListener(name, handler);\n      return {\n        unbind: function unbind() {\n          return visualViewport.removeEventListener(name, handler);\n        }\n      };\n    }).getOrThunk(function () {\n      return {\n        unbind: noop\n      };\n    });\n  };\n  var global$2 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n  var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n  var global = tinymce.util.Tools.resolve('tinymce.util.Delay');\n  var fireFullscreenStateChanged = function fireFullscreenStateChanged(editor, state) {\n    editor.fire('FullscreenStateChanged', {\n      state: state\n    });\n    editor.fire('ResizeEditor');\n  };\n  var getFullscreenNative = function getFullscreenNative(editor) {\n    return editor.getParam('fullscreen_native', false, 'boolean');\n  };\n  var getFullscreenRoot = function getFullscreenRoot(editor) {\n    var elem = SugarElement.fromDom(editor.getElement());\n    return getShadowRoot(elem).map(getShadowHost).getOrThunk(function () {\n      return getBody(owner(elem));\n    });\n  };\n  var getFullscreenElement = function getFullscreenElement(root) {\n    if (root.fullscreenElement !== undefined) {\n      return root.fullscreenElement;\n    } else if (root.msFullscreenElement !== undefined) {\n      return root.msFullscreenElement;\n    } else if (root.webkitFullscreenElement !== undefined) {\n      return root.webkitFullscreenElement;\n    } else {\n      return null;\n    }\n  };\n  var getFullscreenchangeEventName = function getFullscreenchangeEventName() {\n    if (document.fullscreenElement !== undefined) {\n      return 'fullscreenchange';\n    } else if (document.msFullscreenElement !== undefined) {\n      return 'MSFullscreenChange';\n    } else if (document.webkitFullscreenElement !== undefined) {\n      return 'webkitfullscreenchange';\n    } else {\n      return 'fullscreenchange';\n    }\n  };\n  var requestFullscreen = function requestFullscreen(sugarElem) {\n    var elem = sugarElem.dom;\n    if (elem.requestFullscreen) {\n      elem.requestFullscreen();\n    } else if (elem.msRequestFullscreen) {\n      elem.msRequestFullscreen();\n    } else if (elem.webkitRequestFullScreen) {\n      elem.webkitRequestFullScreen();\n    }\n  };\n  var exitFullscreen = function exitFullscreen(sugarDoc) {\n    var doc = sugarDoc.dom;\n    if (doc.exitFullscreen) {\n      doc.exitFullscreen();\n    } else if (doc.msExitFullscreen) {\n      doc.msExitFullscreen();\n    } else if (doc.webkitCancelFullScreen) {\n      doc.webkitCancelFullScreen();\n    }\n  };\n  var isFullscreenElement = function isFullscreenElement(elem) {\n    return elem.dom === getFullscreenElement(owner(elem).dom);\n  };\n  var ancestors$1 = function ancestors$1(scope, predicate, isRoot) {\n    return filter$1(parents(scope, isRoot), predicate);\n  };\n  var siblings$1 = function siblings$1(scope, predicate) {\n    return filter$1(siblings$2(scope), predicate);\n  };\n  var all = function all(selector) {\n    return all$1(selector);\n  };\n  var ancestors = function ancestors(scope, selector, isRoot) {\n    return ancestors$1(scope, function (e) {\n      return is(e, selector);\n    }, isRoot);\n  };\n  var siblings = function siblings(scope, selector) {\n    return siblings$1(scope, function (e) {\n      return is(e, selector);\n    });\n  };\n  var attr = 'data-ephox-mobile-fullscreen-style';\n  var siblingStyles = 'display:none!important;';\n  var ancestorPosition = 'position:absolute!important;';\n  var ancestorStyles = 'top:0!important;left:0!important;margin:0!important;padding:0!important;width:100%!important;height:100%!important;overflow:visible!important;';\n  var bgFallback = 'background-color:rgb(255,255,255)!important;';\n  var isAndroid = global$1.os.isAndroid();\n  var matchColor = function matchColor(editorBody) {\n    var color = get$2(editorBody, 'background-color');\n    return color !== undefined && color !== '' ? 'background-color:' + color + '!important' : bgFallback;\n  };\n  var clobberStyles = function clobberStyles(dom, container, editorBody) {\n    var gatherSiblings = function gatherSiblings(element) {\n      return siblings(element, '*:not(.tox-silver-sink)');\n    };\n    var clobber = function clobber(clobberStyle) {\n      return function (element) {\n        var styles = get$3(element, 'style');\n        var backup = styles === undefined ? 'no-styles' : styles.trim();\n        if (backup === clobberStyle) {\n          return;\n        } else {\n          set(element, attr, backup);\n          setAll(element, dom.parseStyle(clobberStyle));\n        }\n      };\n    };\n    var ancestors$1 = ancestors(container, '*');\n    var siblings$1 = bind$3(ancestors$1, gatherSiblings);\n    var bgColor = matchColor(editorBody);\n    each$1(siblings$1, clobber(siblingStyles));\n    each$1(ancestors$1, clobber(ancestorPosition + ancestorStyles + bgColor));\n    var containerStyles = isAndroid === true ? '' : ancestorPosition;\n    clobber(containerStyles + ancestorStyles + bgColor)(container);\n  };\n  var restoreStyles = function restoreStyles(dom) {\n    var clobberedEls = all('[' + attr + ']');\n    each$1(clobberedEls, function (element) {\n      var restore = get$3(element, attr);\n      if (restore !== 'no-styles') {\n        setAll(element, dom.parseStyle(restore));\n      } else {\n        remove(element, 'style');\n      }\n      remove(element, attr);\n    });\n  };\n  var DOM = global$2.DOM;\n  var getScrollPos = function getScrollPos() {\n    return getBounds(window);\n  };\n  var setScrollPos = function setScrollPos(pos) {\n    return window.scrollTo(pos.x, pos.y);\n  };\n  var viewportUpdate = get().fold(function () {\n    return {\n      bind: noop,\n      unbind: noop\n    };\n  }, function (visualViewport) {\n    var editorContainer = value();\n    var resizeBinder = unbindable();\n    var scrollBinder = unbindable();\n    var refreshScroll = function refreshScroll() {\n      document.body.scrollTop = 0;\n      document.documentElement.scrollTop = 0;\n    };\n    var refreshVisualViewport = function refreshVisualViewport() {\n      window.requestAnimationFrame(function () {\n        editorContainer.on(function (container) {\n          return setAll(container, {\n            top: visualViewport.offsetTop + 'px',\n            left: visualViewport.offsetLeft + 'px',\n            height: visualViewport.height + 'px',\n            width: visualViewport.width + 'px'\n          });\n        });\n      });\n    };\n    var update = global.throttle(function () {\n      refreshScroll();\n      refreshVisualViewport();\n    }, 50);\n    var bind$1 = function bind$1(element) {\n      editorContainer.set(element);\n      update();\n      resizeBinder.set(bind('resize', update));\n      scrollBinder.set(bind('scroll', update));\n    };\n    var unbind = function unbind() {\n      editorContainer.on(function () {\n        resizeBinder.clear();\n        scrollBinder.clear();\n      });\n      editorContainer.clear();\n    };\n    return {\n      bind: bind$1,\n      unbind: unbind\n    };\n  });\n  var toggleFullscreen = function toggleFullscreen(editor, fullscreenState) {\n    var body = document.body;\n    var documentElement = document.documentElement;\n    var editorContainer = editor.getContainer();\n    var editorContainerS = SugarElement.fromDom(editorContainer);\n    var fullscreenRoot = getFullscreenRoot(editor);\n    var fullscreenInfo = fullscreenState.get();\n    var editorBody = SugarElement.fromDom(editor.getBody());\n    var isTouch = global$1.deviceType.isTouch();\n    var editorContainerStyle = editorContainer.style;\n    var iframe = editor.iframeElement;\n    var iframeStyle = iframe.style;\n    var handleClasses = function handleClasses(handler) {\n      handler(body, 'tox-fullscreen');\n      handler(documentElement, 'tox-fullscreen');\n      handler(editorContainer, 'tox-fullscreen');\n      getShadowRoot(editorContainerS).map(function (root) {\n        return getShadowHost(root).dom;\n      }).each(function (host) {\n        handler(host, 'tox-fullscreen');\n        handler(host, 'tox-shadowhost');\n      });\n    };\n    var cleanup = function cleanup() {\n      if (isTouch) {\n        restoreStyles(editor.dom);\n      }\n      handleClasses(DOM.removeClass);\n      viewportUpdate.unbind();\n      Optional.from(fullscreenState.get()).each(function (info) {\n        return info.fullscreenChangeHandler.unbind();\n      });\n    };\n    if (!fullscreenInfo) {\n      var fullscreenChangeHandler = bind$1(owner(fullscreenRoot), getFullscreenchangeEventName(), function (_evt) {\n        if (getFullscreenNative(editor)) {\n          if (!isFullscreenElement(fullscreenRoot) && fullscreenState.get() !== null) {\n            toggleFullscreen(editor, fullscreenState);\n          }\n        }\n      });\n      var newFullScreenInfo = {\n        scrollPos: getScrollPos(),\n        containerWidth: editorContainerStyle.width,\n        containerHeight: editorContainerStyle.height,\n        containerTop: editorContainerStyle.top,\n        containerLeft: editorContainerStyle.left,\n        iframeWidth: iframeStyle.width,\n        iframeHeight: iframeStyle.height,\n        fullscreenChangeHandler: fullscreenChangeHandler\n      };\n      if (isTouch) {\n        clobberStyles(editor.dom, editorContainerS, editorBody);\n      }\n      iframeStyle.width = iframeStyle.height = '100%';\n      editorContainerStyle.width = editorContainerStyle.height = '';\n      handleClasses(DOM.addClass);\n      viewportUpdate.bind(editorContainerS);\n      editor.on('remove', cleanup);\n      fullscreenState.set(newFullScreenInfo);\n      if (getFullscreenNative(editor)) {\n        requestFullscreen(fullscreenRoot);\n      }\n      fireFullscreenStateChanged(editor, true);\n    } else {\n      fullscreenInfo.fullscreenChangeHandler.unbind();\n      if (getFullscreenNative(editor) && isFullscreenElement(fullscreenRoot)) {\n        exitFullscreen(owner(fullscreenRoot));\n      }\n      iframeStyle.width = fullscreenInfo.iframeWidth;\n      iframeStyle.height = fullscreenInfo.iframeHeight;\n      editorContainerStyle.width = fullscreenInfo.containerWidth;\n      editorContainerStyle.height = fullscreenInfo.containerHeight;\n      editorContainerStyle.top = fullscreenInfo.containerTop;\n      editorContainerStyle.left = fullscreenInfo.containerLeft;\n      cleanup();\n      setScrollPos(fullscreenInfo.scrollPos);\n      fullscreenState.set(null);\n      fireFullscreenStateChanged(editor, false);\n      editor.off('remove', cleanup);\n    }\n  };\n  var register$1 = function register$1(editor, fullscreenState) {\n    editor.addCommand('mceFullScreen', function () {\n      toggleFullscreen(editor, fullscreenState);\n    });\n  };\n  var makeSetupHandler = function makeSetupHandler(editor, fullscreenState) {\n    return function (api) {\n      api.setActive(fullscreenState.get() !== null);\n      var editorEventCallback = function editorEventCallback(e) {\n        return api.setActive(e.state);\n      };\n      editor.on('FullscreenStateChanged', editorEventCallback);\n      return function () {\n        return editor.off('FullscreenStateChanged', editorEventCallback);\n      };\n    };\n  };\n  var register = function register(editor, fullscreenState) {\n    var onAction = function onAction() {\n      return editor.execCommand('mceFullScreen');\n    };\n    editor.ui.registry.addToggleMenuItem('fullscreen', {\n      text: 'Fullscreen',\n      icon: 'fullscreen',\n      shortcut: 'Meta+Shift+F',\n      onAction: onAction,\n      onSetup: makeSetupHandler(editor, fullscreenState)\n    });\n    editor.ui.registry.addToggleButton('fullscreen', {\n      tooltip: 'Fullscreen',\n      icon: 'fullscreen',\n      onAction: onAction,\n      onSetup: makeSetupHandler(editor, fullscreenState)\n    });\n  };\n  function Plugin() {\n    global$3.add('fullscreen', function (editor) {\n      var fullscreenState = Cell(null);\n      if (editor.inline) {\n        return get$5(fullscreenState);\n      }\n      register$1(editor, fullscreenState);\n      register(editor, fullscreenState);\n      editor.addShortcut('Meta+Shift+F', '', 'mceFullScreen');\n      return get$5(fullscreenState);\n    });\n  }\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/fullscreen/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/fullscreen/index.js");
/******/ 	
/******/ })()
;