/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/imagetools/index.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/imagetools/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"imagetools\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/imagetools')\n//   ES2015:\n//     import 'tinymce/plugins/imagetools'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/imagetools/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2ltYWdldG9vbHMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLG1CQUFPLENBQUMsZ0dBQWEsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvY29yZS9wbHVnaW5zL2N1c3RvbS90aW55bWNlL3BsdWdpbnMvaW1hZ2V0b29scy9pbmRleC5qcz80NTc4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEV4cG9ydHMgdGhlIFwiaW1hZ2V0b29sc1wiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy9pbWFnZXRvb2xzJylcclxuLy8gICBFUzIwMTU6XHJcbi8vICAgICBpbXBvcnQgJ3RpbnltY2UvcGx1Z2lucy9pbWFnZXRvb2xzJ1xyXG5yZXF1aXJlKCcuL3BsdWdpbi5qcycpOyJdLCJuYW1lcyI6WyJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/imagetools/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/imagetools/plugin.js":
/*!***********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/imagetools/plugin.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.7 (2022-12-06)\r\n */\n(function () {\n  'use strict';\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n    var get = function get() {\n      return value;\n    };\n    var set = function set(v) {\n      value = v;\n    };\n    return {\n      get: get,\n      set: set\n    };\n  };\n  var global$5 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n  var global$4 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n  var isType = function isType(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n  var isArray = isType('array');\n  var isNullable = function isNullable(a) {\n    return a === null || a === undefined;\n  };\n  var isNonNullable = function isNonNullable(a) {\n    return !isNullable(a);\n  };\n  var isFunction = isSimpleType('function');\n  var noop = function noop() {};\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n  var identity = function identity(x) {\n    return x;\n  };\n  var never = constant(false);\n  var always = constant(true);\n  var none = function none() {\n    return NONE;\n  };\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n  var some = function some(a) {\n    var constant_a = constant(a);\n    var self = function self() {\n      return me;\n    };\n    var bind = function bind(f) {\n      return f(a);\n    };\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var exports$1 = {},\n    module = {\n      exports: exports$1\n    };\n  (function (define, exports, module, require) {\n    (function (global, factory) {\n      _typeof(exports) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.EphoxContactWrapper = factory());\n    })(this, function () {\n      var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n      var promise = {\n        exports: {}\n      };\n      (function (module) {\n        (function (root) {\n          var setTimeoutFunc = setTimeout;\n          function noop() {}\n          function bind(fn, thisArg) {\n            return function () {\n              fn.apply(thisArg, arguments);\n            };\n          }\n          function Promise(fn) {\n            if (_typeof(this) !== 'object') throw new TypeError('Promises must be constructed via new');\n            if (typeof fn !== 'function') throw new TypeError('not a function');\n            this._state = 0;\n            this._handled = false;\n            this._value = undefined;\n            this._deferreds = [];\n            doResolve(fn, this);\n          }\n          function handle(self, deferred) {\n            while (self._state === 3) {\n              self = self._value;\n            }\n            if (self._state === 0) {\n              self._deferreds.push(deferred);\n              return;\n            }\n            self._handled = true;\n            Promise._immediateFn(function () {\n              var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n              if (cb === null) {\n                (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n                return;\n              }\n              var ret;\n              try {\n                ret = cb(self._value);\n              } catch (e) {\n                reject(deferred.promise, e);\n                return;\n              }\n              resolve(deferred.promise, ret);\n            });\n          }\n          function resolve(self, newValue) {\n            try {\n              if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');\n              if (newValue && (_typeof(newValue) === 'object' || typeof newValue === 'function')) {\n                var then = newValue.then;\n                if (newValue instanceof Promise) {\n                  self._state = 3;\n                  self._value = newValue;\n                  finale(self);\n                  return;\n                } else if (typeof then === 'function') {\n                  doResolve(bind(then, newValue), self);\n                  return;\n                }\n              }\n              self._state = 1;\n              self._value = newValue;\n              finale(self);\n            } catch (e) {\n              reject(self, e);\n            }\n          }\n          function reject(self, newValue) {\n            self._state = 2;\n            self._value = newValue;\n            finale(self);\n          }\n          function finale(self) {\n            if (self._state === 2 && self._deferreds.length === 0) {\n              Promise._immediateFn(function () {\n                if (!self._handled) {\n                  Promise._unhandledRejectionFn(self._value);\n                }\n              });\n            }\n            for (var i = 0, len = self._deferreds.length; i < len; i++) {\n              handle(self, self._deferreds[i]);\n            }\n            self._deferreds = null;\n          }\n          function Handler(onFulfilled, onRejected, promise) {\n            this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n            this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n            this.promise = promise;\n          }\n          function doResolve(fn, self) {\n            var done = false;\n            try {\n              fn(function (value) {\n                if (done) return;\n                done = true;\n                resolve(self, value);\n              }, function (reason) {\n                if (done) return;\n                done = true;\n                reject(self, reason);\n              });\n            } catch (ex) {\n              if (done) return;\n              done = true;\n              reject(self, ex);\n            }\n          }\n          Promise.prototype['catch'] = function (onRejected) {\n            return this.then(null, onRejected);\n          };\n          Promise.prototype.then = function (onFulfilled, onRejected) {\n            var prom = new this.constructor(noop);\n            handle(this, new Handler(onFulfilled, onRejected, prom));\n            return prom;\n          };\n          Promise.all = function (arr) {\n            var args = Array.prototype.slice.call(arr);\n            return new Promise(function (resolve, reject) {\n              if (args.length === 0) return resolve([]);\n              var remaining = args.length;\n              function res(i, val) {\n                try {\n                  if (val && (_typeof(val) === 'object' || typeof val === 'function')) {\n                    var then = val.then;\n                    if (typeof then === 'function') {\n                      then.call(val, function (val) {\n                        res(i, val);\n                      }, reject);\n                      return;\n                    }\n                  }\n                  args[i] = val;\n                  if (--remaining === 0) {\n                    resolve(args);\n                  }\n                } catch (ex) {\n                  reject(ex);\n                }\n              }\n              for (var i = 0; i < args.length; i++) {\n                res(i, args[i]);\n              }\n            });\n          };\n          Promise.resolve = function (value) {\n            if (value && _typeof(value) === 'object' && value.constructor === Promise) {\n              return value;\n            }\n            return new Promise(function (resolve) {\n              resolve(value);\n            });\n          };\n          Promise.reject = function (value) {\n            return new Promise(function (resolve, reject) {\n              reject(value);\n            });\n          };\n          Promise.race = function (values) {\n            return new Promise(function (resolve, reject) {\n              for (var i = 0, len = values.length; i < len; i++) {\n                values[i].then(resolve, reject);\n              }\n            });\n          };\n          Promise._immediateFn = typeof setImmediate === 'function' ? function (fn) {\n            setImmediate(fn);\n          } : function (fn) {\n            setTimeoutFunc(fn, 0);\n          };\n          Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n            if (typeof console !== 'undefined' && console) {\n              console.warn('Possible Unhandled Promise Rejection:', err);\n            }\n          };\n          Promise._setImmediateFn = function _setImmediateFn(fn) {\n            Promise._immediateFn = fn;\n          };\n          Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {\n            Promise._unhandledRejectionFn = fn;\n          };\n          if (module.exports) {\n            module.exports = Promise;\n          } else if (!root.Promise) {\n            root.Promise = Promise;\n          }\n        })(commonjsGlobal);\n      })(promise);\n      var promisePolyfill = promise.exports;\n      var Global = function () {\n        if (typeof window !== 'undefined') {\n          return window;\n        } else {\n          return Function('return this;')();\n        }\n      }();\n      var promisePolyfill_1 = {\n        boltExport: Global.Promise || promisePolyfill\n      };\n      return promisePolyfill_1;\n    });\n  })(undefined, exports$1, module);\n  var Promise$1 = module.exports.boltExport;\n  var create$1 = function create$1(width, height) {\n    return resize(document.createElement('canvas'), width, height);\n  };\n  var clone = function clone(canvas) {\n    var tCanvas = create$1(canvas.width, canvas.height);\n    var ctx = get2dContext(tCanvas);\n    ctx.drawImage(canvas, 0, 0);\n    return tCanvas;\n  };\n  var get2dContext = function get2dContext(canvas) {\n    return canvas.getContext('2d');\n  };\n  var resize = function resize(canvas, width, height) {\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  };\n  var getWidth = function getWidth(image) {\n    return image.naturalWidth || image.width;\n  };\n  var getHeight = function getHeight(image) {\n    return image.naturalHeight || image.height;\n  };\n  var imageToBlob$2 = function imageToBlob$2(image) {\n    var src = image.src;\n    if (src.indexOf('data:') === 0) {\n      return dataUriToBlob(src);\n    }\n    return anyUriToBlob(src);\n  };\n  var blobToImage$1 = function blobToImage$1(blob) {\n    return new Promise$1(function (resolve, reject) {\n      var blobUrl = URL.createObjectURL(blob);\n      var image = new Image();\n      var removeListeners = function removeListeners() {\n        image.removeEventListener('load', loaded);\n        image.removeEventListener('error', error);\n      };\n      var loaded = function loaded() {\n        removeListeners();\n        resolve(image);\n      };\n      var error = function error() {\n        removeListeners();\n        reject('Unable to load data of type ' + blob.type + ': ' + blobUrl);\n      };\n      image.addEventListener('load', loaded);\n      image.addEventListener('error', error);\n      image.src = blobUrl;\n      if (image.complete) {\n        setTimeout(loaded, 0);\n      }\n    });\n  };\n  var anyUriToBlob = function anyUriToBlob(url) {\n    return new Promise$1(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.responseType = 'blob';\n      xhr.onload = function () {\n        if (this.status === 200) {\n          resolve(this.response);\n        }\n      };\n      xhr.onerror = function () {\n        var _this = this;\n        var corsError = function corsError() {\n          var obj = new Error('No access to download image');\n          obj.code = 18;\n          obj.name = 'SecurityError';\n          return obj;\n        };\n        var genericError = function genericError() {\n          return new Error('Error ' + _this.status + ' downloading image');\n        };\n        reject(this.status === 0 ? corsError() : genericError());\n      };\n      xhr.send();\n    });\n  };\n  var dataUriToBlobSync = function dataUriToBlobSync(uri) {\n    var data = uri.split(',');\n    var matches = /data:([^;]+)/.exec(data[0]);\n    if (!matches) {\n      return Optional.none();\n    }\n    var mimetype = matches[1];\n    var base64 = data[1];\n    var sliceSize = 1024;\n    var byteCharacters = atob(base64);\n    var bytesLength = byteCharacters.length;\n    var slicesCount = Math.ceil(bytesLength / sliceSize);\n    var byteArrays = new Array(slicesCount);\n    for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n      var begin = sliceIndex * sliceSize;\n      var end = Math.min(begin + sliceSize, bytesLength);\n      var bytes = new Array(end - begin);\n      for (var offset = begin, i = 0; offset < end; ++i, ++offset) {\n        bytes[i] = byteCharacters[offset].charCodeAt(0);\n      }\n      byteArrays[sliceIndex] = new Uint8Array(bytes);\n    }\n    return Optional.some(new Blob(byteArrays, {\n      type: mimetype\n    }));\n  };\n  var dataUriToBlob = function dataUriToBlob(uri) {\n    return new Promise$1(function (resolve, reject) {\n      dataUriToBlobSync(uri).fold(function () {\n        reject('uri is not base64: ' + uri);\n      }, resolve);\n    });\n  };\n  var canvasToBlob = function canvasToBlob(canvas, type, quality) {\n    type = type || 'image/png';\n    if (isFunction(HTMLCanvasElement.prototype.toBlob)) {\n      return new Promise$1(function (resolve, reject) {\n        canvas.toBlob(function (blob) {\n          if (blob) {\n            resolve(blob);\n          } else {\n            reject();\n          }\n        }, type, quality);\n      });\n    } else {\n      return dataUriToBlob(canvas.toDataURL(type, quality));\n    }\n  };\n  var canvasToDataURL = function canvasToDataURL(canvas, type, quality) {\n    type = type || 'image/png';\n    return canvas.toDataURL(type, quality);\n  };\n  var blobToCanvas = function blobToCanvas(blob) {\n    return blobToImage$1(blob).then(function (image) {\n      revokeImageUrl(image);\n      var canvas = create$1(getWidth(image), getHeight(image));\n      var context = get2dContext(canvas);\n      context.drawImage(image, 0, 0);\n      return canvas;\n    });\n  };\n  var blobToDataUri = function blobToDataUri(blob) {\n    return new Promise$1(function (resolve) {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        resolve(reader.result);\n      };\n      reader.readAsDataURL(blob);\n    });\n  };\n  var revokeImageUrl = function revokeImageUrl(image) {\n    URL.revokeObjectURL(image.src);\n  };\n  var blobToImage = function blobToImage(blob) {\n    return blobToImage$1(blob);\n  };\n  var imageToBlob$1 = function imageToBlob$1(image) {\n    return imageToBlob$2(image);\n  };\n  var nativeIndexOf = Array.prototype.indexOf;\n  var rawIndexOf = function rawIndexOf(ts, t) {\n    return nativeIndexOf.call(ts, t);\n  };\n  var contains = function contains(xs, x) {\n    return rawIndexOf(xs, x) > -1;\n  };\n  var each$1 = function each$1(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n  var filter = function filter(xs, pred) {\n    var r = [];\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      if (pred(x, i)) {\n        r.push(x);\n      }\n    }\n    return r;\n  };\n  var foldl = function foldl(xs, f, acc) {\n    each$1(xs, function (x, i) {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n  var findUntil = function findUntil(xs, pred, until) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      if (pred(x, i)) {\n        return Optional.some(x);\n      } else if (until(x, i)) {\n        break;\n      }\n    }\n    return Optional.none();\n  };\n  var find = function find(xs, pred) {\n    return findUntil(xs, pred, never);\n  };\n  var forall = function forall(xs, pred) {\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      var x = xs[i];\n      if (pred(x, i) !== true) {\n        return false;\n      }\n    }\n    return true;\n  };\n  var keys = Object.keys;\n  var each = function each(obj, f) {\n    var props = keys(obj);\n    for (var k = 0, len = props.length; k < len; k++) {\n      var i = props[k];\n      var x = obj[i];\n      f(x, i);\n    }\n  };\n  var generate = function generate(cases) {\n    if (!isArray(cases)) {\n      throw new Error('cases must be an array');\n    }\n    if (cases.length === 0) {\n      throw new Error('there must be at least one case');\n    }\n    var constructors = [];\n    var adt = {};\n    each$1(cases, function (acase, count) {\n      var keys$1 = keys(acase);\n      if (keys$1.length !== 1) {\n        throw new Error('one and only one name per case');\n      }\n      var key = keys$1[0];\n      var value = acase[key];\n      if (adt[key] !== undefined) {\n        throw new Error('duplicate key detected:' + key);\n      } else if (key === 'cata') {\n        throw new Error('cannot have a case named cata (sorry)');\n      } else if (!isArray(value)) {\n        throw new Error('case arguments must be an array');\n      }\n      constructors.push(key);\n      adt[key] = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var argLength = args.length;\n        if (argLength !== value.length) {\n          throw new Error('Wrong number of arguments to case ' + key + '. Expected ' + value.length + ' (' + value + '), got ' + argLength);\n        }\n        var match = function match(branches) {\n          var branchKeys = keys(branches);\n          if (constructors.length !== branchKeys.length) {\n            throw new Error('Wrong number of arguments to match. Expected: ' + constructors.join(',') + '\\nActual: ' + branchKeys.join(','));\n          }\n          var allReqd = forall(constructors, function (reqKey) {\n            return contains(branchKeys, reqKey);\n          });\n          if (!allReqd) {\n            throw new Error('Not all branches were specified when using match. Specified: ' + branchKeys.join(', ') + '\\nRequired: ' + constructors.join(', '));\n          }\n          return branches[key].apply(null, args);\n        };\n        return {\n          fold: function fold() {\n            var foldArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              foldArgs[_i] = arguments[_i];\n            }\n            if (foldArgs.length !== cases.length) {\n              throw new Error('Wrong number of arguments to fold. Expected ' + cases.length + ', got ' + foldArgs.length);\n            }\n            var target = foldArgs[count];\n            return target.apply(null, args);\n          },\n          match: match,\n          log: function log(label) {\n            console.log(label, {\n              constructors: constructors,\n              constructor: key,\n              params: args\n            });\n          }\n        };\n      };\n    });\n    return adt;\n  };\n  var Adt = {\n    generate: generate\n  };\n  Adt.generate([{\n    bothErrors: ['error1', 'error2']\n  }, {\n    firstError: ['error1', 'value2']\n  }, {\n    secondError: ['value1', 'error2']\n  }, {\n    bothValues: ['value1', 'value2']\n  }]);\n  var create = function create(getCanvas, blob, uri) {\n    var initialType = blob.type;\n    var getType = constant(initialType);\n    var toBlob = function toBlob() {\n      return Promise$1.resolve(blob);\n    };\n    var toDataURL = constant(uri);\n    var toBase64 = function toBase64() {\n      return uri.split(',')[1];\n    };\n    var toAdjustedBlob = function toAdjustedBlob(type, quality) {\n      return getCanvas.then(function (canvas) {\n        return canvasToBlob(canvas, type, quality);\n      });\n    };\n    var toAdjustedDataURL = function toAdjustedDataURL(type, quality) {\n      return getCanvas.then(function (canvas) {\n        return canvasToDataURL(canvas, type, quality);\n      });\n    };\n    var toAdjustedBase64 = function toAdjustedBase64(type, quality) {\n      return toAdjustedDataURL(type, quality).then(function (dataurl) {\n        return dataurl.split(',')[1];\n      });\n    };\n    var toCanvas = function toCanvas() {\n      return getCanvas.then(clone);\n    };\n    return {\n      getType: getType,\n      toBlob: toBlob,\n      toDataURL: toDataURL,\n      toBase64: toBase64,\n      toAdjustedBlob: toAdjustedBlob,\n      toAdjustedDataURL: toAdjustedDataURL,\n      toAdjustedBase64: toAdjustedBase64,\n      toCanvas: toCanvas\n    };\n  };\n  var fromBlob = function fromBlob(blob) {\n    return blobToDataUri(blob).then(function (uri) {\n      return create(blobToCanvas(blob), blob, uri);\n    });\n  };\n  var fromCanvas = function fromCanvas(canvas, type) {\n    return canvasToBlob(canvas, type).then(function (blob) {\n      return create(Promise$1.resolve(canvas), blob, canvas.toDataURL());\n    });\n  };\n  var ceilWithPrecision = function ceilWithPrecision(num, precision) {\n    if (precision === void 0) {\n      precision = 2;\n    }\n    var mul = Math.pow(10, precision);\n    var upper = Math.round(num * mul);\n    return Math.ceil(upper / mul);\n  };\n  var rotate$2 = function rotate$2(ir, angle) {\n    return ir.toCanvas().then(function (canvas) {\n      return applyRotate(canvas, ir.getType(), angle);\n    });\n  };\n  var applyRotate = function applyRotate(image, type, angle) {\n    var degrees = angle < 0 ? 360 + angle : angle;\n    var rad = degrees * Math.PI / 180;\n    var width = image.width;\n    var height = image.height;\n    var sin = Math.sin(rad);\n    var cos = Math.cos(rad);\n    var newWidth = ceilWithPrecision(Math.abs(width * cos) + Math.abs(height * sin));\n    var newHeight = ceilWithPrecision(Math.abs(width * sin) + Math.abs(height * cos));\n    var canvas = create$1(newWidth, newHeight);\n    var context = get2dContext(canvas);\n    context.translate(newWidth / 2, newHeight / 2);\n    context.rotate(rad);\n    context.drawImage(image, -width / 2, -height / 2);\n    return fromCanvas(canvas, type);\n  };\n  var flip$2 = function flip$2(ir, axis) {\n    return ir.toCanvas().then(function (canvas) {\n      return applyFlip(canvas, ir.getType(), axis);\n    });\n  };\n  var applyFlip = function applyFlip(image, type, axis) {\n    var canvas = create$1(image.width, image.height);\n    var context = get2dContext(canvas);\n    if (axis === 'v') {\n      context.scale(1, -1);\n      context.drawImage(image, 0, -canvas.height);\n    } else {\n      context.scale(-1, 1);\n      context.drawImage(image, -canvas.width, 0);\n    }\n    return fromCanvas(canvas, type);\n  };\n  var flip$1 = function flip$1(ir, axis) {\n    return flip$2(ir, axis);\n  };\n  var rotate$1 = function rotate$1(ir, angle) {\n    return rotate$2(ir, angle);\n  };\n  var sendRequest = function sendRequest(url, headers, withCredentials) {\n    if (withCredentials === void 0) {\n      withCredentials = false;\n    }\n    return new Promise$1(function (resolve) {\n      var xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          resolve({\n            status: xhr.status,\n            blob: xhr.response\n          });\n        }\n      };\n      xhr.open('GET', url, true);\n      xhr.withCredentials = withCredentials;\n      each(headers, function (value, key) {\n        xhr.setRequestHeader(key, value);\n      });\n      xhr.responseType = 'blob';\n      xhr.send();\n    });\n  };\n  var readBlobText = function readBlobText(blob) {\n    return new Promise$1(function (resolve, reject) {\n      var reader = new FileReader();\n      reader.onload = function () {\n        resolve(reader.result);\n      };\n      reader.onerror = function (e) {\n        reject(e);\n      };\n      reader.readAsText(blob);\n    });\n  };\n  var parseJson = function parseJson(text) {\n    try {\n      return Optional.some(JSON.parse(text));\n    } catch (ex) {\n      return Optional.none();\n    }\n  };\n  var friendlyHttpErrors = [{\n    code: 404,\n    message: 'Could not find Image Proxy'\n  }, {\n    code: 403,\n    message: 'Rejected request'\n  }, {\n    code: 0,\n    message: 'Incorrect Image Proxy URL'\n  }];\n  var friendlyServiceErrors = [{\n    type: 'not_found',\n    message: 'Failed to load image.'\n  }, {\n    type: 'key_missing',\n    message: 'The request did not include an api key.'\n  }, {\n    type: 'key_not_found',\n    message: 'The provided api key could not be found.'\n  }, {\n    type: 'domain_not_trusted',\n    message: 'The api key is not valid for the request origins.'\n  }];\n  var traverseJson = function traverseJson(json, path) {\n    var value = foldl(path, function (result, key) {\n      return isNonNullable(result) ? result[key] : undefined;\n    }, json);\n    return Optional.from(value);\n  };\n  var isServiceErrorCode = function isServiceErrorCode(code, blob) {\n    return (blob === null || blob === void 0 ? void 0 : blob.type) === 'application/json' && (code === 400 || code === 403 || code === 404 || code === 500);\n  };\n  var getHttpErrorMsg = function getHttpErrorMsg(status) {\n    var message = find(friendlyHttpErrors, function (error) {\n      return status === error.code;\n    }).fold(constant('Unknown ImageProxy error'), function (error) {\n      return error.message;\n    });\n    return 'ImageProxy HTTP error: ' + message;\n  };\n  var handleHttpError = function handleHttpError(status) {\n    var message = getHttpErrorMsg(status);\n    return Promise$1.reject(message);\n  };\n  var getServiceErrorMsg = function getServiceErrorMsg(type) {\n    return find(friendlyServiceErrors, function (error) {\n      return error.type === type;\n    }).fold(constant('Unknown service error'), function (error) {\n      return error.message;\n    });\n  };\n  var getServiceError = function getServiceError(text) {\n    var serviceError = parseJson(text);\n    var errorMsg = serviceError.bind(function (err) {\n      return traverseJson(err, ['error', 'type']).map(getServiceErrorMsg);\n    }).getOr('Invalid JSON in service error message');\n    return 'ImageProxy Service error: ' + errorMsg;\n  };\n  var handleServiceError = function handleServiceError(blob) {\n    return readBlobText(blob).then(function (text) {\n      var serviceError = getServiceError(text);\n      return Promise$1.reject(serviceError);\n    });\n  };\n  var handleServiceErrorResponse = function handleServiceErrorResponse(status, blob) {\n    return isServiceErrorCode(status, blob) ? handleServiceError(blob) : handleHttpError(status);\n  };\n  var appendApiKey = function appendApiKey(url, apiKey) {\n    var separator = url.indexOf('?') === -1 ? '?' : '&';\n    if (/[?&]apiKey=/.test(url)) {\n      return url;\n    } else {\n      return url + separator + 'apiKey=' + encodeURIComponent(apiKey);\n    }\n  };\n  var isError = function isError(status) {\n    return status < 200 || status >= 300;\n  };\n  var requestServiceBlob = function requestServiceBlob(url, apiKey) {\n    var headers = {\n      'Content-Type': 'application/json;charset=UTF-8',\n      'tiny-api-key': apiKey\n    };\n    return sendRequest(appendApiKey(url, apiKey), headers).then(function (result) {\n      return isError(result.status) ? handleServiceErrorResponse(result.status, result.blob) : Promise$1.resolve(result.blob);\n    });\n  };\n  var requestBlob = function requestBlob(url, withCredentials) {\n    return sendRequest(url, {}, withCredentials).then(function (result) {\n      return isError(result.status) ? handleHttpError(result.status) : Promise$1.resolve(result.blob);\n    });\n  };\n  var getUrl = function getUrl(url, apiKey, withCredentials) {\n    if (withCredentials === void 0) {\n      withCredentials = false;\n    }\n    return apiKey ? requestServiceBlob(url, apiKey) : requestBlob(url, withCredentials);\n  };\n  var blobToImageResult = function blobToImageResult(blob) {\n    return fromBlob(blob);\n  };\n  var ELEMENT = 1;\n  var fromHtml = function fromHtml(html, scope) {\n    var doc = scope || document;\n    var div = doc.createElement('div');\n    div.innerHTML = html;\n    if (!div.hasChildNodes() || div.childNodes.length > 1) {\n      console.error('HTML does not have a single root node', html);\n      throw new Error('HTML must have a single root node');\n    }\n    return fromDom(div.childNodes[0]);\n  };\n  var fromTag = function fromTag(tag, scope) {\n    var doc = scope || document;\n    var node = doc.createElement(tag);\n    return fromDom(node);\n  };\n  var fromText = function fromText(text, scope) {\n    var doc = scope || document;\n    var node = doc.createTextNode(text);\n    return fromDom(node);\n  };\n  var fromDom = function fromDom(node) {\n    if (node === null || node === undefined) {\n      throw new Error('Node cannot be null or undefined');\n    }\n    return {\n      dom: node\n    };\n  };\n  var fromPoint = function fromPoint(docElm, x, y) {\n    return Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n  };\n  var SugarElement = {\n    fromHtml: fromHtml,\n    fromTag: fromTag,\n    fromText: fromText,\n    fromDom: fromDom,\n    fromPoint: fromPoint\n  };\n  var is = function is(element, selector) {\n    var dom = element.dom;\n    if (dom.nodeType !== ELEMENT) {\n      return false;\n    } else {\n      var elem = dom;\n      if (elem.matches !== undefined) {\n        return elem.matches(selector);\n      } else if (elem.msMatchesSelector !== undefined) {\n        return elem.msMatchesSelector(selector);\n      } else if (elem.webkitMatchesSelector !== undefined) {\n        return elem.webkitMatchesSelector(selector);\n      } else if (elem.mozMatchesSelector !== undefined) {\n        return elem.mozMatchesSelector(selector);\n      } else {\n        throw new Error('Browser lacks native selectors');\n      }\n    }\n  };\n  typeof window !== 'undefined' ? window : Function('return this;')();\n  var child$1 = function child$1(scope, predicate) {\n    var pred = function pred(node) {\n      return predicate(SugarElement.fromDom(node));\n    };\n    var result = find(scope.dom.childNodes, pred);\n    return result.map(SugarElement.fromDom);\n  };\n  var child = function child(scope, selector) {\n    return child$1(scope, function (e) {\n      return is(e, selector);\n    });\n  };\n  var global$3 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n  var global$2 = tinymce.util.Tools.resolve('tinymce.util.Promise');\n  var global$1 = tinymce.util.Tools.resolve('tinymce.util.URI');\n  var getToolbarItems = function getToolbarItems(editor) {\n    return editor.getParam('imagetools_toolbar', 'rotateleft rotateright flipv fliph editimage imageoptions');\n  };\n  var getProxyUrl = function getProxyUrl(editor) {\n    return editor.getParam('imagetools_proxy');\n  };\n  var getCorsHosts = function getCorsHosts(editor) {\n    return editor.getParam('imagetools_cors_hosts', [], 'string[]');\n  };\n  var getCredentialsHosts = function getCredentialsHosts(editor) {\n    return editor.getParam('imagetools_credentials_hosts', [], 'string[]');\n  };\n  var getFetchImage = function getFetchImage(editor) {\n    return Optional.from(editor.getParam('imagetools_fetch_image', null, 'function'));\n  };\n  var getApiKey = function getApiKey(editor) {\n    return editor.getParam('api_key', editor.getParam('imagetools_api_key', '', 'string'), 'string');\n  };\n  var getUploadTimeout = function getUploadTimeout(editor) {\n    return editor.getParam('images_upload_timeout', 30000, 'number');\n  };\n  var shouldReuseFilename = function shouldReuseFilename(editor) {\n    return editor.getParam('images_reuse_filename', false, 'boolean');\n  };\n  var getImageSize = function getImageSize(img) {\n    var width, height;\n    var isPxValue = function isPxValue(value) {\n      return /^[0-9\\.]+px$/.test(value);\n    };\n    width = img.style.width;\n    height = img.style.height;\n    if (width || height) {\n      if (isPxValue(width) && isPxValue(height)) {\n        return {\n          w: parseInt(width, 10),\n          h: parseInt(height, 10)\n        };\n      }\n      return null;\n    }\n    width = img.width;\n    height = img.height;\n    if (width && height) {\n      return {\n        w: parseInt(width, 10),\n        h: parseInt(height, 10)\n      };\n    }\n    return null;\n  };\n  var setImageSize = function setImageSize(img, size) {\n    var width, height;\n    if (size) {\n      width = img.style.width;\n      height = img.style.height;\n      if (width || height) {\n        img.style.width = size.w + 'px';\n        img.style.height = size.h + 'px';\n        img.removeAttribute('data-mce-style');\n      }\n      width = img.width;\n      height = img.height;\n      if (width || height) {\n        img.setAttribute('width', String(size.w));\n        img.setAttribute('height', String(size.h));\n      }\n    }\n  };\n  var getNaturalImageSize = function getNaturalImageSize(img) {\n    return {\n      w: img.naturalWidth,\n      h: img.naturalHeight\n    };\n  };\n  var count = 0;\n  var getFigureImg = function getFigureImg(elem) {\n    return child(SugarElement.fromDom(elem), 'img');\n  };\n  var isFigure = function isFigure(editor, elem) {\n    return editor.dom.is(elem, 'figure');\n  };\n  var isImage = function isImage(editor, imgNode) {\n    return editor.dom.is(imgNode, 'img:not([data-mce-object],[data-mce-placeholder])');\n  };\n  var getEditableImage = function getEditableImage(editor, node) {\n    var isEditable = function isEditable(imgNode) {\n      return isImage(editor, imgNode) && (isLocalImage(editor, imgNode) || isCorsImage(editor, imgNode) || isNonNullable(getProxyUrl(editor)));\n    };\n    if (isFigure(editor, node)) {\n      return getFigureImg(node).bind(function (img) {\n        return isEditable(img.dom) ? Optional.some(img.dom) : Optional.none();\n      });\n    } else {\n      return isEditable(node) ? Optional.some(node) : Optional.none();\n    }\n  };\n  var displayError = function displayError(editor, error) {\n    editor.notificationManager.open({\n      text: error,\n      type: 'error'\n    });\n  };\n  var getSelectedImage = function getSelectedImage(editor) {\n    var elem = editor.selection.getNode();\n    var figureElm = editor.dom.getParent(elem, 'figure.image');\n    if (figureElm !== null && isFigure(editor, figureElm)) {\n      return getFigureImg(figureElm);\n    } else if (isImage(editor, elem)) {\n      return Optional.some(SugarElement.fromDom(elem));\n    } else {\n      return Optional.none();\n    }\n  };\n  var extractFilename = function extractFilename(editor, url, group) {\n    var m = url.match(/(?:\\/|^)(([^\\/\\?]+)\\.(?:[a-z0-9.]+))(?:\\?|$)/i);\n    return isNonNullable(m) ? editor.dom.encode(m[group]) : null;\n  };\n  var createId = function createId() {\n    return 'imagetools' + count++;\n  };\n  var isLocalImage = function isLocalImage(editor, img) {\n    var url = img.src;\n    return url.indexOf('data:') === 0 || url.indexOf('blob:') === 0 || new global$1(url).host === editor.documentBaseURI.host;\n  };\n  var isCorsImage = function isCorsImage(editor, img) {\n    return global$4.inArray(getCorsHosts(editor), new global$1(img.src).host) !== -1;\n  };\n  var isCorsWithCredentialsImage = function isCorsWithCredentialsImage(editor, img) {\n    return global$4.inArray(getCredentialsHosts(editor), new global$1(img.src).host) !== -1;\n  };\n  var defaultFetchImage = function defaultFetchImage(editor, img) {\n    if (isCorsImage(editor, img)) {\n      return getUrl(img.src, null, isCorsWithCredentialsImage(editor, img));\n    }\n    if (!isLocalImage(editor, img)) {\n      var proxyUrl = getProxyUrl(editor);\n      var src = proxyUrl + (proxyUrl.indexOf('?') === -1 ? '?' : '&') + 'url=' + encodeURIComponent(img.src);\n      var apiKey = getApiKey(editor);\n      return getUrl(src, apiKey, false);\n    }\n    return imageToBlob$1(img);\n  };\n  var imageToBlob = function imageToBlob(editor, img) {\n    return getFetchImage(editor).fold(function () {\n      return defaultFetchImage(editor, img);\n    }, function (customFetchImage) {\n      return customFetchImage(img);\n    });\n  };\n  var findBlob = function findBlob(editor, img) {\n    var blobInfo = editor.editorUpload.blobCache.getByUri(img.src);\n    if (blobInfo) {\n      return global$2.resolve(blobInfo.blob());\n    }\n    return imageToBlob(editor, img);\n  };\n  var startTimedUpload = function startTimedUpload(editor, imageUploadTimerState) {\n    var imageUploadTimer = global$3.setEditorTimeout(editor, function () {\n      editor.editorUpload.uploadImagesAuto();\n    }, getUploadTimeout(editor));\n    imageUploadTimerState.set(imageUploadTimer);\n  };\n  var cancelTimedUpload = function cancelTimedUpload(imageUploadTimerState) {\n    global$3.clearTimeout(imageUploadTimerState.get());\n  };\n  var updateSelectedImage = function updateSelectedImage(editor, origBlob, ir, uploadImmediately, imageUploadTimerState, selectedImage, size) {\n    return ir.toBlob().then(function (blob) {\n      var uri, name, filename, blobInfo;\n      var blobCache = editor.editorUpload.blobCache;\n      uri = selectedImage.src;\n      var useFilename = origBlob.type === blob.type;\n      if (shouldReuseFilename(editor)) {\n        blobInfo = blobCache.getByUri(uri);\n        if (isNonNullable(blobInfo)) {\n          uri = blobInfo.uri();\n          name = blobInfo.name();\n          filename = blobInfo.filename();\n        } else {\n          name = extractFilename(editor, uri, 2);\n          filename = extractFilename(editor, uri, 1);\n        }\n      }\n      blobInfo = blobCache.create({\n        id: createId(),\n        blob: blob,\n        base64: ir.toBase64(),\n        uri: uri,\n        name: name,\n        filename: useFilename ? filename : undefined\n      });\n      blobCache.add(blobInfo);\n      editor.undoManager.transact(function () {\n        var imageLoadedHandler = function imageLoadedHandler() {\n          editor.$(selectedImage).off('load', imageLoadedHandler);\n          editor.nodeChanged();\n          if (uploadImmediately) {\n            editor.editorUpload.uploadImagesAuto();\n          } else {\n            cancelTimedUpload(imageUploadTimerState);\n            startTimedUpload(editor, imageUploadTimerState);\n          }\n        };\n        editor.$(selectedImage).on('load', imageLoadedHandler);\n        if (size) {\n          editor.$(selectedImage).attr({\n            width: size.w,\n            height: size.h\n          });\n        }\n        editor.$(selectedImage).attr({\n          src: blobInfo.blobUri()\n        }).removeAttr('data-mce-src');\n      });\n      return blobInfo;\n    });\n  };\n  var selectedImageOperation = function selectedImageOperation(editor, imageUploadTimerState, fn, size) {\n    return function () {\n      var imgOpt = getSelectedImage(editor);\n      return imgOpt.fold(function () {\n        displayError(editor, 'Could not find selected image');\n      }, function (img) {\n        return editor._scanForImages().then(function () {\n          return findBlob(editor, img.dom);\n        }).then(function (blob) {\n          return blobToImageResult(blob).then(fn).then(function (imageResult) {\n            return updateSelectedImage(editor, blob, imageResult, false, imageUploadTimerState, img.dom, size);\n          });\n        })[\"catch\"](function (error) {\n          displayError(editor, error);\n        });\n      });\n    };\n  };\n  var rotate = function rotate(editor, imageUploadTimerState, angle) {\n    return function () {\n      var imgOpt = getSelectedImage(editor);\n      var flippedSize = imgOpt.map(function (img) {\n        var size = getImageSize(img.dom);\n        return size ? {\n          w: size.h,\n          h: size.w\n        } : null;\n      }).getOrNull();\n      return selectedImageOperation(editor, imageUploadTimerState, function (imageResult) {\n        return rotate$1(imageResult, angle);\n      }, flippedSize)();\n    };\n  };\n  var flip = function flip(editor, imageUploadTimerState, axis) {\n    return function () {\n      return selectedImageOperation(editor, imageUploadTimerState, function (imageResult) {\n        return flip$1(imageResult, axis);\n      })();\n    };\n  };\n  var handleDialogBlob = function handleDialogBlob(editor, imageUploadTimerState, img, originalSize, blob) {\n    return blobToImage(blob).then(function (newImage) {\n      var newSize = getNaturalImageSize(newImage);\n      if (originalSize.w !== newSize.w || originalSize.h !== newSize.h) {\n        if (getImageSize(img)) {\n          setImageSize(img, newSize);\n        }\n      }\n      URL.revokeObjectURL(newImage.src);\n      return blob;\n    }).then(blobToImageResult).then(function (imageResult) {\n      return updateSelectedImage(editor, blob, imageResult, true, imageUploadTimerState, img);\n    });\n  };\n  var saveState = 'save-state';\n  var disable = 'disable';\n  var enable = 'enable';\n  var createState = function createState(blob) {\n    return {\n      blob: blob,\n      url: URL.createObjectURL(blob)\n    };\n  };\n  var makeOpen = function makeOpen(editor, imageUploadTimerState) {\n    return function () {\n      var getLoadedSpec = function getLoadedSpec(currentState) {\n        return {\n          title: 'Edit Image',\n          size: 'large',\n          body: {\n            type: 'panel',\n            items: [{\n              type: 'imagetools',\n              name: 'imagetools',\n              label: 'Edit Image',\n              currentState: currentState\n            }]\n          },\n          buttons: [{\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          }, {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true,\n            disabled: true\n          }],\n          onSubmit: function onSubmit(api) {\n            var blob = api.getData().imagetools.blob;\n            originalImgOpt.each(function (originalImg) {\n              originalSizeOpt.each(function (originalSize) {\n                handleDialogBlob(editor, imageUploadTimerState, originalImg.dom, originalSize, blob);\n              });\n            });\n            api.close();\n          },\n          onCancel: noop,\n          onAction: function onAction(api, details) {\n            switch (details.name) {\n              case saveState:\n                if (details.value) {\n                  api.enable('save');\n                } else {\n                  api.disable('save');\n                }\n                break;\n              case disable:\n                api.disable('save');\n                api.disable('cancel');\n                break;\n              case enable:\n                api.enable('cancel');\n                break;\n            }\n          }\n        };\n      };\n      var originalImgOpt = getSelectedImage(editor);\n      var originalSizeOpt = originalImgOpt.map(function (origImg) {\n        return getNaturalImageSize(origImg.dom);\n      });\n      originalImgOpt.each(function (img) {\n        getEditableImage(editor, img.dom).each(function (_) {\n          findBlob(editor, img.dom).then(function (blob) {\n            var state = createState(blob);\n            editor.windowManager.open(getLoadedSpec(state));\n          });\n        });\n      });\n    };\n  };\n  var register$2 = function register$2(editor, imageUploadTimerState) {\n    global$4.each({\n      mceImageRotateLeft: rotate(editor, imageUploadTimerState, -90),\n      mceImageRotateRight: rotate(editor, imageUploadTimerState, 90),\n      mceImageFlipVertical: flip(editor, imageUploadTimerState, 'v'),\n      mceImageFlipHorizontal: flip(editor, imageUploadTimerState, 'h'),\n      mceEditImage: makeOpen(editor, imageUploadTimerState)\n    }, function (fn, cmd) {\n      editor.addCommand(cmd, fn);\n    });\n  };\n  var setup = function setup(editor, imageUploadTimerState, lastSelectedImageState) {\n    editor.on('NodeChange', function (e) {\n      var lastSelectedImage = lastSelectedImageState.get();\n      var selectedImage = getEditableImage(editor, e.element);\n      if (lastSelectedImage && !selectedImage.exists(function (img) {\n        return lastSelectedImage.src === img.src;\n      })) {\n        cancelTimedUpload(imageUploadTimerState);\n        editor.editorUpload.uploadImagesAuto();\n        lastSelectedImageState.set(null);\n      }\n      selectedImage.each(lastSelectedImageState.set);\n    });\n  };\n  var register$1 = function register$1(editor) {\n    var changeHandlers = [];\n    var cmd = function cmd(command) {\n      return function () {\n        return editor.execCommand(command);\n      };\n    };\n    var isEditableImage = function isEditableImage() {\n      return getSelectedImage(editor).exists(function (element) {\n        return getEditableImage(editor, element.dom).isSome();\n      });\n    };\n    var onSetup = function onSetup(api) {\n      var handler = function handler(isEditableImage) {\n        return api.setDisabled(!isEditableImage);\n      };\n      handler(isEditableImage());\n      changeHandlers = changeHandlers.concat([handler]);\n      return function () {\n        changeHandlers = filter(changeHandlers, function (h) {\n          return h !== handler;\n        });\n      };\n    };\n    editor.on('NodeChange', function () {\n      var isEditable = isEditableImage();\n      each$1(changeHandlers, function (handler) {\n        return handler(isEditable);\n      });\n    });\n    editor.ui.registry.addButton('rotateleft', {\n      tooltip: 'Rotate counterclockwise',\n      icon: 'rotate-left',\n      onAction: cmd('mceImageRotateLeft'),\n      onSetup: onSetup\n    });\n    editor.ui.registry.addButton('rotateright', {\n      tooltip: 'Rotate clockwise',\n      icon: 'rotate-right',\n      onAction: cmd('mceImageRotateRight'),\n      onSetup: onSetup\n    });\n    editor.ui.registry.addButton('flipv', {\n      tooltip: 'Flip vertically',\n      icon: 'flip-vertically',\n      onAction: cmd('mceImageFlipVertical'),\n      onSetup: onSetup\n    });\n    editor.ui.registry.addButton('fliph', {\n      tooltip: 'Flip horizontally',\n      icon: 'flip-horizontally',\n      onAction: cmd('mceImageFlipHorizontal'),\n      onSetup: onSetup\n    });\n    editor.ui.registry.addButton('editimage', {\n      tooltip: 'Edit image',\n      icon: 'edit-image',\n      onAction: cmd('mceEditImage'),\n      onSetup: onSetup\n    });\n    editor.ui.registry.addButton('imageoptions', {\n      tooltip: 'Image options',\n      icon: 'image',\n      onAction: cmd('mceImage')\n    });\n    editor.ui.registry.addContextMenu('imagetools', {\n      update: function update(element) {\n        return getEditableImage(editor, element).map(function (_) {\n          return {\n            text: 'Edit image',\n            icon: 'edit-image',\n            onAction: cmd('mceEditImage')\n          };\n        }).toArray();\n      }\n    });\n  };\n  var register = function register(editor) {\n    editor.ui.registry.addContextToolbar('imagetools', {\n      items: getToolbarItems(editor),\n      predicate: function predicate(elem) {\n        return getEditableImage(editor, elem).isSome();\n      },\n      position: 'node',\n      scope: 'node'\n    });\n  };\n  function Plugin() {\n    global$5.add('imagetools', function (editor) {\n      var imageUploadTimerState = Cell(0);\n      var lastSelectedImageState = Cell(null);\n      register$2(editor, imageUploadTimerState);\n      register$1(editor);\n      register(editor);\n      setup(editor, imageUploadTimerState, lastSelectedImageState);\n    });\n  }\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/imagetools/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/imagetools/index.js");
/******/ 	
/******/ })()
;