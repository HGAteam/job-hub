/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/emoticons/index.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/emoticons/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"emoticons\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/emoticons')\n//   ES2015:\n//     import 'tinymce/plugins/emoticons'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/emoticons/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL2Vtb3RpY29ucy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsbUJBQU8sQ0FBQywrRkFBYSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL3BsdWdpbnMvY3VzdG9tL3RpbnltY2UvcGx1Z2lucy9lbW90aWNvbnMvaW5kZXguanM/YzQ2NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFeHBvcnRzIHRoZSBcImVtb3RpY29uc1wiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy9lbW90aWNvbnMnKVxyXG4vLyAgIEVTMjAxNTpcclxuLy8gICAgIGltcG9ydCAndGlueW1jZS9wbHVnaW5zL2Vtb3RpY29ucydcclxucmVxdWlyZSgnLi9wbHVnaW4uanMnKTsiXSwibmFtZXMiOlsicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/emoticons/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/emoticons/plugin.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/emoticons/plugin.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.7 (2022-12-06)\r\n */\n(function () {\n  'use strict';\n\n  var global$3 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n  var eq = function eq(t) {\n    return function (a) {\n      return t === a;\n    };\n  };\n  var isNull = eq(null);\n  var noop = function noop() {};\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n  var identity = function identity(x) {\n    return x;\n  };\n  var never = constant(false);\n  var always = constant(true);\n  var none = function none() {\n    return NONE;\n  };\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n  var some = function some(a) {\n    var constant_a = constant(a);\n    var self = function self() {\n      return me;\n    };\n    var bind = function bind(f) {\n      return f(a);\n    };\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var exists = function exists(xs, pred) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      if (pred(x, i)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  var map$1 = function map$1(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n    return r;\n  };\n  var each$1 = function each$1(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n  var Cell = function Cell(initial) {\n    var value = initial;\n    var get = function get() {\n      return value;\n    };\n    var set = function set(v) {\n      value = v;\n    };\n    return {\n      get: get,\n      set: set\n    };\n  };\n  var last = function last(fn, rate) {\n    var timer = null;\n    var cancel = function cancel() {\n      if (!isNull(timer)) {\n        clearTimeout(timer);\n        timer = null;\n      }\n    };\n    var throttle = function throttle() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      cancel();\n      timer = setTimeout(function () {\n        timer = null;\n        fn.apply(null, args);\n      }, rate);\n    };\n    return {\n      cancel: cancel,\n      throttle: throttle\n    };\n  };\n  var insertEmoticon = function insertEmoticon(editor, ch) {\n    editor.insertContent(ch);\n  };\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n    };\n    return _assign.apply(this, arguments);\n  };\n  var keys = Object.keys;\n  var hasOwnProperty = Object.hasOwnProperty;\n  var each = function each(obj, f) {\n    var props = keys(obj);\n    for (var k = 0, len = props.length; k < len; k++) {\n      var i = props[k];\n      var x = obj[i];\n      f(x, i);\n    }\n  };\n  var map = function map(obj, f) {\n    return tupleMap(obj, function (x, i) {\n      return {\n        k: i,\n        v: f(x, i)\n      };\n    });\n  };\n  var tupleMap = function tupleMap(obj, f) {\n    var r = {};\n    each(obj, function (x, i) {\n      var tuple = f(x, i);\n      r[tuple.k] = tuple.v;\n    });\n    return r;\n  };\n  var has = function has(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n  var shallow = function shallow(old, nu) {\n    return nu;\n  };\n  var baseMerge = function baseMerge(merger) {\n    return function () {\n      var objects = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        objects[_i] = arguments[_i];\n      }\n      if (objects.length === 0) {\n        throw new Error('Can\\'t merge zero objects');\n      }\n      var ret = {};\n      for (var j = 0; j < objects.length; j++) {\n        var curObject = objects[j];\n        for (var key in curObject) {\n          if (has(curObject, key)) {\n            ret[key] = merger(ret[key], curObject[key]);\n          }\n        }\n      }\n      return ret;\n    };\n  };\n  var merge = baseMerge(shallow);\n  var singleton = function singleton(doRevoke) {\n    var subject = Cell(Optional.none());\n    var revoke = function revoke() {\n      return subject.get().each(doRevoke);\n    };\n    var clear = function clear() {\n      revoke();\n      subject.set(Optional.none());\n    };\n    var isSet = function isSet() {\n      return subject.get().isSome();\n    };\n    var get = function get() {\n      return subject.get();\n    };\n    var set = function set(s) {\n      revoke();\n      subject.set(Optional.some(s));\n    };\n    return {\n      clear: clear,\n      isSet: isSet,\n      get: get,\n      set: set\n    };\n  };\n  var value = function value() {\n    var subject = singleton(noop);\n    var on = function on(f) {\n      return subject.get().each(f);\n    };\n    return _assign(_assign({}, subject), {\n      on: on\n    });\n  };\n  var checkRange = function checkRange(str, substr, start) {\n    return substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n  };\n  var contains = function contains(str, substr) {\n    return str.indexOf(substr) !== -1;\n  };\n  var startsWith = function startsWith(str, prefix) {\n    return checkRange(str, prefix, 0);\n  };\n  var global$2 = tinymce.util.Tools.resolve('tinymce.Resource');\n  var global$1 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n  var global = tinymce.util.Tools.resolve('tinymce.util.Promise');\n  var DEFAULT_ID = 'tinymce.plugins.emoticons';\n  var getEmoticonDatabase = function getEmoticonDatabase(editor) {\n    return editor.getParam('emoticons_database', 'emojis', 'string');\n  };\n  var getEmoticonDatabaseUrl = function getEmoticonDatabaseUrl(editor, pluginUrl) {\n    var database = getEmoticonDatabase(editor);\n    return editor.getParam('emoticons_database_url', pluginUrl + '/js/' + database + editor.suffix + '.js', 'string');\n  };\n  var getEmoticonDatabaseId = function getEmoticonDatabaseId(editor) {\n    return editor.getParam('emoticons_database_id', DEFAULT_ID, 'string');\n  };\n  var getAppendedEmoticons = function getAppendedEmoticons(editor) {\n    return editor.getParam('emoticons_append', {}, 'object');\n  };\n  var getEmotionsImageUrl = function getEmotionsImageUrl(editor) {\n    return editor.getParam('emoticons_images_url', 'https://twemoji.maxcdn.com/v/13.0.1/72x72/', 'string');\n  };\n  var ALL_CATEGORY = 'All';\n  var categoryNameMap = {\n    symbols: 'Symbols',\n    people: 'People',\n    animals_and_nature: 'Animals and Nature',\n    food_and_drink: 'Food and Drink',\n    activity: 'Activity',\n    travel_and_places: 'Travel and Places',\n    objects: 'Objects',\n    flags: 'Flags',\n    user: 'User Defined'\n  };\n  var translateCategory = function translateCategory(categories, name) {\n    return has(categories, name) ? categories[name] : name;\n  };\n  var getUserDefinedEmoticons = function getUserDefinedEmoticons(editor) {\n    var userDefinedEmoticons = getAppendedEmoticons(editor);\n    return map(userDefinedEmoticons, function (value) {\n      return _assign({\n        keywords: [],\n        category: 'user'\n      }, value);\n    });\n  };\n  var initDatabase = function initDatabase(editor, databaseUrl, databaseId) {\n    var categories = value();\n    var all = value();\n    var emojiImagesUrl = getEmotionsImageUrl(editor);\n    var getEmoji = function getEmoji(lib) {\n      if (startsWith(lib[\"char\"], '<img')) {\n        return lib[\"char\"].replace(/src=\"([^\"]+)\"/, function (match, url) {\n          return 'src=\"' + emojiImagesUrl + url + '\"';\n        });\n      } else {\n        return lib[\"char\"];\n      }\n    };\n    var processEmojis = function processEmojis(emojis) {\n      var cats = {};\n      var everything = [];\n      each(emojis, function (lib, title) {\n        var entry = {\n          title: title,\n          keywords: lib.keywords,\n          \"char\": getEmoji(lib),\n          category: translateCategory(categoryNameMap, lib.category)\n        };\n        var current = cats[entry.category] !== undefined ? cats[entry.category] : [];\n        cats[entry.category] = current.concat([entry]);\n        everything.push(entry);\n      });\n      categories.set(cats);\n      all.set(everything);\n    };\n    editor.on('init', function () {\n      global$2.load(databaseId, databaseUrl).then(function (emojis) {\n        var userEmojis = getUserDefinedEmoticons(editor);\n        processEmojis(merge(emojis, userEmojis));\n      }, function (err) {\n        console.log('Failed to load emoticons: ' + err);\n        categories.set({});\n        all.set([]);\n      });\n    });\n    var listCategory = function listCategory(category) {\n      if (category === ALL_CATEGORY) {\n        return listAll();\n      }\n      return categories.get().bind(function (cats) {\n        return Optional.from(cats[category]);\n      }).getOr([]);\n    };\n    var listAll = function listAll() {\n      return all.get().getOr([]);\n    };\n    var listCategories = function listCategories() {\n      return [ALL_CATEGORY].concat(keys(categories.get().getOr({})));\n    };\n    var waitForLoad = function waitForLoad() {\n      if (hasLoaded()) {\n        return global.resolve(true);\n      } else {\n        return new global(function (resolve, reject) {\n          var numRetries = 15;\n          var interval = global$1.setInterval(function () {\n            if (hasLoaded()) {\n              global$1.clearInterval(interval);\n              resolve(true);\n            } else {\n              numRetries--;\n              if (numRetries < 0) {\n                console.log('Could not load emojis from url: ' + databaseUrl);\n                global$1.clearInterval(interval);\n                reject(false);\n              }\n            }\n          }, 100);\n        });\n      }\n    };\n    var hasLoaded = function hasLoaded() {\n      return categories.isSet() && all.isSet();\n    };\n    return {\n      listCategories: listCategories,\n      hasLoaded: hasLoaded,\n      waitForLoad: waitForLoad,\n      listAll: listAll,\n      listCategory: listCategory\n    };\n  };\n  var emojiMatches = function emojiMatches(emoji, lowerCasePattern) {\n    return contains(emoji.title.toLowerCase(), lowerCasePattern) || exists(emoji.keywords, function (k) {\n      return contains(k.toLowerCase(), lowerCasePattern);\n    });\n  };\n  var emojisFrom = function emojisFrom(list, pattern, maxResults) {\n    var matches = [];\n    var lowerCasePattern = pattern.toLowerCase();\n    var reachedLimit = maxResults.fold(function () {\n      return never;\n    }, function (max) {\n      return function (size) {\n        return size >= max;\n      };\n    });\n    for (var i = 0; i < list.length; i++) {\n      if (pattern.length === 0 || emojiMatches(list[i], lowerCasePattern)) {\n        matches.push({\n          value: list[i][\"char\"],\n          text: list[i].title,\n          icon: list[i][\"char\"]\n        });\n        if (reachedLimit(matches.length)) {\n          break;\n        }\n      }\n    }\n    return matches;\n  };\n  var patternName = 'pattern';\n  var open = function open(editor, database) {\n    var initialState = {\n      pattern: '',\n      results: emojisFrom(database.listAll(), '', Optional.some(300))\n    };\n    var currentTab = Cell(ALL_CATEGORY);\n    var scan = function scan(dialogApi) {\n      var dialogData = dialogApi.getData();\n      var category = currentTab.get();\n      var candidates = database.listCategory(category);\n      var results = emojisFrom(candidates, dialogData[patternName], category === ALL_CATEGORY ? Optional.some(300) : Optional.none());\n      dialogApi.setData({\n        results: results\n      });\n    };\n    var updateFilter = last(function (dialogApi) {\n      scan(dialogApi);\n    }, 200);\n    var searchField = {\n      label: 'Search',\n      type: 'input',\n      name: patternName\n    };\n    var resultsField = {\n      type: 'collection',\n      name: 'results'\n    };\n    var getInitialState = function getInitialState() {\n      var body = {\n        type: 'tabpanel',\n        tabs: map$1(database.listCategories(), function (cat) {\n          return {\n            title: cat,\n            name: cat,\n            items: [searchField, resultsField]\n          };\n        })\n      };\n      return {\n        title: 'Emoticons',\n        size: 'normal',\n        body: body,\n        initialData: initialState,\n        onTabChange: function onTabChange(dialogApi, details) {\n          currentTab.set(details.newTabName);\n          updateFilter.throttle(dialogApi);\n        },\n        onChange: updateFilter.throttle,\n        onAction: function onAction(dialogApi, actionData) {\n          if (actionData.name === 'results') {\n            insertEmoticon(editor, actionData.value);\n            dialogApi.close();\n          }\n        },\n        buttons: [{\n          type: 'cancel',\n          text: 'Close',\n          primary: true\n        }]\n      };\n    };\n    var dialogApi = editor.windowManager.open(getInitialState());\n    dialogApi.focus(patternName);\n    if (!database.hasLoaded()) {\n      dialogApi.block('Loading emoticons...');\n      database.waitForLoad().then(function () {\n        dialogApi.redial(getInitialState());\n        updateFilter.throttle(dialogApi);\n        dialogApi.focus(patternName);\n        dialogApi.unblock();\n      })[\"catch\"](function (_err) {\n        dialogApi.redial({\n          title: 'Emoticons',\n          body: {\n            type: 'panel',\n            items: [{\n              type: 'alertbanner',\n              level: 'error',\n              icon: 'warning',\n              text: '<p>Could not load emoticons</p>'\n            }]\n          },\n          buttons: [{\n            type: 'cancel',\n            text: 'Close',\n            primary: true\n          }],\n          initialData: {\n            pattern: '',\n            results: []\n          }\n        });\n        dialogApi.focus(patternName);\n        dialogApi.unblock();\n      });\n    }\n  };\n  var register$1 = function register$1(editor, database) {\n    editor.addCommand('mceEmoticons', function () {\n      return open(editor, database);\n    });\n  };\n  var setup = function setup(editor) {\n    editor.on('PreInit', function () {\n      editor.parser.addAttributeFilter('data-emoticon', function (nodes) {\n        each$1(nodes, function (node) {\n          node.attr('data-mce-resize', 'false');\n          node.attr('data-mce-placeholder', '1');\n        });\n      });\n    });\n  };\n  var init = function init(editor, database) {\n    editor.ui.registry.addAutocompleter('emoticons', {\n      ch: ':',\n      columns: 'auto',\n      minChars: 2,\n      fetch: function fetch(pattern, maxResults) {\n        return database.waitForLoad().then(function () {\n          var candidates = database.listAll();\n          return emojisFrom(candidates, pattern, Optional.some(maxResults));\n        });\n      },\n      onAction: function onAction(autocompleteApi, rng, value) {\n        editor.selection.setRng(rng);\n        editor.insertContent(value);\n        autocompleteApi.hide();\n      }\n    });\n  };\n  var register = function register(editor) {\n    var onAction = function onAction() {\n      return editor.execCommand('mceEmoticons');\n    };\n    editor.ui.registry.addButton('emoticons', {\n      tooltip: 'Emoticons',\n      icon: 'emoji',\n      onAction: onAction\n    });\n    editor.ui.registry.addMenuItem('emoticons', {\n      text: 'Emoticons...',\n      icon: 'emoji',\n      onAction: onAction\n    });\n  };\n  function Plugin() {\n    global$3.add('emoticons', function (editor, pluginUrl) {\n      var databaseUrl = getEmoticonDatabaseUrl(editor, pluginUrl);\n      var databaseId = getEmoticonDatabaseId(editor);\n      var database = initDatabase(editor, databaseUrl, databaseId);\n      register$1(editor, database);\n      register(editor);\n      init(editor, database);\n      setup(editor);\n    });\n  }\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/emoticons/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/emoticons/index.js");
/******/ 	
/******/ })()
;