/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/spellchecker/index.js":
/*!************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/spellchecker/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"spellchecker\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/spellchecker')\n//   ES2015:\n//     import 'tinymce/plugins/spellchecker'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/spellchecker/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL3NwZWxsY2hlY2tlci9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsbUJBQU8sQ0FBQyxrR0FBYSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL3BsdWdpbnMvY3VzdG9tL3RpbnltY2UvcGx1Z2lucy9zcGVsbGNoZWNrZXIvaW5kZXguanM/NGIyZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFeHBvcnRzIHRoZSBcInNwZWxsY2hlY2tlclwiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy9zcGVsbGNoZWNrZXInKVxyXG4vLyAgIEVTMjAxNTpcclxuLy8gICAgIGltcG9ydCAndGlueW1jZS9wbHVnaW5zL3NwZWxsY2hlY2tlcidcclxucmVxdWlyZSgnLi9wbHVnaW4uanMnKTsiXSwibmFtZXMiOlsicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/spellchecker/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/spellchecker/plugin.js":
/*!*************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/spellchecker/plugin.js ***!
  \*************************************************************************************/
/***/ (() => {

eval("/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.7 (2022-12-06)\r\n */\n(function () {\n  'use strict';\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n    var get = function get() {\n      return value;\n    };\n    var set = function set(v) {\n      value = v;\n    };\n    return {\n      get: get,\n      set: set\n    };\n  };\n  var global$3 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n  var hasProPlugin = function hasProPlugin(editor) {\n    if (editor.hasPlugin('tinymcespellchecker', true)) {\n      if (typeof window.console !== 'undefined' && window.console.log) {\n        window.console.log('Spell Checker Pro is incompatible with Spell Checker plugin! ' + 'Remove \\'spellchecker\\' from the \\'plugins\\' option.');\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n  var hasOwnProperty = Object.hasOwnProperty;\n  var isEmpty = function isEmpty(r) {\n    for (var x in r) {\n      if (hasOwnProperty.call(r, x)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n  var global$1 = tinymce.util.Tools.resolve('tinymce.util.URI');\n  var global = tinymce.util.Tools.resolve('tinymce.util.XHR');\n  var fireSpellcheckStart = function fireSpellcheckStart(editor) {\n    return editor.fire('SpellcheckStart');\n  };\n  var fireSpellcheckEnd = function fireSpellcheckEnd(editor) {\n    return editor.fire('SpellcheckEnd');\n  };\n  var getLanguages = function getLanguages(editor) {\n    var defaultLanguages = 'English=en,Danish=da,Dutch=nl,Finnish=fi,French=fr_FR,German=de,Italian=it,Polish=pl,Portuguese=pt_BR,Spanish=es,Swedish=sv';\n    return editor.getParam('spellchecker_languages', defaultLanguages);\n  };\n  var getLanguage = function getLanguage(editor) {\n    var defaultLanguage = editor.getParam('language', 'en');\n    return editor.getParam('spellchecker_language', defaultLanguage);\n  };\n  var getRpcUrl = function getRpcUrl(editor) {\n    return editor.getParam('spellchecker_rpc_url');\n  };\n  var getSpellcheckerCallback = function getSpellcheckerCallback(editor) {\n    return editor.getParam('spellchecker_callback');\n  };\n  var getSpellcheckerWordcharPattern = function getSpellcheckerWordcharPattern(editor) {\n    var defaultPattern = new RegExp('[^' + '\\\\s!\"#$%&()*+,-./:;<=>?@[\\\\]^_{|}`' + '\\xA7\\xA9\\xAB\\xAE\\xB1\\xB6\\xB7\\xB8\\xBB' + \"\\xBC\\xBD\\xBE\\xBF\\xD7\\xF7\\xA4\\u201D\\u201C\\u201E\\xA0\\u2002\\u2003\\u2009\" + ']+', 'g');\n    return editor.getParam('spellchecker_wordchar_pattern', defaultPattern);\n  };\n  var isContentEditableFalse = function isContentEditableFalse(node) {\n    return node && node.nodeType === 1 && node.contentEditable === 'false';\n  };\n  var DomTextMatcher = function DomTextMatcher(node, editor) {\n    var m,\n      matches = [];\n    var dom = editor.dom;\n    var blockElementsMap = editor.schema.getBlockElements();\n    var hiddenTextElementsMap = editor.schema.getWhiteSpaceElements();\n    var shortEndedElementsMap = editor.schema.getShortEndedElements();\n    var createMatch = function createMatch(m, data) {\n      if (!m[0]) {\n        throw new Error('findAndReplaceDOMText cannot handle zero-length matches');\n      }\n      return {\n        start: m.index,\n        end: m.index + m[0].length,\n        text: m[0],\n        data: data\n      };\n    };\n    var getText = function getText(node) {\n      if (node.nodeType === 3) {\n        return node.data;\n      }\n      if (hiddenTextElementsMap[node.nodeName] && !blockElementsMap[node.nodeName]) {\n        return '';\n      }\n      if (isContentEditableFalse(node)) {\n        return '\\n';\n      }\n      var txt = '';\n      if (blockElementsMap[node.nodeName] || shortEndedElementsMap[node.nodeName]) {\n        txt += '\\n';\n      }\n      if (node = node.firstChild) {\n        do {\n          txt += getText(node);\n        } while (node = node.nextSibling);\n      }\n      return txt;\n    };\n    var stepThroughMatches = function stepThroughMatches(node, matches, replaceFn) {\n      var startNode,\n        endNode,\n        startNodeIndex,\n        endNodeIndex,\n        innerNodes = [],\n        atIndex = 0,\n        curNode = node,\n        matchLocation,\n        matchIndex = 0;\n      matches = matches.slice(0);\n      matches.sort(function (a, b) {\n        return a.start - b.start;\n      });\n      matchLocation = matches.shift();\n      out: while (true) {\n        if (blockElementsMap[curNode.nodeName] || shortEndedElementsMap[curNode.nodeName] || isContentEditableFalse(curNode)) {\n          atIndex++;\n        }\n        if (curNode.nodeType === 3) {\n          if (!endNode && curNode.length + atIndex >= matchLocation.end) {\n            endNode = curNode;\n            endNodeIndex = matchLocation.end - atIndex;\n          } else if (startNode) {\n            innerNodes.push(curNode);\n          }\n          if (!startNode && curNode.length + atIndex > matchLocation.start) {\n            startNode = curNode;\n            startNodeIndex = matchLocation.start - atIndex;\n          }\n          atIndex += curNode.length;\n        }\n        if (startNode && endNode) {\n          curNode = replaceFn({\n            startNode: startNode,\n            startNodeIndex: startNodeIndex,\n            endNode: endNode,\n            endNodeIndex: endNodeIndex,\n            innerNodes: innerNodes,\n            match: matchLocation.text,\n            matchIndex: matchIndex\n          });\n          atIndex -= endNode.length - endNodeIndex;\n          startNode = null;\n          endNode = null;\n          innerNodes = [];\n          matchLocation = matches.shift();\n          matchIndex++;\n          if (!matchLocation) {\n            break;\n          }\n        } else if ((!hiddenTextElementsMap[curNode.nodeName] || blockElementsMap[curNode.nodeName]) && curNode.firstChild) {\n          if (!isContentEditableFalse(curNode)) {\n            curNode = curNode.firstChild;\n            continue;\n          }\n        } else if (curNode.nextSibling) {\n          curNode = curNode.nextSibling;\n          continue;\n        }\n        while (true) {\n          if (curNode.nextSibling) {\n            curNode = curNode.nextSibling;\n            break;\n          } else if (curNode.parentNode !== node) {\n            curNode = curNode.parentNode;\n          } else {\n            break out;\n          }\n        }\n      }\n    };\n    var genReplacer = function genReplacer(callback) {\n      var makeReplacementNode = function makeReplacementNode(fill, matchIndex) {\n        var match = matches[matchIndex];\n        if (!match.stencil) {\n          match.stencil = callback(match);\n        }\n        var clone = match.stencil.cloneNode(false);\n        clone.setAttribute('data-mce-index', '' + matchIndex);\n        if (fill) {\n          clone.appendChild(dom.doc.createTextNode(fill));\n        }\n        return clone;\n      };\n      return function (range) {\n        var before;\n        var after;\n        var parentNode;\n        var startNode = range.startNode;\n        var endNode = range.endNode;\n        var matchIndex = range.matchIndex;\n        var doc = dom.doc;\n        if (startNode === endNode) {\n          var node_1 = startNode;\n          parentNode = node_1.parentNode;\n          if (range.startNodeIndex > 0) {\n            before = doc.createTextNode(node_1.data.substring(0, range.startNodeIndex));\n            parentNode.insertBefore(before, node_1);\n          }\n          var el = makeReplacementNode(range.match, matchIndex);\n          parentNode.insertBefore(el, node_1);\n          if (range.endNodeIndex < node_1.length) {\n            after = doc.createTextNode(node_1.data.substring(range.endNodeIndex));\n            parentNode.insertBefore(after, node_1);\n          }\n          node_1.parentNode.removeChild(node_1);\n          return el;\n        }\n        before = doc.createTextNode(startNode.data.substring(0, range.startNodeIndex));\n        after = doc.createTextNode(endNode.data.substring(range.endNodeIndex));\n        var elA = makeReplacementNode(startNode.data.substring(range.startNodeIndex), matchIndex);\n        for (var i = 0, l = range.innerNodes.length; i < l; ++i) {\n          var innerNode = range.innerNodes[i];\n          var innerEl = makeReplacementNode(innerNode.data, matchIndex);\n          innerNode.parentNode.replaceChild(innerEl, innerNode);\n        }\n        var elB = makeReplacementNode(endNode.data.substring(0, range.endNodeIndex), matchIndex);\n        parentNode = startNode.parentNode;\n        parentNode.insertBefore(before, startNode);\n        parentNode.insertBefore(elA, startNode);\n        parentNode.removeChild(startNode);\n        parentNode = endNode.parentNode;\n        parentNode.insertBefore(elB, endNode);\n        parentNode.insertBefore(after, endNode);\n        parentNode.removeChild(endNode);\n        return elB;\n      };\n    };\n    var unwrapElement = function unwrapElement(element) {\n      var parentNode = element.parentNode;\n      while (element.childNodes.length > 0) {\n        parentNode.insertBefore(element.childNodes[0], element);\n      }\n      parentNode.removeChild(element);\n    };\n    var hasClass = function hasClass(elm) {\n      return elm.className.indexOf('mce-spellchecker-word') !== -1;\n    };\n    var getWrappersByIndex = function getWrappersByIndex(index) {\n      var elements = node.getElementsByTagName('*'),\n        wrappers = [];\n      index = typeof index === 'number' ? '' + index : null;\n      for (var i = 0; i < elements.length; i++) {\n        var element = elements[i],\n          dataIndex = element.getAttribute('data-mce-index');\n        if (dataIndex !== null && dataIndex.length && hasClass(element)) {\n          if (dataIndex === index || index === null) {\n            wrappers.push(element);\n          }\n        }\n      }\n      return wrappers;\n    };\n    var indexOf = function indexOf(match) {\n      var i = matches.length;\n      while (i--) {\n        if (matches[i] === match) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    function filter(callback) {\n      var filteredMatches = [];\n      each(function (match, i) {\n        if (callback(match, i)) {\n          filteredMatches.push(match);\n        }\n      });\n      matches = filteredMatches;\n      return this;\n    }\n    function each(callback) {\n      for (var i = 0, l = matches.length; i < l; i++) {\n        if (callback(matches[i], i) === false) {\n          break;\n        }\n      }\n      return this;\n    }\n    function wrap(callback) {\n      if (matches.length) {\n        stepThroughMatches(node, matches, genReplacer(callback));\n      }\n      return this;\n    }\n    function find(regex, data) {\n      if (text && regex.global) {\n        while (m = regex.exec(text)) {\n          matches.push(createMatch(m, data));\n        }\n      }\n      return this;\n    }\n    function unwrap(match) {\n      var i;\n      var elements = getWrappersByIndex(match ? indexOf(match) : null);\n      i = elements.length;\n      while (i--) {\n        unwrapElement(elements[i]);\n      }\n      return this;\n    }\n    var matchFromElement = function matchFromElement(element) {\n      return matches[element.getAttribute('data-mce-index')];\n    };\n    var elementFromMatch = function elementFromMatch(match) {\n      return getWrappersByIndex(indexOf(match))[0];\n    };\n    function add(start, length, data) {\n      matches.push({\n        start: start,\n        end: start + length,\n        text: text.substr(start, length),\n        data: data\n      });\n      return this;\n    }\n    var rangeFromMatch = function rangeFromMatch(match) {\n      var wrappers = getWrappersByIndex(indexOf(match));\n      var rng = editor.dom.createRng();\n      rng.setStartBefore(wrappers[0]);\n      rng.setEndAfter(wrappers[wrappers.length - 1]);\n      return rng;\n    };\n    var replace = function replace(match, text) {\n      var rng = rangeFromMatch(match);\n      rng.deleteContents();\n      if (text.length > 0) {\n        rng.insertNode(editor.dom.doc.createTextNode(text));\n      }\n      return rng;\n    };\n    function reset() {\n      matches.splice(0, matches.length);\n      unwrap();\n      return this;\n    }\n    var text = getText(node);\n    return {\n      text: text,\n      matches: matches,\n      each: each,\n      filter: filter,\n      reset: reset,\n      matchFromElement: matchFromElement,\n      elementFromMatch: elementFromMatch,\n      find: find,\n      add: add,\n      wrap: wrap,\n      unwrap: unwrap,\n      replace: replace,\n      rangeFromMatch: rangeFromMatch,\n      indexOf: indexOf\n    };\n  };\n  var getTextMatcher = function getTextMatcher(editor, textMatcherState) {\n    if (!textMatcherState.get()) {\n      var textMatcher = DomTextMatcher(editor.getBody(), editor);\n      textMatcherState.set(textMatcher);\n    }\n    return textMatcherState.get();\n  };\n  var defaultSpellcheckCallback = function defaultSpellcheckCallback(editor, pluginUrl, currentLanguageState) {\n    return function (method, text, doneCallback, errorCallback) {\n      var data = {\n        method: method,\n        lang: currentLanguageState.get()\n      };\n      var postData = '';\n      data[method === 'addToDictionary' ? 'word' : 'text'] = text;\n      global$2.each(data, function (value, key) {\n        if (postData) {\n          postData += '&';\n        }\n        postData += key + '=' + encodeURIComponent(value);\n      });\n      global.send({\n        url: new global$1(pluginUrl).toAbsolute(getRpcUrl(editor)),\n        type: 'post',\n        content_type: 'application/x-www-form-urlencoded',\n        data: postData,\n        success: function success(result) {\n          var parseResult = JSON.parse(result);\n          if (!parseResult) {\n            var message = editor.translate('Server response wasn\\'t proper JSON.');\n            errorCallback(message);\n          } else if (parseResult.error) {\n            errorCallback(parseResult.error);\n          } else {\n            doneCallback(parseResult);\n          }\n        },\n        error: function error() {\n          var message = editor.translate('The spelling service was not found: (') + getRpcUrl(editor) + editor.translate(')');\n          errorCallback(message);\n        }\n      });\n    };\n  };\n  var sendRpcCall = function sendRpcCall(editor, pluginUrl, currentLanguageState, name, data, successCallback, errorCallback) {\n    var userSpellcheckCallback = getSpellcheckerCallback(editor);\n    var spellCheckCallback = userSpellcheckCallback ? userSpellcheckCallback : defaultSpellcheckCallback(editor, pluginUrl, currentLanguageState);\n    spellCheckCallback.call(editor.plugins.spellchecker, name, data, successCallback, errorCallback);\n  };\n  var spellcheck = function spellcheck(editor, pluginUrl, startedState, textMatcherState, lastSuggestionsState, currentLanguageState) {\n    if (finish(editor, startedState, textMatcherState)) {\n      return;\n    }\n    var errorCallback = function errorCallback(message) {\n      editor.notificationManager.open({\n        text: message,\n        type: 'error'\n      });\n      editor.setProgressState(false);\n      finish(editor, startedState, textMatcherState);\n    };\n    var successCallback = function successCallback(data) {\n      markErrors(editor, startedState, textMatcherState, lastSuggestionsState, data);\n    };\n    editor.setProgressState(true);\n    sendRpcCall(editor, pluginUrl, currentLanguageState, 'spellcheck', getTextMatcher(editor, textMatcherState).text, successCallback, errorCallback);\n    editor.focus();\n  };\n  var checkIfFinished = function checkIfFinished(editor, startedState, textMatcherState) {\n    if (!editor.dom.select('span.mce-spellchecker-word').length) {\n      finish(editor, startedState, textMatcherState);\n    }\n  };\n  var addToDictionary = function addToDictionary(editor, pluginUrl, startedState, textMatcherState, currentLanguageState, word, spans) {\n    editor.setProgressState(true);\n    sendRpcCall(editor, pluginUrl, currentLanguageState, 'addToDictionary', word, function () {\n      editor.setProgressState(false);\n      editor.dom.remove(spans, true);\n      checkIfFinished(editor, startedState, textMatcherState);\n    }, function (message) {\n      editor.notificationManager.open({\n        text: message,\n        type: 'error'\n      });\n      editor.setProgressState(false);\n    });\n  };\n  var ignoreWord = function ignoreWord(editor, startedState, textMatcherState, word, spans, all) {\n    editor.selection.collapse();\n    if (all) {\n      global$2.each(editor.dom.select('span.mce-spellchecker-word'), function (span) {\n        if (span.getAttribute('data-mce-word') === word) {\n          editor.dom.remove(span, true);\n        }\n      });\n    } else {\n      editor.dom.remove(spans, true);\n    }\n    checkIfFinished(editor, startedState, textMatcherState);\n  };\n  var finish = function finish(editor, startedState, textMatcherState) {\n    var bookmark = editor.selection.getBookmark();\n    getTextMatcher(editor, textMatcherState).reset();\n    editor.selection.moveToBookmark(bookmark);\n    textMatcherState.set(null);\n    if (startedState.get()) {\n      startedState.set(false);\n      fireSpellcheckEnd(editor);\n      return true;\n    }\n  };\n  var getElmIndex = function getElmIndex(elm) {\n    var value = elm.getAttribute('data-mce-index');\n    if (typeof value === 'number') {\n      return '' + value;\n    }\n    return value;\n  };\n  var findSpansByIndex = function findSpansByIndex(editor, index) {\n    var spans = [];\n    var nodes = global$2.toArray(editor.getBody().getElementsByTagName('span'));\n    if (nodes.length) {\n      for (var i = 0; i < nodes.length; i++) {\n        var nodeIndex = getElmIndex(nodes[i]);\n        if (nodeIndex === null || !nodeIndex.length) {\n          continue;\n        }\n        if (nodeIndex === index.toString()) {\n          spans.push(nodes[i]);\n        }\n      }\n    }\n    return spans;\n  };\n  var markErrors = function markErrors(editor, startedState, textMatcherState, lastSuggestionsState, data) {\n    var hasDictionarySupport = !!data.dictionary;\n    var suggestions = data.words;\n    editor.setProgressState(false);\n    if (isEmpty(suggestions)) {\n      var message = editor.translate('No misspellings found.');\n      editor.notificationManager.open({\n        text: message,\n        type: 'info'\n      });\n      startedState.set(false);\n      return;\n    }\n    lastSuggestionsState.set({\n      suggestions: suggestions,\n      hasDictionarySupport: hasDictionarySupport\n    });\n    var bookmark = editor.selection.getBookmark();\n    getTextMatcher(editor, textMatcherState).find(getSpellcheckerWordcharPattern(editor)).filter(function (match) {\n      return !!suggestions[match.text];\n    }).wrap(function (match) {\n      return editor.dom.create('span', {\n        'class': 'mce-spellchecker-word',\n        'aria-invalid': 'spelling',\n        'data-mce-bogus': 1,\n        'data-mce-word': match.text\n      });\n    });\n    editor.selection.moveToBookmark(bookmark);\n    startedState.set(true);\n    fireSpellcheckStart(editor);\n  };\n  var get = function get(editor, startedState, lastSuggestionsState, textMatcherState, currentLanguageState) {\n    var getWordCharPattern = function getWordCharPattern() {\n      return getSpellcheckerWordcharPattern(editor);\n    };\n    var markErrors$1 = function markErrors$1(data) {\n      markErrors(editor, startedState, textMatcherState, lastSuggestionsState, data);\n    };\n    return {\n      getTextMatcher: textMatcherState.get,\n      getWordCharPattern: getWordCharPattern,\n      markErrors: markErrors$1,\n      getLanguage: currentLanguageState.get\n    };\n  };\n  var register$1 = function register$1(editor, pluginUrl, startedState, textMatcherState, lastSuggestionsState, currentLanguageState) {\n    editor.addCommand('mceSpellCheck', function () {\n      spellcheck(editor, pluginUrl, startedState, textMatcherState, lastSuggestionsState, currentLanguageState);\n    });\n  };\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n    };\n    return _assign.apply(this, arguments);\n  };\n  var spellcheckerEvents = 'SpellcheckStart SpellcheckEnd';\n  var buildMenuItems = function buildMenuItems(listName, languageValues) {\n    var items = [];\n    global$2.each(languageValues, function (languageValue) {\n      items.push({\n        selectable: true,\n        text: languageValue.name,\n        data: languageValue.value\n      });\n    });\n    return items;\n  };\n  var getItems = function getItems(editor) {\n    return global$2.map(getLanguages(editor).split(','), function (langPair) {\n      var langPairs = langPair.split('=');\n      return {\n        name: langPairs[0],\n        value: langPairs[1]\n      };\n    });\n  };\n  var register = function register(editor, pluginUrl, startedState, textMatcherState, currentLanguageState, lastSuggestionsState) {\n    var languageMenuItems = buildMenuItems('Language', getItems(editor));\n    var startSpellchecking = function startSpellchecking() {\n      spellcheck(editor, pluginUrl, startedState, textMatcherState, lastSuggestionsState, currentLanguageState);\n    };\n    var buttonArgs = {\n      tooltip: 'Spellcheck',\n      onAction: startSpellchecking,\n      icon: 'spell-check',\n      onSetup: function onSetup(buttonApi) {\n        var setButtonState = function setButtonState() {\n          buttonApi.setActive(startedState.get());\n        };\n        editor.on(spellcheckerEvents, setButtonState);\n        return function () {\n          editor.off(spellcheckerEvents, setButtonState);\n        };\n      }\n    };\n    var splitButtonArgs = _assign(_assign({}, buttonArgs), {\n      type: 'splitbutton',\n      select: function select(value) {\n        return value === currentLanguageState.get();\n      },\n      fetch: function fetch(callback) {\n        var items = global$2.map(languageMenuItems, function (languageItem) {\n          return {\n            type: 'choiceitem',\n            value: languageItem.data,\n            text: languageItem.text\n          };\n        });\n        callback(items);\n      },\n      onItemAction: function onItemAction(splitButtonApi, value) {\n        currentLanguageState.set(value);\n      }\n    });\n    if (languageMenuItems.length > 1) {\n      editor.ui.registry.addSplitButton('spellchecker', splitButtonArgs);\n    } else {\n      editor.ui.registry.addToggleButton('spellchecker', buttonArgs);\n    }\n    editor.ui.registry.addToggleMenuItem('spellchecker', {\n      text: 'Spellcheck',\n      icon: 'spell-check',\n      onSetup: function onSetup(menuApi) {\n        menuApi.setActive(startedState.get());\n        var setMenuItemCheck = function setMenuItemCheck() {\n          menuApi.setActive(startedState.get());\n        };\n        editor.on(spellcheckerEvents, setMenuItemCheck);\n        return function () {\n          editor.off(spellcheckerEvents, setMenuItemCheck);\n        };\n      },\n      onAction: startSpellchecking\n    });\n  };\n  var ignoreAll = true;\n  var getSuggestions = function getSuggestions(editor, pluginUrl, lastSuggestionsState, startedState, textMatcherState, currentLanguageState, word, spans) {\n    var items = [];\n    var suggestions = lastSuggestionsState.get().suggestions[word];\n    global$2.each(suggestions, function (suggestion) {\n      items.push({\n        text: suggestion,\n        onAction: function onAction() {\n          editor.insertContent(editor.dom.encode(suggestion));\n          editor.dom.remove(spans);\n          checkIfFinished(editor, startedState, textMatcherState);\n        }\n      });\n    });\n    var hasDictionarySupport = lastSuggestionsState.get().hasDictionarySupport;\n    if (hasDictionarySupport) {\n      items.push({\n        type: 'separator'\n      });\n      items.push({\n        text: 'Add to dictionary',\n        onAction: function onAction() {\n          addToDictionary(editor, pluginUrl, startedState, textMatcherState, currentLanguageState, word, spans);\n        }\n      });\n    }\n    items.push.apply(items, [{\n      type: 'separator'\n    }, {\n      text: 'Ignore',\n      onAction: function onAction() {\n        ignoreWord(editor, startedState, textMatcherState, word, spans);\n      }\n    }, {\n      text: 'Ignore all',\n      onAction: function onAction() {\n        ignoreWord(editor, startedState, textMatcherState, word, spans, ignoreAll);\n      }\n    }]);\n    return items;\n  };\n  var setup = function setup(editor, pluginUrl, lastSuggestionsState, startedState, textMatcherState, currentLanguageState) {\n    var update = function update(element) {\n      var target = element;\n      if (target.className === 'mce-spellchecker-word') {\n        var spans = findSpansByIndex(editor, getElmIndex(target));\n        if (spans.length > 0) {\n          var rng = editor.dom.createRng();\n          rng.setStartBefore(spans[0]);\n          rng.setEndAfter(spans[spans.length - 1]);\n          editor.selection.setRng(rng);\n          return getSuggestions(editor, pluginUrl, lastSuggestionsState, startedState, textMatcherState, currentLanguageState, target.getAttribute('data-mce-word'), spans);\n        }\n      } else {\n        return [];\n      }\n    };\n    editor.ui.registry.addContextMenu('spellchecker', {\n      update: update\n    });\n  };\n  function Plugin() {\n    global$3.add('spellchecker', function (editor, pluginUrl) {\n      if (hasProPlugin(editor) === false) {\n        var startedState = Cell(false);\n        var currentLanguageState = Cell(getLanguage(editor));\n        var textMatcherState = Cell(null);\n        var lastSuggestionsState = Cell(null);\n        register(editor, pluginUrl, startedState, textMatcherState, currentLanguageState, lastSuggestionsState);\n        setup(editor, pluginUrl, lastSuggestionsState, startedState, textMatcherState, currentLanguageState);\n        register$1(editor, pluginUrl, startedState, textMatcherState, lastSuggestionsState, currentLanguageState);\n        return get(editor, startedState, lastSuggestionsState, textMatcherState, currentLanguageState);\n      }\n    });\n  }\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/spellchecker/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/spellchecker/index.js");
/******/ 	
/******/ })()
;