/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/visualchars/plugin.js":
/*!************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/visualchars/plugin.js ***!
  \************************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.7 (2022-12-06)\r\n */\n(function () {\n  'use strict';\n\n  var Cell = function Cell(initial) {\n    var value = initial;\n    var get = function get() {\n      return value;\n    };\n    var set = function set(v) {\n      value = v;\n    };\n    return {\n      get: get,\n      set: set\n    };\n  };\n  var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n  var get$2 = function get$2(toggleState) {\n    var isEnabled = function isEnabled() {\n      return toggleState.get();\n    };\n    return {\n      isEnabled: isEnabled\n    };\n  };\n  var fireVisualChars = function fireVisualChars(editor, state) {\n    return editor.fire('VisualChars', {\n      state: state\n    });\n  };\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n  var isType$1 = function isType$1(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n  var isString = isType$1('string');\n  var isBoolean = isSimpleType('boolean');\n  var isNumber = isSimpleType('number');\n  var noop = function noop() {};\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n  var identity = function identity(x) {\n    return x;\n  };\n  var never = constant(false);\n  var always = constant(true);\n  var none = function none() {\n    return NONE;\n  };\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n  var some = function some(a) {\n    var constant_a = constant(a);\n    var self = function self() {\n      return me;\n    };\n    var bind = function bind(f) {\n      return f(a);\n    };\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n    return r;\n  };\n  var each$1 = function each$1(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n  var filter = function filter(xs, pred) {\n    var r = [];\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      if (pred(x, i)) {\n        r.push(x);\n      }\n    }\n    return r;\n  };\n  var keys = Object.keys;\n  var each = function each(obj, f) {\n    var props = keys(obj);\n    for (var k = 0, len = props.length; k < len; k++) {\n      var i = props[k];\n      var x = obj[i];\n      f(x, i);\n    }\n  };\n  typeof window !== 'undefined' ? window : Function('return this;')();\n  var TEXT = 3;\n  var type = function type(element) {\n    return element.dom.nodeType;\n  };\n  var value = function value(element) {\n    return element.dom.nodeValue;\n  };\n  var isType = function isType(t) {\n    return function (element) {\n      return type(element) === t;\n    };\n  };\n  var isText = isType(TEXT);\n  var rawSet = function rawSet(dom, key, value) {\n    if (isString(value) || isBoolean(value) || isNumber(value)) {\n      dom.setAttribute(key, value + '');\n    } else {\n      console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n      throw new Error('Attribute value was not simple');\n    }\n  };\n  var set = function set(element, key, value) {\n    rawSet(element.dom, key, value);\n  };\n  var get$1 = function get$1(element, key) {\n    var v = element.dom.getAttribute(key);\n    return v === null ? undefined : v;\n  };\n  var remove$3 = function remove$3(element, key) {\n    element.dom.removeAttribute(key);\n  };\n  var read = function read(element, attr) {\n    var value = get$1(element, attr);\n    return value === undefined || value === '' ? [] : value.split(' ');\n  };\n  var add$2 = function add$2(element, attr, id) {\n    var old = read(element, attr);\n    var nu = old.concat([id]);\n    set(element, attr, nu.join(' '));\n    return true;\n  };\n  var remove$2 = function remove$2(element, attr, id) {\n    var nu = filter(read(element, attr), function (v) {\n      return v !== id;\n    });\n    if (nu.length > 0) {\n      set(element, attr, nu.join(' '));\n    } else {\n      remove$3(element, attr);\n    }\n    return false;\n  };\n  var supports = function supports(element) {\n    return element.dom.classList !== undefined;\n  };\n  var get = function get(element) {\n    return read(element, 'class');\n  };\n  var add$1 = function add$1(element, clazz) {\n    return add$2(element, 'class', clazz);\n  };\n  var remove$1 = function remove$1(element, clazz) {\n    return remove$2(element, 'class', clazz);\n  };\n  var add = function add(element, clazz) {\n    if (supports(element)) {\n      element.dom.classList.add(clazz);\n    } else {\n      add$1(element, clazz);\n    }\n  };\n  var cleanClass = function cleanClass(element) {\n    var classList = supports(element) ? element.dom.classList : get(element);\n    if (classList.length === 0) {\n      remove$3(element, 'class');\n    }\n  };\n  var remove = function remove(element, clazz) {\n    if (supports(element)) {\n      var classList = element.dom.classList;\n      classList.remove(clazz);\n    } else {\n      remove$1(element, clazz);\n    }\n    cleanClass(element);\n  };\n  var fromHtml = function fromHtml(html, scope) {\n    var doc = scope || document;\n    var div = doc.createElement('div');\n    div.innerHTML = html;\n    if (!div.hasChildNodes() || div.childNodes.length > 1) {\n      console.error('HTML does not have a single root node', html);\n      throw new Error('HTML must have a single root node');\n    }\n    return fromDom(div.childNodes[0]);\n  };\n  var fromTag = function fromTag(tag, scope) {\n    var doc = scope || document;\n    var node = doc.createElement(tag);\n    return fromDom(node);\n  };\n  var fromText = function fromText(text, scope) {\n    var doc = scope || document;\n    var node = doc.createTextNode(text);\n    return fromDom(node);\n  };\n  var fromDom = function fromDom(node) {\n    if (node === null || node === undefined) {\n      throw new Error('Node cannot be null or undefined');\n    }\n    return {\n      dom: node\n    };\n  };\n  var fromPoint = function fromPoint(docElm, x, y) {\n    return Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n  };\n  var SugarElement = {\n    fromHtml: fromHtml,\n    fromTag: fromTag,\n    fromText: fromText,\n    fromDom: fromDom,\n    fromPoint: fromPoint\n  };\n  var charMap = {\n    '\\xA0': 'nbsp',\n    '\\xAD': 'shy'\n  };\n  var charMapToRegExp = function charMapToRegExp(charMap, global) {\n    var regExp = '';\n    each(charMap, function (_value, key) {\n      regExp += key;\n    });\n    return new RegExp('[' + regExp + ']', global ? 'g' : '');\n  };\n  var charMapToSelector = function charMapToSelector(charMap) {\n    var selector = '';\n    each(charMap, function (value) {\n      if (selector) {\n        selector += ',';\n      }\n      selector += 'span.mce-' + value;\n    });\n    return selector;\n  };\n  var regExp = charMapToRegExp(charMap);\n  var regExpGlobal = charMapToRegExp(charMap, true);\n  var selector = charMapToSelector(charMap);\n  var nbspClass = 'mce-nbsp';\n  var wrapCharWithSpan = function wrapCharWithSpan(value) {\n    return '<span data-mce-bogus=\"1\" class=\"mce-' + charMap[value] + '\">' + value + '</span>';\n  };\n  var isMatch = function isMatch(n) {\n    var value$1 = value(n);\n    return isText(n) && value$1 !== undefined && regExp.test(value$1);\n  };\n  var filterDescendants = function filterDescendants(scope, predicate) {\n    var result = [];\n    var dom = scope.dom;\n    var children = map(dom.childNodes, SugarElement.fromDom);\n    each$1(children, function (x) {\n      if (predicate(x)) {\n        result = result.concat([x]);\n      }\n      result = result.concat(filterDescendants(x, predicate));\n    });\n    return result;\n  };\n  var findParentElm = function findParentElm(elm, rootElm) {\n    while (elm.parentNode) {\n      if (elm.parentNode === rootElm) {\n        return elm;\n      }\n      elm = elm.parentNode;\n    }\n  };\n  var replaceWithSpans = function replaceWithSpans(text) {\n    return text.replace(regExpGlobal, wrapCharWithSpan);\n  };\n  var isWrappedNbsp = function isWrappedNbsp(node) {\n    return node.nodeName.toLowerCase() === 'span' && node.classList.contains('mce-nbsp-wrap');\n  };\n  var show = function show(editor, rootElm) {\n    var nodeList = filterDescendants(SugarElement.fromDom(rootElm), isMatch);\n    each$1(nodeList, function (n) {\n      var parent = n.dom.parentNode;\n      if (isWrappedNbsp(parent)) {\n        add(SugarElement.fromDom(parent), nbspClass);\n      } else {\n        var withSpans = replaceWithSpans(editor.dom.encode(value(n)));\n        var div = editor.dom.create('div', null, withSpans);\n        var node = void 0;\n        while (node = div.lastChild) {\n          editor.dom.insertAfter(node, n.dom);\n        }\n        editor.dom.remove(n.dom);\n      }\n    });\n  };\n  var hide = function hide(editor, rootElm) {\n    var nodeList = editor.dom.select(selector, rootElm);\n    each$1(nodeList, function (node) {\n      if (isWrappedNbsp(node)) {\n        remove(SugarElement.fromDom(node), nbspClass);\n      } else {\n        editor.dom.remove(node, true);\n      }\n    });\n  };\n  var toggle = function toggle(editor) {\n    var body = editor.getBody();\n    var bookmark = editor.selection.getBookmark();\n    var parentNode = findParentElm(editor.selection.getNode(), body);\n    parentNode = parentNode !== undefined ? parentNode : body;\n    hide(editor, parentNode);\n    show(editor, parentNode);\n    editor.selection.moveToBookmark(bookmark);\n  };\n  var applyVisualChars = function applyVisualChars(editor, toggleState) {\n    fireVisualChars(editor, toggleState.get());\n    var body = editor.getBody();\n    if (toggleState.get() === true) {\n      show(editor, body);\n    } else {\n      hide(editor, body);\n    }\n  };\n  var toggleVisualChars = function toggleVisualChars(editor, toggleState) {\n    toggleState.set(!toggleState.get());\n    var bookmark = editor.selection.getBookmark();\n    applyVisualChars(editor, toggleState);\n    editor.selection.moveToBookmark(bookmark);\n  };\n  var register$1 = function register$1(editor, toggleState) {\n    editor.addCommand('mceVisualChars', function () {\n      toggleVisualChars(editor, toggleState);\n    });\n  };\n  var isEnabledByDefault = function isEnabledByDefault(editor) {\n    return editor.getParam('visualchars_default_state', false);\n  };\n  var hasForcedRootBlock = function hasForcedRootBlock(editor) {\n    return editor.getParam('forced_root_block') !== false;\n  };\n  var setup$1 = function setup$1(editor, toggleState) {\n    editor.on('init', function () {\n      applyVisualChars(editor, toggleState);\n    });\n  };\n  var global = tinymce.util.Tools.resolve('tinymce.util.Delay');\n  var setup = function setup(editor, toggleState) {\n    var debouncedToggle = global.debounce(function () {\n      toggle(editor);\n    }, 300);\n    if (hasForcedRootBlock(editor)) {\n      editor.on('keydown', function (e) {\n        if (toggleState.get() === true) {\n          e.keyCode === 13 ? toggle(editor) : debouncedToggle();\n        }\n      });\n    }\n    editor.on('remove', debouncedToggle.stop);\n  };\n  var toggleActiveState = function toggleActiveState(editor, enabledStated) {\n    return function (api) {\n      api.setActive(enabledStated.get());\n      var editorEventCallback = function editorEventCallback(e) {\n        return api.setActive(e.state);\n      };\n      editor.on('VisualChars', editorEventCallback);\n      return function () {\n        return editor.off('VisualChars', editorEventCallback);\n      };\n    };\n  };\n  var register = function register(editor, toggleState) {\n    var onAction = function onAction() {\n      return editor.execCommand('mceVisualChars');\n    };\n    editor.ui.registry.addToggleButton('visualchars', {\n      tooltip: 'Show invisible characters',\n      icon: 'visualchars',\n      onAction: onAction,\n      onSetup: toggleActiveState(editor, toggleState)\n    });\n    editor.ui.registry.addToggleMenuItem('visualchars', {\n      text: 'Show invisible characters',\n      icon: 'visualchars',\n      onAction: onAction,\n      onSetup: toggleActiveState(editor, toggleState)\n    });\n  };\n  function Plugin() {\n    global$1.add('visualchars', function (editor) {\n      var toggleState = Cell(isEnabledByDefault(editor));\n      register$1(editor, toggleState);\n      register(editor, toggleState);\n      setup(editor, toggleState);\n      setup$1(editor, toggleState);\n      return get$2(toggleState);\n    });\n  }\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/visualchars/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/visualchars/plugin.js"]();
/******/ 	
/******/ })()
;