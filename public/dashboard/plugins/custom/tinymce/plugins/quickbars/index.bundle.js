/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/quickbars/index.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/quickbars/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Exports the \"quickbars\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/quickbars')\n//   ES2015:\n//     import 'tinymce/plugins/quickbars'\n__webpack_require__(/*! ./plugin.js */ \"./resources/assets/core/plugins/custom/tinymce/plugins/quickbars/plugin.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvcGx1Z2lucy9jdXN0b20vdGlueW1jZS9wbHVnaW5zL3F1aWNrYmFycy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsbUJBQU8sQ0FBQywrRkFBYSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL3BsdWdpbnMvY3VzdG9tL3RpbnltY2UvcGx1Z2lucy9xdWlja2JhcnMvaW5kZXguanM/MzA3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFeHBvcnRzIHRoZSBcInF1aWNrYmFyc1wiIHBsdWdpbiBmb3IgdXNhZ2Ugd2l0aCBtb2R1bGUgbG9hZGVyc1xyXG4vLyBVc2FnZTpcclxuLy8gICBDb21tb25KUzpcclxuLy8gICAgIHJlcXVpcmUoJ3RpbnltY2UvcGx1Z2lucy9xdWlja2JhcnMnKVxyXG4vLyAgIEVTMjAxNTpcclxuLy8gICAgIGltcG9ydCAndGlueW1jZS9wbHVnaW5zL3F1aWNrYmFycydcclxucmVxdWlyZSgnLi9wbHVnaW4uanMnKTsiXSwibmFtZXMiOlsicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/quickbars/index.js\n");

/***/ }),

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/quickbars/plugin.js":
/*!**********************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/quickbars/plugin.js ***!
  \**********************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.7 (2022-12-06)\r\n */\n(function () {\n  'use strict';\n\n  var global$3 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n  var unique = 0;\n  var generate = function generate(prefix) {\n    var date = new Date();\n    var time = date.getTime();\n    var random = Math.floor(Math.random() * 1000000000);\n    unique++;\n    return prefix + '_' + random + unique + String(time);\n  };\n  var createTableHtml = function createTableHtml(cols, rows) {\n    var html = '<table data-mce-id=\"mce\" style=\"width: 100%\">';\n    html += '<tbody>';\n    for (var y = 0; y < rows; y++) {\n      html += '<tr>';\n      for (var x = 0; x < cols; x++) {\n        html += '<td><br></td>';\n      }\n      html += '</tr>';\n    }\n    html += '</tbody>';\n    html += '</table>';\n    return html;\n  };\n  var getInsertedElement = function getInsertedElement(editor) {\n    var elms = editor.dom.select('*[data-mce-id]');\n    return elms[0];\n  };\n  var insertTableHtml = function insertTableHtml(editor, cols, rows) {\n    editor.undoManager.transact(function () {\n      editor.insertContent(createTableHtml(cols, rows));\n      var tableElm = getInsertedElement(editor);\n      tableElm.removeAttribute('data-mce-id');\n      var cellElm = editor.dom.select('td,th', tableElm);\n      editor.selection.setCursorLocation(cellElm[0], 0);\n    });\n  };\n  var insertTable = function insertTable(editor, cols, rows) {\n    editor.plugins.table ? editor.plugins.table.insertTable(cols, rows) : insertTableHtml(editor, cols, rows);\n  };\n  var insertBlob = function insertBlob(editor, base64, blob) {\n    var blobCache = editor.editorUpload.blobCache;\n    var blobInfo = blobCache.create(generate('mceu'), blob, base64);\n    blobCache.add(blobInfo);\n    editor.insertContent(editor.dom.createHTML('img', {\n      src: blobInfo.blobUri()\n    }));\n  };\n  var global$2 = tinymce.util.Tools.resolve('tinymce.util.Promise');\n  var blobToBase64 = function blobToBase64(blob) {\n    return new global$2(function (resolve) {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        resolve(reader.result.split(',')[1]);\n      };\n      reader.readAsDataURL(blob);\n    });\n  };\n  var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n  var global = tinymce.util.Tools.resolve('tinymce.util.Delay');\n  var pickFile = function pickFile(editor) {\n    return new global$2(function (resolve) {\n      var fileInput = document.createElement('input');\n      fileInput.type = 'file';\n      fileInput.accept = 'image/*';\n      fileInput.style.position = 'fixed';\n      fileInput.style.left = '0';\n      fileInput.style.top = '0';\n      fileInput.style.opacity = '0.001';\n      document.body.appendChild(fileInput);\n      var changeHandler = function changeHandler(e) {\n        resolve(Array.prototype.slice.call(e.target.files));\n      };\n      fileInput.addEventListener('change', changeHandler);\n      var cancelHandler = function cancelHandler(e) {\n        var cleanup = function cleanup() {\n          resolve([]);\n          fileInput.parentNode.removeChild(fileInput);\n        };\n        if (global$1.os.isAndroid() && e.type !== 'remove') {\n          global.setEditorTimeout(editor, cleanup, 0);\n        } else {\n          cleanup();\n        }\n        editor.off('focusin remove', cancelHandler);\n      };\n      editor.on('focusin remove', cancelHandler);\n      fileInput.click();\n    });\n  };\n  var setupButtons = function setupButtons(editor) {\n    editor.ui.registry.addButton('quickimage', {\n      icon: 'image',\n      tooltip: 'Insert image',\n      onAction: function onAction() {\n        pickFile(editor).then(function (files) {\n          if (files.length > 0) {\n            var blob_1 = files[0];\n            blobToBase64(blob_1).then(function (base64) {\n              insertBlob(editor, base64, blob_1);\n            });\n          }\n        });\n      }\n    });\n    editor.ui.registry.addButton('quicktable', {\n      icon: 'table',\n      tooltip: 'Insert table',\n      onAction: function onAction() {\n        insertTable(editor, 2, 2);\n      }\n    });\n  };\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n  var isType = function isType(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n  var eq = function eq(t) {\n    return function (a) {\n      return t === a;\n    };\n  };\n  var isString = isType('string');\n  var isObject = isType('object');\n  var isArray = isType('array');\n  var isBoolean = isSimpleType('boolean');\n  var isUndefined = eq(undefined);\n  var isFunction = isSimpleType('function');\n  var noop = function noop() {};\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n  var identity = function identity(x) {\n    return x;\n  };\n  var never = constant(false);\n  var always = constant(true);\n  var none = function none() {\n    return NONE;\n  };\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n  var some = function some(a) {\n    var constant_a = constant(a);\n    var self = function self() {\n      return me;\n    };\n    var bind = function bind(f) {\n      return f(a);\n    };\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  function ClosestOrAncestor(is, ancestor, scope, a, isRoot) {\n    if (is(scope, a)) {\n      return Optional.some(scope);\n    } else if (isFunction(isRoot) && isRoot(scope)) {\n      return Optional.none();\n    } else {\n      return ancestor(scope, a, isRoot);\n    }\n  }\n  var ELEMENT = 1;\n  var fromHtml = function fromHtml(html, scope) {\n    var doc = scope || document;\n    var div = doc.createElement('div');\n    div.innerHTML = html;\n    if (!div.hasChildNodes() || div.childNodes.length > 1) {\n      console.error('HTML does not have a single root node', html);\n      throw new Error('HTML must have a single root node');\n    }\n    return fromDom(div.childNodes[0]);\n  };\n  var fromTag = function fromTag(tag, scope) {\n    var doc = scope || document;\n    var node = doc.createElement(tag);\n    return fromDom(node);\n  };\n  var fromText = function fromText(text, scope) {\n    var doc = scope || document;\n    var node = doc.createTextNode(text);\n    return fromDom(node);\n  };\n  var fromDom = function fromDom(node) {\n    if (node === null || node === undefined) {\n      throw new Error('Node cannot be null or undefined');\n    }\n    return {\n      dom: node\n    };\n  };\n  var fromPoint = function fromPoint(docElm, x, y) {\n    return Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n  };\n  var SugarElement = {\n    fromHtml: fromHtml,\n    fromTag: fromTag,\n    fromText: fromText,\n    fromDom: fromDom,\n    fromPoint: fromPoint\n  };\n  var is = function is(element, selector) {\n    var dom = element.dom;\n    if (dom.nodeType !== ELEMENT) {\n      return false;\n    } else {\n      var elem = dom;\n      if (elem.matches !== undefined) {\n        return elem.matches(selector);\n      } else if (elem.msMatchesSelector !== undefined) {\n        return elem.msMatchesSelector(selector);\n      } else if (elem.webkitMatchesSelector !== undefined) {\n        return elem.webkitMatchesSelector(selector);\n      } else if (elem.mozMatchesSelector !== undefined) {\n        return elem.mozMatchesSelector(selector);\n      } else {\n        throw new Error('Browser lacks native selectors');\n      }\n    }\n  };\n  typeof window !== 'undefined' ? window : Function('return this;')();\n  var name = function name(element) {\n    var r = element.dom.nodeName;\n    return r.toLowerCase();\n  };\n  var ancestor$1 = function ancestor$1(scope, predicate, isRoot) {\n    var element = scope.dom;\n    var stop = isFunction(isRoot) ? isRoot : never;\n    while (element.parentNode) {\n      element = element.parentNode;\n      var el = SugarElement.fromDom(element);\n      if (predicate(el)) {\n        return Optional.some(el);\n      } else if (stop(el)) {\n        break;\n      }\n    }\n    return Optional.none();\n  };\n  var closest$1 = function closest$1(scope, predicate, isRoot) {\n    var is = function is(s, test) {\n      return test(s);\n    };\n    return ClosestOrAncestor(is, ancestor$1, scope, predicate, isRoot);\n  };\n  var ancestor = function ancestor(scope, selector, isRoot) {\n    return ancestor$1(scope, function (e) {\n      return is(e, selector);\n    }, isRoot);\n  };\n  var closest = function closest(scope, selector, isRoot) {\n    var is$1 = function is$1(element, selector) {\n      return is(element, selector);\n    };\n    return ClosestOrAncestor(is$1, ancestor, scope, selector, isRoot);\n  };\n  var validDefaultOrDie = function validDefaultOrDie(value, predicate) {\n    if (predicate(value)) {\n      return true;\n    }\n    throw new Error('Default value doesn\\'t match requested type.');\n  };\n  var items = function items(value, defaultValue) {\n    if (isArray(value) || isObject(value)) {\n      throw new Error('expected a string but found: ' + value);\n    }\n    if (isUndefined(value)) {\n      return defaultValue;\n    }\n    if (isBoolean(value)) {\n      return value === false ? '' : defaultValue;\n    }\n    return value;\n  };\n  var getToolbarItemsOr_ = function getToolbarItemsOr_(predicate) {\n    return function (editor, name, defaultValue) {\n      validDefaultOrDie(defaultValue, predicate);\n      var value = editor.getParam(name, defaultValue);\n      return items(value, defaultValue);\n    };\n  };\n  var getToolbarItemsOr = getToolbarItemsOr_(isString);\n  var getTextSelectionToolbarItems = function getTextSelectionToolbarItems(editor) {\n    return getToolbarItemsOr(editor, 'quickbars_selection_toolbar', 'bold italic | quicklink h2 h3 blockquote');\n  };\n  var getInsertToolbarItems = function getInsertToolbarItems(editor) {\n    return getToolbarItemsOr(editor, 'quickbars_insert_toolbar', 'quickimage quicktable');\n  };\n  var getImageToolbarItems = function getImageToolbarItems(editor) {\n    return getToolbarItemsOr(editor, 'quickbars_image_toolbar', 'alignleft aligncenter alignright');\n  };\n  var addToEditor$1 = function addToEditor$1(editor) {\n    var insertToolbarItems = getInsertToolbarItems(editor);\n    if (insertToolbarItems.trim().length > 0) {\n      editor.ui.registry.addContextToolbar('quickblock', {\n        predicate: function predicate(node) {\n          var sugarNode = SugarElement.fromDom(node);\n          var textBlockElementsMap = editor.schema.getTextBlockElements();\n          var isRoot = function isRoot(elem) {\n            return elem.dom === editor.getBody();\n          };\n          return closest(sugarNode, 'table', isRoot).fold(function () {\n            return closest$1(sugarNode, function (elem) {\n              return name(elem) in textBlockElementsMap && editor.dom.isEmpty(elem.dom);\n            }, isRoot).isSome();\n          }, never);\n        },\n        items: insertToolbarItems,\n        position: 'line',\n        scope: 'editor'\n      });\n    }\n  };\n  var addToEditor = function addToEditor(editor) {\n    var isEditable = function isEditable(node) {\n      return editor.dom.getContentEditableParent(node) !== 'false';\n    };\n    var isImage = function isImage(node) {\n      return node.nodeName === 'IMG' || node.nodeName === 'FIGURE' && /image/i.test(node.className);\n    };\n    var imageToolbarItems = getImageToolbarItems(editor);\n    if (imageToolbarItems.trim().length > 0) {\n      editor.ui.registry.addContextToolbar('imageselection', {\n        predicate: isImage,\n        items: imageToolbarItems,\n        position: 'node'\n      });\n    }\n    var textToolbarItems = getTextSelectionToolbarItems(editor);\n    if (textToolbarItems.trim().length > 0) {\n      editor.ui.registry.addContextToolbar('textselection', {\n        predicate: function predicate(node) {\n          return !isImage(node) && !editor.selection.isCollapsed() && isEditable(node);\n        },\n        items: textToolbarItems,\n        position: 'selection',\n        scope: 'editor'\n      });\n    }\n  };\n  function Plugin() {\n    global$3.add('quickbars', function (editor) {\n      setupButtons(editor);\n      addToEditor$1(editor);\n      addToEditor(editor);\n    });\n  }\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/quickbars/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/core/plugins/custom/tinymce/plugins/quickbars/index.js");
/******/ 	
/******/ })()
;