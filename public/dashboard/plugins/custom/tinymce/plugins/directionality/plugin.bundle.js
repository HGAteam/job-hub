/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/plugins/custom/tinymce/plugins/directionality/plugin.js":
/*!***************************************************************************************!*\
  !*** ./resources/assets/core/plugins/custom/tinymce/plugins/directionality/plugin.js ***!
  \***************************************************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/**\r\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\r\n * Licensed under the LGPL or a commercial license.\r\n * For LGPL see License.txt in the project root for license information.\r\n * For commercial licenses see https://www.tiny.cloud/\r\n *\r\n * Version: 5.10.7 (2022-12-06)\r\n */\n(function () {\n  'use strict';\n\n  var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n  var typeOf = function typeOf(x) {\n    var t = _typeof(x);\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {\n      return 'array';\n    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n  var isType$1 = function isType$1(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return _typeof(value) === type;\n    };\n  };\n  var isString = isType$1('string');\n  var isBoolean = isSimpleType('boolean');\n  var isNullable = function isNullable(a) {\n    return a === null || a === undefined;\n  };\n  var isNonNullable = function isNonNullable(a) {\n    return !isNullable(a);\n  };\n  var isFunction = isSimpleType('function');\n  var isNumber = isSimpleType('number');\n  var noop = function noop() {};\n  var compose1 = function compose1(fbc, fab) {\n    return function (a) {\n      return fbc(fab(a));\n    };\n  };\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n  var identity = function identity(x) {\n    return x;\n  };\n  var never = constant(false);\n  var always = constant(true);\n  var none = function none() {\n    return NONE;\n  };\n  var NONE = function () {\n    var call = function call(thunk) {\n      return thunk();\n    };\n    var id = identity;\n    var me = {\n      fold: function fold(n, _s) {\n        return n();\n      },\n      isSome: never,\n      isNone: always,\n      getOr: id,\n      getOrThunk: call,\n      getOrDie: function getOrDie(msg) {\n        throw new Error(msg || 'error: getOrDie called on none.');\n      },\n      getOrNull: constant(null),\n      getOrUndefined: constant(undefined),\n      or: id,\n      orThunk: call,\n      map: none,\n      each: noop,\n      bind: none,\n      exists: never,\n      forall: always,\n      filter: function filter() {\n        return none();\n      },\n      toArray: function toArray() {\n        return [];\n      },\n      toString: constant('none()')\n    };\n    return me;\n  }();\n  var some = function some(a) {\n    var constant_a = constant(a);\n    var self = function self() {\n      return me;\n    };\n    var bind = function bind(f) {\n      return f(a);\n    };\n    var me = {\n      fold: function fold(n, s) {\n        return s(a);\n      },\n      isSome: always,\n      isNone: never,\n      getOr: constant_a,\n      getOrThunk: constant_a,\n      getOrDie: constant_a,\n      getOrNull: constant_a,\n      getOrUndefined: constant_a,\n      or: self,\n      orThunk: self,\n      map: function map(f) {\n        return some(f(a));\n      },\n      each: function each(f) {\n        f(a);\n      },\n      bind: bind,\n      exists: bind,\n      forall: bind,\n      filter: function filter(f) {\n        return f(a) ? me : NONE;\n      },\n      toArray: function toArray() {\n        return [a];\n      },\n      toString: function toString() {\n        return 'some(' + a + ')';\n      }\n    };\n    return me;\n  };\n  var from = function from(value) {\n    return value === null || value === undefined ? NONE : some(value);\n  };\n  var Optional = {\n    some: some,\n    none: none,\n    from: from\n  };\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n    return r;\n  };\n  var each = function each(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n  var filter = function filter(xs, pred) {\n    var r = [];\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      if (pred(x, i)) {\n        r.push(x);\n      }\n    }\n    return r;\n  };\n  var DOCUMENT = 9;\n  var DOCUMENT_FRAGMENT = 11;\n  var ELEMENT = 1;\n  var TEXT = 3;\n  var fromHtml = function fromHtml(html, scope) {\n    var doc = scope || document;\n    var div = doc.createElement('div');\n    div.innerHTML = html;\n    if (!div.hasChildNodes() || div.childNodes.length > 1) {\n      console.error('HTML does not have a single root node', html);\n      throw new Error('HTML must have a single root node');\n    }\n    return fromDom(div.childNodes[0]);\n  };\n  var fromTag = function fromTag(tag, scope) {\n    var doc = scope || document;\n    var node = doc.createElement(tag);\n    return fromDom(node);\n  };\n  var fromText = function fromText(text, scope) {\n    var doc = scope || document;\n    var node = doc.createTextNode(text);\n    return fromDom(node);\n  };\n  var fromDom = function fromDom(node) {\n    if (node === null || node === undefined) {\n      throw new Error('Node cannot be null or undefined');\n    }\n    return {\n      dom: node\n    };\n  };\n  var fromPoint = function fromPoint(docElm, x, y) {\n    return Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);\n  };\n  var SugarElement = {\n    fromHtml: fromHtml,\n    fromTag: fromTag,\n    fromText: fromText,\n    fromDom: fromDom,\n    fromPoint: fromPoint\n  };\n  var is = function is(element, selector) {\n    var dom = element.dom;\n    if (dom.nodeType !== ELEMENT) {\n      return false;\n    } else {\n      var elem = dom;\n      if (elem.matches !== undefined) {\n        return elem.matches(selector);\n      } else if (elem.msMatchesSelector !== undefined) {\n        return elem.msMatchesSelector(selector);\n      } else if (elem.webkitMatchesSelector !== undefined) {\n        return elem.webkitMatchesSelector(selector);\n      } else if (elem.mozMatchesSelector !== undefined) {\n        return elem.mozMatchesSelector(selector);\n      } else {\n        throw new Error('Browser lacks native selectors');\n      }\n    }\n  };\n  typeof window !== 'undefined' ? window : Function('return this;')();\n  var name = function name(element) {\n    var r = element.dom.nodeName;\n    return r.toLowerCase();\n  };\n  var type = function type(element) {\n    return element.dom.nodeType;\n  };\n  var isType = function isType(t) {\n    return function (element) {\n      return type(element) === t;\n    };\n  };\n  var isElement = isType(ELEMENT);\n  var isText = isType(TEXT);\n  var isDocument = isType(DOCUMENT);\n  var isDocumentFragment = isType(DOCUMENT_FRAGMENT);\n  var isTag = function isTag(tag) {\n    return function (e) {\n      return isElement(e) && name(e) === tag;\n    };\n  };\n  var owner = function owner(element) {\n    return SugarElement.fromDom(element.dom.ownerDocument);\n  };\n  var documentOrOwner = function documentOrOwner(dos) {\n    return isDocument(dos) ? dos : owner(dos);\n  };\n  var parent = function parent(element) {\n    return Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n  };\n  var children$2 = function children$2(element) {\n    return map(element.dom.childNodes, SugarElement.fromDom);\n  };\n  var rawSet = function rawSet(dom, key, value) {\n    if (isString(value) || isBoolean(value) || isNumber(value)) {\n      dom.setAttribute(key, value + '');\n    } else {\n      console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n      throw new Error('Attribute value was not simple');\n    }\n  };\n  var set = function set(element, key, value) {\n    rawSet(element.dom, key, value);\n  };\n  var remove = function remove(element, key) {\n    element.dom.removeAttribute(key);\n  };\n  var isShadowRoot = function isShadowRoot(dos) {\n    return isDocumentFragment(dos) && isNonNullable(dos.dom.host);\n  };\n  var supported = isFunction(Element.prototype.attachShadow) && isFunction(Node.prototype.getRootNode);\n  var getRootNode = supported ? function (e) {\n    return SugarElement.fromDom(e.dom.getRootNode());\n  } : documentOrOwner;\n  var getShadowRoot = function getShadowRoot(e) {\n    var r = getRootNode(e);\n    return isShadowRoot(r) ? Optional.some(r) : Optional.none();\n  };\n  var getShadowHost = function getShadowHost(e) {\n    return SugarElement.fromDom(e.dom.host);\n  };\n  var inBody = function inBody(element) {\n    var dom = isText(element) ? element.dom.parentNode : element.dom;\n    if (dom === undefined || dom === null || dom.ownerDocument === null) {\n      return false;\n    }\n    var doc = dom.ownerDocument;\n    return getShadowRoot(SugarElement.fromDom(dom)).fold(function () {\n      return doc.body.contains(dom);\n    }, compose1(inBody, getShadowHost));\n  };\n  var ancestor$1 = function ancestor$1(scope, predicate, isRoot) {\n    var element = scope.dom;\n    var stop = isFunction(isRoot) ? isRoot : never;\n    while (element.parentNode) {\n      element = element.parentNode;\n      var el = SugarElement.fromDom(element);\n      if (predicate(el)) {\n        return Optional.some(el);\n      } else if (stop(el)) {\n        break;\n      }\n    }\n    return Optional.none();\n  };\n  var ancestor = function ancestor(scope, selector, isRoot) {\n    return ancestor$1(scope, function (e) {\n      return is(e, selector);\n    }, isRoot);\n  };\n  var isSupported = function isSupported(dom) {\n    return dom.style !== undefined && isFunction(dom.style.getPropertyValue);\n  };\n  var get = function get(element, property) {\n    var dom = element.dom;\n    var styles = window.getComputedStyle(dom);\n    var r = styles.getPropertyValue(property);\n    return r === '' && !inBody(element) ? getUnsafeProperty(dom, property) : r;\n  };\n  var getUnsafeProperty = function getUnsafeProperty(dom, property) {\n    return isSupported(dom) ? dom.style.getPropertyValue(property) : '';\n  };\n  var getDirection = function getDirection(element) {\n    return get(element, 'direction') === 'rtl' ? 'rtl' : 'ltr';\n  };\n  var children$1 = function children$1(scope, predicate) {\n    return filter(children$2(scope), predicate);\n  };\n  var children = function children(scope, selector) {\n    return children$1(scope, function (e) {\n      return is(e, selector);\n    });\n  };\n  var getParentElement = function getParentElement(element) {\n    return parent(element).filter(isElement);\n  };\n  var getNormalizedBlock = function getNormalizedBlock(element, isListItem) {\n    var normalizedElement = isListItem ? ancestor(element, 'ol,ul') : Optional.some(element);\n    return normalizedElement.getOr(element);\n  };\n  var isListItem = isTag('li');\n  var setDir = function setDir(editor, dir) {\n    var selectedBlocks = editor.selection.getSelectedBlocks();\n    if (selectedBlocks.length > 0) {\n      each(selectedBlocks, function (block) {\n        var blockElement = SugarElement.fromDom(block);\n        var isBlockElementListItem = isListItem(blockElement);\n        var normalizedBlock = getNormalizedBlock(blockElement, isBlockElementListItem);\n        var normalizedBlockParent = getParentElement(normalizedBlock);\n        normalizedBlockParent.each(function (parent) {\n          var parentDirection = getDirection(parent);\n          if (parentDirection !== dir) {\n            set(normalizedBlock, 'dir', dir);\n          } else if (getDirection(normalizedBlock) !== dir) {\n            remove(normalizedBlock, 'dir');\n          }\n          if (isBlockElementListItem) {\n            var listItems = children(normalizedBlock, 'li[dir]');\n            each(listItems, function (listItem) {\n              return remove(listItem, 'dir');\n            });\n          }\n        });\n      });\n      editor.nodeChanged();\n    }\n  };\n  var register$1 = function register$1(editor) {\n    editor.addCommand('mceDirectionLTR', function () {\n      setDir(editor, 'ltr');\n    });\n    editor.addCommand('mceDirectionRTL', function () {\n      setDir(editor, 'rtl');\n    });\n  };\n  var getNodeChangeHandler = function getNodeChangeHandler(editor, dir) {\n    return function (api) {\n      var nodeChangeHandler = function nodeChangeHandler(e) {\n        var element = SugarElement.fromDom(e.element);\n        api.setActive(getDirection(element) === dir);\n      };\n      editor.on('NodeChange', nodeChangeHandler);\n      return function () {\n        return editor.off('NodeChange', nodeChangeHandler);\n      };\n    };\n  };\n  var register = function register(editor) {\n    editor.ui.registry.addToggleButton('ltr', {\n      tooltip: 'Left to right',\n      icon: 'ltr',\n      onAction: function onAction() {\n        return editor.execCommand('mceDirectionLTR');\n      },\n      onSetup: getNodeChangeHandler(editor, 'ltr')\n    });\n    editor.ui.registry.addToggleButton('rtl', {\n      tooltip: 'Right to left',\n      icon: 'rtl',\n      onAction: function onAction() {\n        return editor.execCommand('mceDirectionRTL');\n      },\n      onSetup: getNodeChangeHandler(editor, 'rtl')\n    });\n  };\n  function Plugin() {\n    global.add('directionality', function (editor) {\n      register$1(editor);\n      register(editor);\n    });\n  }\n  Plugin();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/plugins/custom/tinymce/plugins/directionality/plugin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/plugins/custom/tinymce/plugins/directionality/plugin.js"]();
/******/ 	
/******/ })()
;